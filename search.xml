<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[工作和躺平]]></title>
      <url>/2021/06/27/career-and-unworldliness/</url>
      <content type="html"><![CDATA[<p><img src="/2021/06/27/career-and-unworldliness/white-rainforest-MpIoPBR42qg.jpg" alt=""></p>
<p>(Photo by White.Rainforest ∙ 易雨白林. on Unsplash)</p>
<p>很想选择”躺平”，但是没办法， 有两个娃要养，还是得努力工作。有时候真怀念刚毕业那会儿，随时敢给自己来一场“说走就走”的旅行，现在年岁渐长，已经不复存在那样的勇气。</p>
<p>现在的想法是混到40岁时，可以不再为别人打工。我将其视为人生中的一个小目标，今年我33岁，还有7年时间可以努力。</p>
<p>软件行业非常大，我们这个行业，不论其它，只要水平高，一定可以拿高薪。遗憾的是，过往这10年的职场之路，我没有做到高水平。甚至我知道自己在行业内的技术层次都做不到前10%，这是一个粗略并不准确的数字，不过已经足够表明我的意思。</p>
<p>为了实现这个小目标，这个月我换了一份新工作，没有面试，和老板打电话聊了两次，彼此感觉都还不错，我就直接过来上班了。上一家公司待了不到一年，不想继续干的原因主要有两点：</p>
<ol>
<li><p>无休止的加班和不对等的补偿</p>
</li>
<li><p>COBOL语言实在没劲</p>
</li>
</ol>
<p>第一点涉及到企业文化问题，如果我还年轻，可能不会计较那么多，但作为混迹职场10年的“老人”，我知道付出的同时，有时候还是要顾及自己的感受。劳动市场上中小公司居多，这些民营企业的老板，都会精打细算得很，动员大会上都会说“员工是公司的财富”，财务核算时把每个人都视为劳动成本，口号啥的听听就行，千万不要当真。</p>
<p>你在公司上班，把工作任务做好了，对得起公司给你开的薪水，大家就谁也不欠谁，偶尔加加班也能够理解，公司支那么大的摊子也是不容易，但看不到头的加班，尤其是那种不对等的加班，还是就算了吧。我们当时有个项目，周六固定加一天班，平时一二四晚上固定加班到9点，员工N多个月累计下来的加班工时，公司发放一笔少得可怜的加班津贴，就给你一笔勾销，你觉得这公平吗。</p>
<p>即便你意识到了不公平，你也无处说理，也没人可说理，于是就被憋成了王小波小说里写的“沉默的大多数”，你不发声，老板们就继续把你当工具使唤。中国社会自古就有“把人当工具”使用的传统，我们形成不了工会制度、工会文化，员工跟公司打交道，永远都是弱势群体。</p>
<p>说到第二点其实挺遗憾，甚至有点搞笑，职业发展选错了语言。COBOL是一门老掉牙的语言，和Java的技术栈比起来，它的功能性和复杂程度都要差至少一个数量级。你干了10年COBOL，人家干了10年Java，谁的技术水平高，一目了然。这也是做到现在，我技术水平不高的最主要原因。COBOL语言主要应用在银行、证券、保险领域，上一家公司的产品架构里，核心银行系统就是基于COBOL语言来开发，那一整套产品，还是非常牛的。但我发现这套系统里面，涉及到底层框架的缺陷很难修改；模块之间的耦合性有些高到已经无法解耦，想想这沉淀了20多年的代码，继续为它添砖加瓦对自己意义不大，对自己的提升和帮助其实也有限，根本无法实现我的长远目标。</p>
<p>基于这两点考虑，就萌生了退意。机缘巧合之下我回到了以前参与过的商票之家项目，一套基于SpringBoot微服务搭建的系统，这正是我想要的东西。</p>
<p>虽说有Python垫底，对Java代码本身是不怵的。但突然上手一套SpringBoot系统，老实说，看到复杂的那些业务逻辑，心里还是有点慌的。不过这正是我想要的，想要成长，就得不断突破自己内心的舒适区，以后实力强大了，才有选择“躺平”的勇气。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COBOL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[macOS常用小技巧]]></title>
      <url>/2020/09/06/macos-tips/</url>
      <content type="html"><![CDATA[<p>这是一个长期更新帖，用来记录本人使用macOS遇到过的问题以及应对问题的方法，欢迎查看以及勘误。</p>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="macOS安装Homebrew报错"><a href="#macOS安装Homebrew报错" class="headerlink" title="macOS安装Homebrew报错"></a>macOS安装Homebrew报错</h2><p>问题：在macOS里输入命令直接安装Homebrew提示报错。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shawn@xiaochangdeMacBook-Pro ~ % /bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></div><div class="line">curl: (7) Failed <span class="keyword">to</span> connect <span class="keyword">to</span> raw.githubusercontent.com<span class="built_in"> port </span>443:<span class="built_in"> Connection </span>refused</div></pre></td></tr></table></figure>
<p>原因：这是GitHub的<code>raw.githubusercontent.com</code>域名解析被污染所致</p>
<p>解决办法：修改hosts文件，使用IP地址读取文件内容</p>
<ol>
<li>查询真实IP地址</li>
</ol>
<p>在<a href="https://www.ipaddress.com/查询raw.githubusercontent.com的真实IP。" target="_blank" rel="external">https://www.ipaddress.com/查询raw.githubusercontent.com的真实IP。</a></p>
<p><img src="/2020/09/06/macos-tips/ipaddress_search.jpg" alt=""></p>
<ol>
<li>修改hosts</li>
</ol>
<p>sudo vim /etc/hosts<br>添加如下内容：</p>
<p>199.232.68.133 raw.githubusercontent.com</p>
<ol>
<li>在终端再次安装Homebrew可以成功</li>
</ol>
<h2 id="macOS安装IPython设置软连接"><a href="#macOS安装IPython设置软连接" class="headerlink" title="macOS安装IPython设置软连接"></a>macOS安装IPython设置软连接</h2><p>macOS使用pip3安装IPython成功后。<br>如果出现    <code>ipython command not found</code>，执行下面这条软连接命令即可。</p>
<p>ln -s /Library/Frameworks/Python.framework/Versions/3.6/bin/ipython /usr/local/bin/</p>
<h1 id="网络使用"><a href="#网络使用" class="headerlink" title="网络使用"></a>网络使用</h1><h2 id="查看IP地址"><a href="#查看IP地址" class="headerlink" title="查看IP地址"></a>查看IP地址</h2><p>macOS打开终端，使用如下命令可以查看本机IP地址。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep "inet " | grep -v 127.0.0.1</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VSCode DebuggerforChrome解决跨域问题]]></title>
      <url>/2020/04/21/vscode-debugger-for-chrome-cors/</url>
      <content type="html"><![CDATA[<p>最近两次遇到跨域问题。</p>
<h3 id="Safari浏览器默认设置跨域"><a href="#Safari浏览器默认设置跨域" class="headerlink" title="Safari浏览器默认设置跨域"></a>Safari浏览器默认设置跨域</h3><p>第一个是运行Flask程序时，本地应用请求远程CDN服务器上的js脚本时，出现了跨域导致资源访问不成功，预期js脚本没有执行。</p>
<p>奇怪的是在Chrome里打开应用，不报错；在Safari里打开则存在跨域，如下所示。</p>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/flask_cors_chrome.jpg" alt=""></p>
<p>（图1-Chrome打开不报错，moment-with-locales.min.js获取成功）</p>
<a id="more"></a>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/flask_cors_safari.jpg" alt=""></p>
<p>（图2-Safari打开报错，moment-with-locales.min.js无法获取）</p>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/flask_cors_safari2.jpg" alt=""></p>
<p>（图3-Safari提示跨域报错）</p>
<p>既然Chrome里能够执行成功，说明服务器端针对CORS配置是没有问题的；问题应该是出在浏览器的特性上，搜了一圈答案后，最后发现是Safari浏览器默认设置的问题，进行如下设置即可解决这个问题。</p>
<h4 id="Safari关闭”跨源限制”方法"><a href="#Safari关闭”跨源限制”方法" class="headerlink" title="Safari关闭”跨源限制”方法"></a>Safari关闭”跨源限制”方法</h4><p>Safari关闭”跨源限制”方法：</p>
<blockquote>
<p>打开Safari开发者模式，将”停用跨源限制”功能关闭，再用Safari打开就不会出现这个问题。</p>
</blockquote>
<h3 id="doXHR请求本地文件跨域"><a href="#doXHR请求本地文件跨域" class="headerlink" title="doXHR请求本地文件跨域"></a>doXHR请求本地文件跨域</h3><p>第二次是在Bootstrap里面测试Less代码时，遇到了跨域。</p>
<p>这个Bootstrap代码非常简单，一个<code>testless.less</code>文件，里面使用Less语法定义了两个HTML元素的样式。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@color:</span> <span class="number">#4d926F</span>;</div><div class="line"></div><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个<code>testless.html</code>文件，引用<code>testless.less</code>这个样式文件，测试Less语法是否被执行成功，如果执行成功，<code>h2</code>标签里面的文本会被渲染为绿色。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"testless.less"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/less-3.11.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/less.js/3.11.1/less.min.js" &gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/less.js/3.11.1/less.min.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test less语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试Less<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>上面Less语法被更新为绿色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了确保不是本地<code>less.min.js</code>代码的问题，使用了好几个在线脚本，都是一样的结果。下面分别是在Chrome和Safari里执行的结果，不输出任何内容。</p>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/bootstrap-less-cors-chrome.jpg" alt=""></p>
<p>（图4-Chrome提示无法访问）</p>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/bootstrap-less-cors-safari.jpg" alt=""></p>
<p>（图5-Safari提示得更清楚CORS请求只支持HTTP）</p>
<p>分析出错原因，<code>less.min.js</code>里面doXHR这个函数需要访问本地文件<code>testless.less</code>，CORS的安全策略不允许XHR直接读取本地文件，合适的方法是将这个要访问的文件部署到后端服务或直接放在远程服务器上，通过HTTP请求去读取。</p>
<p>我没有采取这两种方法。</p>
<h4 id="Chrome关闭安全策略避免CORS问题"><a href="#Chrome关闭安全策略避免CORS问题" class="headerlink" title="Chrome关闭安全策略避免CORS问题"></a>Chrome关闭安全策略避免CORS问题</h4><p>在StackOverflow里看到提示说，在OSX终端里使用<code>open -a Google\ Chrome --args --disable-web-security --user-data-dir</code>打开一个关掉安全策略的Chrome浏览器，就可以避免CORS问题。</p>
<p>我试了一下，确实可以。</p>
<p><img src="/2020/04/21/vscode-debugger-for-chrome-cors/bootstrap-less-cors-chrome1.jpg" alt=""></p>
<p>(图6-Less语法执行成功)</p>
<p>这样虽可行，但毕竟很麻烦，每次都需要另外打开一个终端执行命令。能不能直接在VSCode里面使用Debugger for Chrome直接开启一个关闭安全策略的页面呢？</p>
<h4 id="VS-Code配置runtimeArgs参数避免CORS问题"><a href="#VS-Code配置runtimeArgs参数避免CORS问题" class="headerlink" title="VS Code配置runtimeArgs参数避免CORS问题"></a>VS Code配置runtimeArgs参数避免CORS问题</h4><p>翻了一下<a href="https://github.com/Microsoft/vscode-chrome-debug" target="_blank" rel="external">VS Code Debugger for Chrome</a>使用文档后，发现有一个<code>runtimeArgs</code>参数，或许可以用它将关闭安全策略的参数传过去，在当前项目的<code>.vscode/launch.json</code>里加上最后一行参数，测试了一下，发现结果符合预期。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> // Use IntelliSense to learn about possible attributes.</div><div class="line"> // Hover to view descriptions of existing attributes.</div><div class="line"> // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</div><div class="line"> "version": "0.2.0",</div><div class="line"> "configurations": [</div><div class="line">     &#123;</div><div class="line">         <span class="attr">"type"</span>: <span class="string">"chrome"</span>,</div><div class="line">         <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">         <span class="attr">"name"</span>: <span class="string">"Launch Chrome against localhost"</span>,</div><div class="line">         // "url": "http://localhost:8080",</div><div class="line">         "webRoot": "$&#123;workspaceFolder&#125;",</div><div class="line">         "file": "$&#123;file&#125;",</div><div class="line">         "runtimeArgs": ["--disable-web-security", "--user-data-dir"],</div><div class="line">     &#125;</div><div class="line"> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述源代码我放在<a href="https://github.com/benbendemo/learning-python/tree/master/python-flask-cors/flask-cors" target="_blank" rel="external">Python-flask-cors</a>这个仓库里面了，感兴趣可以自己下载测试。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://enable-cors.org/index.html" target="_blank" rel="external">About CORS</a></li>
<li><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1" target="_blank" rel="external">九种跨域方式实现原理（完整版）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
            <tag> VSCode </tag>
            
            <tag> CORS </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask常见问题总结]]></title>
      <url>/2020/04/13/learning-flask2/</url>
      <content type="html"><![CDATA[<h3 id="Flask-Route机制"><a href="#Flask-Route机制" class="headerlink" title="Flask Route机制"></a>Flask Route机制</h3><p>Flask框架比Django后出来，砍掉了很多Django框架中冗余的东西，增加了很多新特性解决了Django框架的痛点。比如一个视图函数中，要控制用户在浏览器里输入的id是一个数字，Django在视图函数中通常使用正则表达式进行过滤，如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    path(<span class="string">''</span>, views.index),</div><div class="line">    re_path(<span class="string">'^users/(\d+)/$'</span>, views.users),</div></pre></td></tr></table></figure>
<p>Flask则不需要这样，只需要在视图函数中使用converter类型的转换器来检查即可，如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@blue.route('/users/&lt;int:id&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(id)</span>:</span></div><div class="line">    print(<span class="string">'id:'</span>, id, type(id))</div><div class="line">    <span class="keyword">return</span> <span class="string">'users id valid'</span></div></pre></td></tr></table></figure>
<p>为什么可以像上面这样呢，是因为Flask是基于Werkzurg的一个框架，Flask的Route在Werkzurg基础上进行了一层封装，继承了Werkzurg里的这种用法。这种机制叫做Converter ，可以通过特定的语法，将 URL中特定部分转化成对应的Python变量。</p>
<a id="more"></a>
<p>Flask中常用的converter类型有下面这几种：</p>
<ul>
<li><p>string：从url中接收斜线（”/“）之前的部分作为参数（默认使用string类型）</p>
</li>
<li><p>int：接收整型</p>
</li>
<li><p>float：接收浮点型</p>
</li>
<li><p>path：接收全部url作为参数，可以接收斜线（”/“）后面的部分</p>
</li>
<li><p>uuid：只接收uuid类型的字符串</p>
</li>
<li><p>any：限定url中接收参数的值</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@blue.route('/getuser/&lt;int:id&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getuser</span><span class="params">(id)</span>:</span></div><div class="line">    print(<span class="string">'id:'</span>, id, type(id))</div><div class="line">    <span class="keyword">return</span> <span class="string">'getuser success'</span></div><div class="line"></div><div class="line"><span class="meta">@blue.route('/getinfo/&lt;string:token&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getinfo</span><span class="params">(token)</span>:</span></div><div class="line">    print(<span class="string">'token:'</span>, token, type(token))</div><div class="line">    <span class="keyword">return</span> <span class="string">'getinfo success'</span></div><div class="line"></div><div class="line"><span class="meta">@blue.route('/getinfo1/&lt;path:token&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getinfo1</span><span class="params">(token)</span>:</span></div><div class="line">    print(<span class="string">'token:'</span>, token, type(token))</div><div class="line">    <span class="keyword">return</span> <span class="string">'getinfo1 success'</span></div><div class="line"></div><div class="line"><span class="meta">@blue.route('/getuuid/&lt;uuid:uuid&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getuuid</span><span class="params">(uuid)</span>:</span></div><div class="line">    print(<span class="string">'uuid:'</span>, uuid, type(uuid))</div><div class="line">    <span class="keyword">return</span> <span class="string">'getuuid success'</span></div><div class="line"></div><div class="line"><span class="meta">@blue.route('/getany/&lt;any("1","11","111"):num&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getany</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'num:'</span>, num, type(num))</div><div class="line">    <span class="keyword">return</span> <span class="string">'getany success'</span></div></pre></td></tr></table></figure>
<p>可以将上面这几个路由映射到同一个视图函数上面：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@blue.route('/getuser/&lt;int:var&gt;/')</span></div><div class="line"><span class="meta">@blue.route('/getinfo/&lt;string:var&gt;/')</span></div><div class="line"><span class="meta">@blue.route('/getinfo1/&lt;path:ar&gt;/')</span></div><div class="line"><span class="meta">@blue.route('/getuuid/&lt;uuid:var&gt;/')</span></div><div class="line"><span class="meta">@blue.route('/getany/&lt;any("1","11","111"):var&gt;/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(var)</span>:</span></div><div class="line">    print(<span class="string">"var:"</span>, var, type(var))</div><div class="line">    <span class="keyword">return</span> <span class="string">'get success'</span></div></pre></td></tr></table></figure>
<p>Flask视图函数中默认支持GET、HEAD、OPTIONS，其余请求类型不支持，需要开发人员手动添加。</p>
<h3 id="Flask请求处理流程"><a href="#Flask请求处理流程" class="headerlink" title="Flask请求处理流程"></a>Flask请求处理流程</h3><p>先说一下Flask请求处理流程：</p>
<p>接收浏览器请求 =&gt; Flask创建一个协程或线程 =&gt; 创建请求上下文对象（称之为request_context，request_context采用threading.Local()方法创建，每一个线程中的request_context都相互独立，互不影响，request_context包含request、flash、session等初始化参数）=&gt; 请求上下文对象入栈 =&gt; 创建该请求的应用上下文（称之为app_context，app_context结构和request_context结构基本一致）=&gt; 应用上下文入栈 =&gt; 调用视图函数处理逻辑 =&gt; 创建Response对象 =&gt; 应用上下文出栈 =&gt; 请求上下文出栈 =&gt; 返回响应给浏览器</p>
<p>Flask默认使用make_response方法创建Response对象。你在视图函数里写的返回值，会被传递到make_response函数里，然后由其判断类型，解析称标准的response对象，再返回给浏览器。</p>
<p><img src="/2020/04/13/learning-flask2/flask_make_response.jpg" alt=""></p>
<p>我们称这为一次处理流程为一次请求的生命周期，g对象的作用范围就在这一次生命周期内。</p>
<h3 id="Flask四大对象"><a href="#Flask四大对象" class="headerlink" title="Flask四大对象"></a>Flask四大对象</h3><p>Request、Session、g、Config</p>
<p>g对象虽然是一个全局对象，但它无法做到跨路由传递参数，因为不相同的两个路由是两个独立的请求，A路由里的g对象数据，无法在B路由里被使用。</p>
<p>如果想实现跨路由传递参数，就需要借助session，session将每一次请求的记录做了持久化处理，即将上一次HTTP请求的会话结果保存了起来（可以存在DB、缓存、文件等），flask默认将session序列化、base64编码、加密后存在了客户端的cookie中。浏览器每次请求进来后，Flask创建请求上下文时会检查是否有session内容，有则读取，没有初始化为None，每次请求处理完后，会设置session值，没有启用session则不处理。</p>
<p>session实现机制简单来说，是这样一个过程：</p>
<ol>
<li>request请求进来后，Flask会先去获取cookie的值</li>
<li>对cookie的值进行base64解码，然后使用secret_key解密，赋值给session进行使用（加密解密模块是基于itsdangerous模块实现）</li>
<li>请求处理完之后，对session数据加密，然后使用base64编码</li>
<li>设置cookie</li>
</ol>
<p>session处理流程中与request一样，同样存在入栈和出栈操作。</p>
<p>g对象在一次请求过程中，用于在不同视图函数间传递参数。</p>
<p>config对象和Flask的app.config模块功能一致，可以从环境变量里获取参数，它可以直接在模板中被引用，在视图函数中要使用，需要从current_app.config获取。</p>
<h3 id="Flask离线脚本"><a href="#Flask离线脚本" class="headerlink" title="Flask离线脚本"></a>Flask离线脚本</h3><p>离线脚本是相对Flask应用请求来说的一个概念，比如你启动了一个Flask应用程序。有视图、有模型，模型连接着后台数据库flask_demo，在浏览器里输入一个路由地址，给数据库flask_demo里User用户表添加了一名用户。</p>
<p>这整个操作过程，都伴随在Flask的request_context（请求上下文）里完成。</p>
<p>如果你不启动这个Flask应用，如何给数据库flask_demo里User用户表插入一条记录呢？</p>
<p>这就是离线脚本可以干的事情。</p>
<p>这个时候没有Flask的在线应用环境可以使用，可以手工创建一个app_context（应用上下文），然后手动操作入栈和出栈，更新数据库表的记录。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 获取到生成app</span></div><div class="line">app = create_app().app</div><div class="line"><span class="meta"># 创建app_ctx</span></div><div class="line">app_ctx = app.app_context()</div><div class="line"><span class="meta"># app_ctx 入栈</span></div><div class="line">app_ctx.push()</div><div class="line"><span class="meta"># 对数据库进行操作</span></div><div class="line">db.session.add(Users(name=<span class="string">"大萨达所1"</span>))</div><div class="line"><span class="meta"># 提交</span></div><div class="line">db.session.commit()</div><div class="line">app_ctx.pop()</div></pre></td></tr></table></figure>
<h3 id="Flask-Request对象"><a href="#Flask-Request对象" class="headerlink" title="Flask Request对象"></a>Flask Request对象</h3><p>服务器在接收到客户端请求后，会自动创建request对象，request对象由Flask框架创建，可以给它添加属性，但不能修改或删除它的属性。</p>
<p>request对象具有如下属性：</p>
<p>url：完整url请求地址</p>
<p>base_url：去掉GET参数的url地址</p>
<p>host_url：只有主机和端口号的url地址</p>
<p>host：只有域名和端口号</p>
<p>path：路由中的路径</p>
<p>method：请求方法</p>
<p>remote_addr：客户端IP地址</p>
<p>args：GET请求参数（例如：接收/xxx/?id=3&amp;username=jack中id和username这两个变量的值），但并不是GET请求专属，所有请求上传参数都可以从args属性中获取</p>
<p>form：POST请求参数（可以使用Postman进行模拟，除了接收POST请求上传的参数，form也可以接收PUT、PATCH、DELETE请求上传的参数；Django可以接收GET和POST请求上传的参数，但没法直接接收PUT、PATCH、DELETE请求上传的参数，只能间接从request.body中提取，这一点没有Flask方便）</p>
<p>（args和form都是ImmutableMultiDict类型，这个类型是Werkzug类对Python字典类型的封装）</p>
<p>files：文件上传</p>
<p>headers：请求头</p>
<p>cookies：请求中的cookie</p>
<h3 id="Flask-Response对象"><a href="#Flask-Response对象" class="headerlink" title="Flask Response对象"></a>Flask Response对象</h3><p>Response对象由开发人员构造，包含服务器返回给客户端的数据，Flask返回的Response通常可以是这4种类型，string，response对象，tuple，WSGI instance实例。</p>
<p>Response返回的4种形式：</p>
<ol>
<li>直接构建Response对象</li>
<li>通过make_response方法返回数据，make_response包含返回的数据内容data以及返回状态码code</li>
<li>直接返回字符串（也可以使用render_template将模板转换为html字符串）</li>
<li>返回模板（本质和方法3一样）</li>
<li>重定向</li>
</ol>
<p>终止处理：</p>
<ol>
<li><p>abort</p>
<p>本质是一个Exception</p>
</li>
<li><p>errorhandler</p>
<p>使用errorhandler进行异常捕获，比如捕获404、401，然后重定向到其它视图，让程序报错变得友好</p>
</li>
</ol>
<h3 id="Session处理"><a href="#Session处理" class="headerlink" title="Session处理"></a>Session处理</h3><p>Session的目的是实现跨请求共享数据，它出现的原因是：</p>
<ol>
<li>web开发中HTTP请求都是”短连接”，尽管现在有keep-alive，但当前请求无法识别上一次请求</li>
<li>HTTP请求是无状态的；</li>
<li>HTTP请求从客户端发起Request到服务端返回Response就处理结束了；</li>
</ol>
<p>常用Session的处理方法有：Cookie、Session、Token</p>
<p>Cookie客户端会话技术，数据存储在客户端，使用key-value结构存储；Flask框架背后的Cookie机制默认对中文字符进行了处理，可以保存用户设置的中文信息。</p>
<p>Flask框架的Session数据默认并不存储在服务器端，它是将Session数据进行序列化、Base64、zlib压缩、哈希等处理之后，保存到客户端的Cookie里面，Flask框架的Session技术允许你查看服务器端存储在客户端的Session数据，但不允许你修改。</p>
<p>Flask的session有效期默认是31天，Django里session有效期默认是15天。</p>
<p>Flask可以借助flask_session插件将Session数据存储在服务器端，将Session数据对应的key存储在cookie里面。</p>
<p>flask_session可以将Session数据存储在Redis、filesystem、memcached、sqlalchemy、mongodb等各类服务器终端中。如果是存储到Redis里面，通过RedisSessionInterface这个类的save_session方法，可以将数据进行pickler序列化，进行签名然后，存储在Redis里面。</p>
<h3 id="Flask-Restful-API"><a href="#Flask-Restful-API" class="headerlink" title="Flask Restful API"></a>Flask Restful API</h3><p>RESTful是一种软件架构风格，实现前后端分离的一种方式，前端通过异步请求的方式与后端交互，后端只负责数据展示。RESTful路径是名词复数，不能出现动词。每种URI代表一种资源，通过HTTP请求谓词来实现资源转换，如GET、POST、PUT、PATCH、DELETE。</p>
<p>RESTful核心在于将后端数据序列化。</p>
<p>默认返回字典，可以直接被序列化；如果返回内容中包含对象，需要先进行序列化处理。</p>
<p>常用序列化工具：</p>
<ol>
<li>marshal函数</li>
<li>marshal_with装饰器</li>
<li>序列化之前需要先定义序列化模板，模板使用字典格式，允许嵌套，value是fields.XXX类型，数据允许是任意格式</li>
<li>如果数据与格式完全对应，数据就是预期结果；如果格式比数据字段多，依然可以正常返回，返回它的默认值；如果格式比数据中的字段少，依然可以正常返回，少的字段不会显示（以格式的模板为主）</li>
<li>想要返回什么的格式以模板定义的内容为准</li>
<li>格式中字段名需要与数据中字段名一致</li>
</ol>
<h3 id="Flask模板"><a href="#Flask模板" class="headerlink" title="Flask模板"></a>Flask模板</h3><p>Flask模板使用Jinja2，与Django模板技术非常相像。使用方法都是先在父模板里定义block块，再在子模板里使用extends继承父模板，将要渲染的内容填充到子模板页面里面。</p>
<p>Flask在Django基础上增加了macro这个功能。</p>
<h3 id="Flask-Bootstrap"><a href="#Flask-Bootstrap" class="headerlink" title="Flask Bootstrap"></a>Flask Bootstrap</h3><p>html_attribs：给整个html添加属性</p>
<h3 id="Flask钩子对象"><a href="#Flask钩子对象" class="headerlink" title="Flask钩子对象"></a>Flask钩子对象</h3><p>钩子函数是面向切面编程的一种方式，它可以动态介入请求流程。例如：before_request、after_request，和Django中中间件的作用非常类似。</p>
<p>以Django举例，一次web请求操作的流程是：</p>
<p>Client -&gt; process_request（列表）</p>
<p>对process_request里每一项逐一进行处理</p>
<p>process_request -&gt; url路由</p>
<p>url路由 -&gt; process_view（列表） </p>
<p>对process_view里每一项逐一进行处理</p>
<p>process_view -&gt; views</p>
<p>views -&gt; models</p>
<p>models -&gt; views渲染模板</p>
<p>views -&gt; response</p>
<p>response -&gt; process_response（列表）</p>
<p>对process_response里每一项逐一进行处理</p>
<h3 id="Flask-url-for函数"><a href="#Flask-url-for函数" class="headerlink" title="Flask url_for函数"></a>Flask url_for函数</h3><p>今天检查以前写的Flask代码，发现<code>url_for</code>里第一个参数对应的视图函数未定义，这个app也可以启动成功，似乎这有些不合逻辑。当我将<code>&#39;static&#39;</code>修改为其它未定义的视图函数时，app启动则报错。原来<code>static</code>是一个内置参数，看Flask源码里url_for函数的定义，它的第一个参数本质是一个<code>endpoint</code>，<code>endpoint</code>作用是给视图函数做标记，Flask服务端接收到浏览器发送过来的路由后，使用它来匹配对应的视图函数。</p>
<p>url_for函数定义中，将<code>static</code>写成<code>.static</code>也不会报错，使用<code>.static</code>这种写法表示Flask会去当前app对应的blueprint里去定位static这个内置的视图函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/', endpoint='index')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span></div><div class="line">    </div><div class="line"><span class="meta">@app.route('/path')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> url_for(<span class="string">'static'</span>, filename=<span class="string">'style.css'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">		print(app.view_functions)</div><div class="line">    print(app.url_map)</div><div class="line">    app.run(debug=<span class="keyword">True</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure>
<p>其实，可以通过打印app.view_functions和app.url_map的值，查看app在运行前已经创建好了哪些视图函数，以及路由与视图函数的对照关系。</p>
<blockquote>
<p>{‘static’: <bound method="" _packageboundobject.send_static_file="" of="" <flask="" 'python_learning_flask_markup_session'="">&gt;, ‘index’: <function index="" at="" 0x102c747a0="">,<br>‘path’: <function path="" at="" 0x10320ea70="">}</function></function></bound></p>
<p>Map([<rule '="" path'="" (get,="" head,="" options)="" -=""> path&gt;,<br> <rule '="" (get,="" head,="" options)="" -=""> index&gt;,<br> <rule '="" static="" <filename="">' (GET, HEAD, OPTIONS) -> static&gt;])</rule></rule></rule></p>
</blockquote>
<p>可以看到，在我们定义的2个路由之外，Flask默认还加载了一个/static/\<filename>路由，如果服务器当前运行目录下有static文件夹，文件夹里面有abc.txt这样一个静态文件。使用<code>http://127.0.0.1:5000/static/abc.txt</code>可以直接将静态文件内容输出到浏览器上面来。</filename></p>
<p>从上面Map对象列表中可以看出，对每一个路由，Flask默认给它设置了GET、HEAD、OPTIONS方法，如果想使用别的方法访问路由，则需要手工指定。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[慢就是快]]></title>
      <url>/2020/04/06/slow-is-fast/</url>
      <content type="html"><![CDATA[<p><img src="/2020/04/06/slow-is-fast/filip-bunkens-IkPpQqSMlk8-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@thebeardbe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Filip Bunkens</a> on <a href="https://unsplash.com/search/photos/bad-investment?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>下面这是春节返深后第一天，我总结假期期间学习的一些内容，当时写了想发出来，后来被耽误了就没发。</p>
<blockquote>
<p>从1/24日到3/28，这是迄今为止在家时间待得最长的一个春节假期。2个月的时间里面，做了下面这些事情：</p>
<ol>
<li><p>基于Python生态做了几十次standalone K8S和Docker-compose应用程序的开发和部署，期间遇到很多问题，解决一个冷不丁地又冒出来一个，这是软件开发这个行业的常态，各种细节问题层出不穷。</p>
</li>
<li><p>基于”未来的软件都将运行在容器里面”这个理念，花了2周左右时间学习Go语言，算基本入门吧，这门语言最大的优势是基于CSP模式在语法层面支持高并发，并且与容器技术紧密结合（Docker和K8S就是使用Go语言来构建），非常值得学习，今年会继续加强。</p>
</li>
<li><p>学习了Django开发，照着教程从0到1一行一行代码写了2个项目，基本可以独立担当Django主力开发角色，目前还差Django Restful Framework这一块，回去了马上补齐。</p>
</li>
</ol>
</blockquote>
<a id="more"></a>
<p>这里面每一条都是一行一行敲代码边写边学，有时遇到问题被卡住，就产生消极情绪，埋怨自己学得慢，过几天问题解决后自信心又慢慢恢复回来，总是感觉”时间不够用”。</p>
<p>最近重新在B站学Flask开发，一行一行敲代码，就觉得以前学的那些Flask开发简直像是白学，不仅缺少练习、还欠缺一个系统性层层深入的过程，并且不够全面，对基于Flask生态的开发漏掉了很多环节，比如其中很重要的一块内容Restful api的设计，这几天重新学才把它给补上。</p>
<p>没办法，谁叫自己以前没接触过网络编程呢。不会的东西刚开始只能一步一步慢慢来，急不得，古人说”欲速则不达”确实非常有道理。一想求快，心态就会乱，动作就会变形，学生时代至今的很多年里，我可能都是这样一个状态吧。</p>
<p>有时候挺羡慕那些学东西特别快的人。如今细细一想，那些学得非常快的人我估计应该是早就有基础，在自身耐心和学习能力不差的情况下，稍微学一下就做到了触类旁通，这种人有点像黄蓉，桃花岛上各类诗书礼仪、武功秘籍、奇门遁甲之术已在爹妈身边耳濡目染了个遍，他人一教，看一眼马上就会。我不具备这个能力，只有笨功夫慢慢学，像郭靖那样。有一点可以确认的是，即便黄蓉这样的人，要想精通一门技艺，也还是需要付出大量持续不断的练习，绝对没有《21天精通降龙十八掌》类似的技术一说。</p>
<p>上周面试了一家大公司的Python后端开发岗，结果令人遗憾，没过。面试官问到了两个薄弱环节，一个是问我Nginx服务器怎样可以做到一台机器上配置多个站点？第二个是让我写快速排序算法。坦白说，Nginx到现在我都没接触过，这自然是答不上来；面试之前压根没想到他们会面算法，问得我一脸懵逼，直接说”我就不浪费时间了，算法这一块没准备写不出来”给跳过了。</p>
<p>后来跟朋友聊天，他说大公司面试一般”重道轻术”，因为”术”的东西，只要你人不傻肯学，迟早都学得会，”道”的方面专考应聘者基础；这下Todo事项里得加上”算法”这一条了。</p>
<p>目前我的计划是，4月份继续加强Django和Flask生态的学习，学到可以完完全全独立做出一个成型的应用来，预计大概还需1个月的时间；5月份学一下小程序开发，它属于HTML5前端页面展示范畴，前端并不是我想要的重点，但我的后端服务需要找一个地方做展示，移动端上目前看小程序是最合适。另外听说小程序设计框架和VUE挺像，要是掌握了它，后面顺便拓展到VUE可能就不是一件难事儿了，预计花2个月左右的时间吧；7月份及后面就是继续学Go语言了，学这门语言既是兴趣也是为将来的工作做准备，写后端程序的过程中，估计会穿插着加强一下算法，今年的下半年估计就死磕在Go语言上面了。</p>
<p>从2010年毕业到现在，已入职场10年，很惭愧前两年我才彻底想清楚了自己想要的职业方向是，以技术为核心能独立做产品的软件工程师。在这10年漫长的职场生涯里，前面5年那些写Cobol编程的日子，基本上都是做重复性的内容，对目前想要的结果可以说是一点帮助都没有，相当于5年时间白费，这也是”快不起来”的重要原因。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 慢就是快 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django学习中遇到的问题]]></title>
      <url>/2020/03/26/django-problems-encountered/</url>
      <content type="html"><![CDATA[<p>本文记录Django学习过程中遇到的奇怪问题。</p>
<h3 id="settings-py设置DEBUG-False导致资源404"><a href="#settings-py设置DEBUG-False导致资源404" class="headerlink" title="settings.py设置DEBUG = False导致资源404"></a>settings.py设置DEBUG = False导致资源404</h3><p>现象：</p>
<p>把project目录下settings.py文件中DEBUG设置为False，页面均可以访问，但加载css和js资源提示404。将DEBUG调为True，这些404就没有了。</p>
<p><img src="/2020/03/26/django-problems-encountered/django_debug_flase_404.jpg" alt=""></p>
<p>原因：</p>
<p>关闭DEBUG模式后，Django不再提供静态文件服务。</p>
<p>解决：</p>
<ol>
<li><p>在 <code>python3 manage.py runserver</code> 命令后添加 <code>--insecure</code> 选项使Django强制处理静态文件。</p>
</li>
<li><p>上面只是临时解决，如果采用其它方式启动服务，添加<code>--insecure</code>方法可能就不起作用，需要通过修改配置文件及url路由来彻底解决这个问题，步骤如下：</p>
<p>a. 在settings.py文件中加上</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Setup `STATIC_ROOT` <span class="keyword">to</span> collect all <span class="keyword">static</span> resources <span class="keyword">from</span> every applications</div><div class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'blog/static'</span>)</div><div class="line"></div><div class="line"># Use `STATICFILES_DIRS` <span class="keyword">to</span> store <span class="keyword">static</span> resouces which are <span class="keyword">not</span> used <span class="keyword">in</span> applications, this can be <span class="keyword">not</span> <span class="keyword">set</span></div><div class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'/static/'</span>)]</div></pre></td></tr></table></figure>
</li>
</ol>
<p>   b. 在project的urls.py文件中增加如下修改（实测在app的urls.py文件中增加如下修改也能起作用）：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</div><div class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> static</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    <span class="comment"># Below 2 methods can both work</span></div><div class="line">    url(<span class="string">r'^static/(?P&lt;path&gt;.*)$'</span>, static.serve, &#123;<span class="string">'document_root'</span>: settings.STATIC_ROOT &#125;, name=<span class="string">'static'</span>),</div><div class="line">    <span class="comment"># re_path('^static/(?P&lt;path&gt;.*)$', static.serve, &#123;'document_root': settings.STATIC_ROOT &#125;, name='static')</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>   c. 执行<code>python3 manage.py collectstatic</code>收集静态资源文件</p>
<p>   根据步骤a里STATIC_ROOT变量第二个参数的值决定是否执行<code>python3 manage.py collectstatic</code>将每一个项目里面使用的静态文件收集到<code>STATIC_ROOT</code>目录下</p>
<ol>
<li><p>如果STATIC_ROOT变量的第二个参数如果填’static’，则需要执行<code>python3 manage.py collectstatic</code>，否则修改不生效；</p>
<p>‘collectstatic’命令执行成功后会在project目录下生成一个static文件夹，里面会存放admin及blog应用使用到的所有静态文件。</p>
<p><img src="/2020/03/26/django-problems-encountered/django_collectstatic_folder.jpg" alt=""></p>
</li>
<li><p>如果STATIC_ROOT变量第二个参数填’blog/static’（在我project下面应用程序名称是blog），不需要执行<code>python3 manage.py collectstatic</code>修改也能生效，但要注意不要把’blog/static’写成了’/blog/static’，否则修改不生效；</p>
</li>
</ol>
<p>   d. 特别说明</p>
<p>   强烈建议使用步骤c中第一种方法，步骤c中方法二虽然可行，但是比较麻烦，如果project下有多个应用，就没办法配置了；而且第二种修改方法对Django Admin页面不生效，即应用程序的静态资源可以加载成功，但Admin页面的静态资源无法加载成功。</p>
<p>   ​        </p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django views之HttpResponse对象]]></title>
      <url>/2020/03/24/django-views3/</url>
      <content type="html"><![CDATA[<p>最近在B站学完一套Django视频课程，整理了一份Django Views思维导图，这一张介绍Django Views里面的HttpResponse对象，整理如下：</p>
<p><img src="/2020/03/24/django-views3/Django_views3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django views之HttpRequest对象]]></title>
      <url>/2020/03/24/django-views2/</url>
      <content type="html"><![CDATA[<p>最近在B站学完一套Django视频课程，整理了一份Django Views思维导图，这一张介绍Django Views里面的HttpRequest对象，整理如下：</p>
<p><img src="/2020/03/24/django-views2/Django_views2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django views基础介绍]]></title>
      <url>/2020/03/24/django-views1/</url>
      <content type="html"><![CDATA[<p>最近在B站学完一套Django视频课程，整理了一份Django Views思维导图，这一张介绍Django Views基础内容，整理如下：</p>
<p><img src="/2020/03/24/django-views1/Django_views1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django MySQL字符集问题]]></title>
      <url>/2020/03/22/django-mysql-charset/</url>
      <content type="html"><![CDATA[<h3 id="保存中文报错"><a href="#保存中文报错" class="headerlink" title="保存中文报错"></a>保存中文报错</h3><p>在Django Adminn里编辑文章，保存中文时出现<code>Incorrect string value: &#39;\xE7\xA8\x8B\xE5\xBA\x8F...&#39; for column &#39;body&#39; at row 1</code>报错。</p>
<p>以前使用MySQL遇到过保存中文报错情况，知道这是数据库编码集没设对的问题。</p>
<a id="more"></a>
<p>使用<code>show create database django_bigbigben;</code>查看数据库的编码集，发现是<code>utf8</code>，说明数据库的编码集并没有问题。</p>
<p><img src="/2020/03/22/django-mysql-charset/mysql_db_charaset.jpg" alt=""></p>
<p>使用<code>show create table blog_post;</code>查看数据表的编码集，发现是<code>latin1</code>。</p>
<p><img src="/2020/03/22/django-mysql-charset/mysql_table_charset.jpg" alt=""></p>
<h3 id="修改Table字符编码"><a href="#修改Table字符编码" class="headerlink" title="修改Table字符编码"></a>修改Table字符编码</h3><p>使用<code>alter table blog_post default character set utf8 collate utf8_general_ci;</code>将编码集修改为<code>utf8</code>。</p>
<p><img src="/2020/03/22/django-mysql-charset/mysql_table_charset_latin1.jpg" alt=""></p>
<p>以为就此大功告成，结果保存时仍然报错，仔细一看才发现<code>body</code>这个column的编码集还是<code>latin1</code>，遂修改数据库表字段的编码集。</p>
<h3 id="修改Column字符编码"><a href="#修改Column字符编码" class="headerlink" title="修改Column字符编码"></a>修改Column字符编码</h3><p>使用<code>show full columns from blog_post;</code>查看数据表<code>blog_post</code>里每一个字段的编码集，发现这3个字段的编码集是<code>latin1_swedish_ci</code>。</p>
<p><img src="/2020/03/22/django-mysql-charset/mysql_column_charaset_latin1.jpg" alt=""></p>
<p>使用下面命令将数据表字段编码集更改为<code>utf8_general_ci</code>。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog_post <span class="keyword">CHANGE</span> title title <span class="built_in">varchar</span>(<span class="number">70</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog_post <span class="keyword">CHANGE</span> <span class="keyword">body</span> <span class="keyword">body</span> longtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog_post <span class="keyword">CHANGE</span> excerpt excerpt <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</div></pre></td></tr></table></figure>
<p><img src="/2020/03/22/django-mysql-charset/mysql_column_charaset_utf8.jpg" alt=""></p>
<p>现在保存中文内容成功。</p>
<p>（注意：由于上面alert语句后面没有加<code>not null</code>，语句被执行后这3个字段被更新为允许为Null。）</p>
<h3 id="修改django-admin-log表字符编码"><a href="#修改django-admin-log表字符编码" class="headerlink" title="修改django_admin_log表字符编码"></a>修改django_admin_log表字符编码</h3><p>但是，文章标题中出现中文内容时又报错<code>Incorrect string value: &#39;\xE6\xA2\xB5\xE8\x92\x82...&#39;for column &#39;object_repr&#39; at row 1</code>，查了一下是Django数据库表<code>django_admin_log</code>里<code>object_repr</code>字段编码集的问题，按照上面方法修改后，中文标题就没问题了。</p>
<h3 id="治本"><a href="#治本" class="headerlink" title="治本"></a>治本</h3><p>以上只是临时解决问题，万一Table需要删除重建或Database需要删除重建，岂不是又得重新来操作一遍？治本的方法是修改MySQL的配置文件，在my.cnf里指定数据库默认使用的数据集以及编码集。</p>
<h4 id="查找my-cnf路径"><a href="#查找my-cnf路径" class="headerlink" title="查找my.cnf路径"></a>查找my.cnf路径</h4><p>macOS环境下MySQL安装在<code>/usr/local/mysql</code>路径下，使用brew安装的可能不是这个路径，使用<code>ps -ef|grep mysql</code>可以查出安装路径。</p>
<p>MySQL5.7版本后默认不使用配置文件，也可以运行服务。</p>
<h4 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h4><ol>
<li><p>停止MySQL服务，将<code>/usr/local/mysql/support-files/my-default.cnf</code>内容复制到<code>/etc/my.cnf</code></p>
</li>
<li><p>在里面加上如下配置信息</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-server = utf8mb4</div><div class="line">collation-server = utf8mb4_general_ci</div></pre></td></tr></table></figure>
<blockquote>
<p>对my.cnf的一点解释说明：</p>
<ol>
<li><p>my.cnf配置文件里[client]下面的参数配置与MySQL服务器配套对应的客户端软件，比如workbench，分析工具等；[mysqld]下面的参数配置MySQL服务器端的字符集，[mysql]下面的参数配置mysql cli使用的相关参数，本文未涉及。</p>
</li>
<li><p>my.cnf文件配置参数非常多，其它自行Google查阅资料，这里不做介绍。</p>
</li>
</ol>
</blockquote>
<ol>
<li><p>重启MySQL</p>
</li>
<li><p>进入shell里面，使用status命令检查</p>
<p>可以看到server端和client端字符集都被更改为了utf8mb4编码（utf8mb4是utf8的超集，使用utf8mb4可以将emoji表情之类的字符保存到数据库）。</p>
</li>
<li><p>删除重建Database，重新生成迁移文件、执行迁移操作后，现在所有数据表都不会出现保存中文字符报错问题。</p>
<p>备注：使用下面命令在MySQL shell中可以查看数据库、数据表、表字段、数据库变量的字符集</p>
<p>show create database <dbname>;</dbname></p>
<p>show create table <tablename>;</tablename></p>
<p>show full columns from <tablename>;</tablename></p>
<p>show variables like ‘character%’;</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django Session介绍]]></title>
      <url>/2020/03/17/django-session/</url>
      <content type="html"><![CDATA[<p>最近在B站学完一套Django视频课程，整理了一份Django Session思维导图，整理如下：</p>
<p><img src="/2020/03/17/django-session/Django session.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Docker-compose部署一个Airflow项目]]></title>
      <url>/2020/03/11/docker-compose-airfow-stockdata/</url>
      <content type="html"><![CDATA[<p>之前一直在本机使用Kubernetes部署Airflow项目，K8S很好，但对于小项目来说，不需要”杀鸡用牛刀”，一般使用Docker-compose就行，这几天将一个Airflow项目改造适配后，使用Docker-compose部署到了腾讯云服务器。</p>
<p>Fork了一份<a href="https://github.com/puckel/docker-airflow" target="_blank" rel="external">puckel/docker-airflow</a>的Airflow Dockerfile镜像文件，做了很多调整和修改，比如将Debian apt源换成清华的apt源，将PyPI官方PIP源换成豆瓣的PIP源等等，修改完后的Dockerfile放在<a href="https://github.com/benbendemo/docker-airflow/tree/develop" target="_blank" rel="external">benbendemo/docker-airflow</a>仓库的<code>develop</code>分支下面。</p>
<p>主要修改内容如下，详细介绍请见<code>develop</code>分支README.md文件。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. Add airflow-common-library-master utility</div><div class="line">2. <span class="keyword">Update</span> the <span class="keyword">default</span> <span class="keyword">settings</span> <span class="keyword">in</span> airflow.cfg</div><div class="line"><span class="number">3.</span> <span class="keyword">Use</span> Tsinghua Debian mirror <span class="keyword">to</span> <span class="keyword">replace</span> <span class="keyword">default</span> Debian apt-<span class="keyword">get</span> <span class="keyword">source</span>, see apt-source.list</div><div class="line"><span class="number">4.</span> <span class="keyword">Add</span> an email-templates <span class="keyword">for</span> airflow <span class="keyword">to</span> automatically send alert email <span class="keyword">and</span> <span class="keyword">success</span> email</div><div class="line"><span class="number">5.</span> <span class="keyword">Use</span> Douban PIP mirror <span class="keyword">to</span> <span class="keyword">replace</span> <span class="keyword">default</span> PIP <span class="keyword">source</span>, see pip.conf</div><div class="line"><span class="number">6.</span> <span class="keyword">As</span> <span class="keyword">for</span> Dockerfile, i have added <span class="keyword">some</span> more Debian apt packages <span class="keyword">and</span> Python pip packages</div><div class="line"><span class="number">7.</span> <span class="keyword">In</span> script/airflow_create_user.py, there <span class="keyword">are</span> two ways <span class="keyword">to</span> <span class="keyword">create</span> airflow login <span class="keyword">user</span> <span class="keyword">when</span> RBAC enabled.Oh forget <span class="keyword">to</span> inform that it<span class="string">'s defaulted to enable RBAC in airflow.cfg</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本地Build镜像测试成功后，我将其提交到Docker Hub仓库<a href="https://hub.docker.com/repository/docker/benbendemo/docker-airflow" target="_blank" rel="external">benbendemo/docker-airflow</a>，并且设置了Automatical Build，以后只要提交git push修改<code>develop</code>分支的Dockerfile文件，Hub仓库就会自动Build一次版本。这样，每次使用<code>docker pull bebendemo/docker-airflow:latest</code>就可以拿到最新的版本。</p>
<p><img src="/2020/03/11/docker-compose-airfow-stockdata/docker-hub-airflow.jpg" alt=""></p>
<p>Airflow镜像搞定之后，需要安装dag文件，从我的私有仓库里拉取stockdata_dag文件，使用<code>docker-compose up -d</code>部署docker-compose.yml文件里定义的服务。</p>
<p><img src="/2020/03/11/docker-compose-airfow-stockdata/stockdata-docker-airflow-dag.jpg" alt=""></p>
<p>重点介绍一下<code>docker-compose.yml</code>文件里的内容，是从puckel提供的docker-compose-LocalExecutor.yml基础上修改得来。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">    postgres:</span></div><div class="line"><span class="attr">        image:</span> <span class="attr">postgres:11.4</span></div><div class="line"><span class="attr">        environment:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_USER=airflow</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_PASSWORD=airflow</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_DB=airflow</span></div><div class="line"><span class="attr">        logging:</span></div><div class="line"><span class="attr">            options:</span></div><div class="line"><span class="attr">                max-size:</span> <span class="number">10</span><span class="string">m</span></div><div class="line"><span class="attr">                max-file:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">        labels:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">"stockdata.postgres"</span></div><div class="line"><span class="bullet">            -</span> <span class="string">"stockdata"</span></div><div class="line"></div><div class="line"><span class="attr">    webserver:</span></div><div class="line"><span class="attr">        image:</span> <span class="string">benbendemo/docker-airflow:latest</span></div><div class="line"><span class="attr">        restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">        depends_on:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">postgres</span></div><div class="line"><span class="attr">        environment:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_USER=airflow</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_PASSWORD=airflow</span></div><div class="line"><span class="bullet">            -</span> <span class="string">POSTGRES_DB=airflow</span></div><div class="line"><span class="bullet">            -</span> <span class="string">LOAD_EX=n</span></div><div class="line"><span class="bullet">            -</span> <span class="string">EXECUTOR=Local</span></div><div class="line"><span class="bullet">            -</span> <span class="string">SCHEDULE_INTERVAL=00</span> <span class="number">20</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></div><div class="line"><span class="bullet">            -</span> <span class="string">STOCKDATA_AIRFLOW_EMAIL_LIST=xxxx@163.com</span></div><div class="line"><span class="bullet">            -</span> <span class="string">K_DATA_CODE=600810</span></div><div class="line"><span class="attr">        logging:</span></div><div class="line"><span class="attr">            options:</span></div><div class="line"><span class="attr">                max-size:</span> <span class="number">10</span><span class="string">m</span></div><div class="line"><span class="attr">                max-file:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">        volumes:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">./dags:/usr/local/airflow/dags</span></div><div class="line">            <span class="comment"># - ./plugins:/usr/local/airflow/plugins</span></div><div class="line"><span class="bullet">            -</span> <span class="string">./config/pip.conf:/etc/pip.conf</span></div><div class="line"><span class="bullet">            -</span> <span class="string">./script/airflow_create_user.py:/usr/local/airflow/airflow_create_user.py</span></div><div class="line"><span class="bullet">            -</span> <span class="string">./dags/stockdata_master/stockdata/requirements.txt:/requirements.txt</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">"30810:8080"</span></div><div class="line"><span class="attr">        command:</span> <span class="string">&gt;</span></div><div class="line"><span class="string">            webserver</span></div><div class="line"><span class="string">        # user: root</span></div><div class="line"><span class="string"></span><span class="attr">        healthcheck:</span></div><div class="line"><span class="attr">            test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"[ -f /usr/local/airflow/airflow-webserver.pid ]"</span><span class="string">]</span></div><div class="line"><span class="attr">            interval:</span> <span class="number">30</span><span class="string">s</span></div><div class="line"><span class="attr">            timeout:</span> <span class="number">30</span><span class="string">s</span></div><div class="line"><span class="attr">            retries:</span> <span class="number">3</span></div><div class="line"><span class="attr">        labels:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">"stockdata.webserver"</span></div><div class="line"><span class="bullet">            -</span> <span class="string">"stockdata"</span></div></pre></td></tr></table></figure>
<p>定义了postgres和webserver两个服务，webserver依赖postgres启动后才可以运行；其它内容我不细说，如果你的<code>docker-compose</code>版本与yml文件里不一致，直接修改version参数的版本即可；如果部署后发现Airflow task运行时无法写文件，添加<code>user: root</code>参数即可，puckle在Dockerfile里定义好了容器启动后默认使用<code>airflow</code>用户。</p>
<p>进入容器创建Airflow用户<code>test</code>，登录<a href="http://johnlyhello.club:10089，即可访问该Airflow服务，由于进行了权限控制，`test`用户只能浏览页面，没有任何页面操作权限。" target="_blank" rel="external">http://johnlyhello.club:10089，即可访问该Airflow服务，由于进行了权限控制，`test`用户只能浏览页面，没有任何页面操作权限。</a></p>
<p><img src="/2020/03/11/docker-compose-airfow-stockdata/johnlyhello.club.jpg" alt=""></p>
<p>软件开发是一个细腻的手艺活，这番部署之后，离一个真正面向客户发布的产品还有重要的几步要走，先记录为Todo事项，以后再来完善它。</p>
<blockquote>
<p>Todo事项：</p>
<p>1.站点开启SSL服务</p>
<p>2.将webserver和scheduler分拆成两个容器部署</p>
<p>3.Flask app+Bootstrap前端页面</p>
</blockquote>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://docs.docker.com/compose/" target="_blank" rel="external">Overview of Docker Compose</a></li>
<li><a href="https://www.jianshu.com/p/2217cfed29d7" target="_blank" rel="external">Docker Compose 配置文件详解</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Docker </tag>
            
            <tag> Airflow </tag>
            
            <tag> Docker-compose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清华和豆瓣的pip源哪个好?]]></title>
      <url>/2020/03/08/tsinghua-vs-doubanio-pip-mirror/</url>
      <content type="html"><![CDATA[<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/iker-urteaga-5ifFHbV-elk-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@iurte?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Iker Urteaga</a> on <a href="https://unsplash.com/s/photos/air-flow?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>今天使用<a href="https://github.com/puckel/docker-airflow" target="_blank" rel="external">puckel</a>提供的Airflow Dockerfile镜像文件build镜像时遇到prison这个包提示如下报错。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/prison-package-error.jpg" alt=""></p>
<p>Docker build过程中，安装flask-appbuilder包时候由于它需要依赖prison包，但pip源里prison包的版本不对，因此报错，镜像打不成功。</p>
<p>我用的是<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="external">清华的pip源</a>。</p>
<a id="more"></a>
<p>prison这个包，查看PyPI和GitHub页面，它的最新版本是0.1.2，如果是清华镜像源的问题，我们可以使用PyPI官网提供的.whl文件进行安装。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/pypi-prison-whl-url.jpg" alt=""></p>
<p>由于我本机也安装了apache-airflow，使用<code>pip3 show prison</code>，可以看到prison版本是0.1.2，并且它被Flask-AppBuilder包依赖。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">192:docker-airflow jacksonshawn$ pip3 show prison</div><div class="line">Name: prison</div><div class="line">Version: 0.1.2</div><div class="line">Summary: Rison encoder/decoder</div><div class="line">Home-page: https://github.com/betodealmeida/python-rison</div><div class="line">Author: Beto Dealmeida</div><div class="line">Author-email: beto@dealmeida.net</div><div class="line">License: MIT</div><div class="line">Location: /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages</div><div class="line">Requires: six</div><div class="line">Required-by: Flask-AppBuilder</div></pre></td></tr></table></figure>
<p>在安装了prison的基础上，使用<code>airflow webserver</code>命令，可以启动airflow的Web UI页面；把prison卸载掉，再使用<code>airflow webserver</code>命令，则提示如下报错，也是flask_appbuilder包提示的报错。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/airflow-webserver-prison-error.jpg" alt=""></p>
<p>上面两种方法可以判断一个Python包被哪些包所依赖。</p>
<p>由于我本机默认使用清华的pip源，使用<code>pip3 install prison</code>安装可以看到它安装的是prison-0.1.1版本，并不是最新的prison-0.1.2版本，并且提示了ERROR信息。虽然报错，但prison-0.1.1版本还是安装成功，我试了一下<code>airflow webserver</code>能够启动成功。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/pip-prison-tsinghua.jpg" alt=""></p>
<p>将默认的pip源换成豆瓣源，卸载掉prison重新安装，可以看到这次安装了prison-0.1.2版本。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/pip-prison-doubannio.jpg" alt=""></p>
<p>这说明，豆瓣的pip源比清华的pip源更新一些，同步得比清华勤快，心里默默给豆瓣点个赞。</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/pip-tsinghua-page.jpg" alt=""></p>
<p>我对清华pypi镜像页面上写的”<strong>pypi 镜像每 5 分钟同步一次</strong>“表示严重怀疑，因为前天我在打Airflow镜像时就遇到过prison版本不对的报错。</p>
<p>其它的Python包我就不去比较了，自此以后，无条件优先使用豆瓣源，pip源配置信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url=https:<span class="comment">//pypi.doubanio.com/simple</span></div><div class="line">#index-url=https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></div><div class="line">[install]</div><div class="line">trusted-host=pypi<span class="selector-class">.doubanio</span><span class="selector-class">.com</span></div><div class="line">#trusted-host=pypi<span class="selector-class">.tuna</span><span class="selector-class">.tsinghua</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span>/</div></pre></td></tr></table></figure>
<p>我们更换pip源，是为了加快Python包的下载安装速度。如果豆瓣源也没有及时更新PyPI的数据，那我们怎么办呢？其实可以直接使用PyPI官网上的.whl文件在线安装。</p>
<p><a href="https://pythonwheels.com" target="_blank" rel="external">.whl文件</a>本质也是一个Python安装包形式，它是用来取代egg安装包的，可以直接使用pip安装（对pip有一定版本要求，基本都满足）。</p>
<p>使用<code>pip3 install https://files.pythonhosted.org/packages/d4/50/7b3c8e694ebe7e1f0ee07e7603c3bcee4db90bc055e6f86c0f66f321ddbb/prison-0.1.2-py2.py3-none-any.whl</code>在线安装.</p>
<p><img src="/2020/03/08/tsinghua-vs-doubanio-pip-mirror/pip-prison-pypi-whl-url.jpg" alt=""></p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="external">清华pypi 镜像使用帮助</a></li>
<li><a href="https://pythonwheels.com" target="_blank" rel="external">Python Wheels</a></li>
<li><a href="https://pypi.org/project/prison/#files" target="_blank" rel="external">PYPI prison 0.1.2</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Airflow </tag>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单节点K8S网络访问超时报错]]></title>
      <url>/2020/03/04/k8s-coredns-dial-tcp-timeout/</url>
      <content type="html"><![CDATA[<p>这几天将一个Python Airflow Project部署到了本机K8S环境，前天一切都很正常。昨天开始出现了这样一个异常情况。</p>
<p>一般情况下，在Airflow里打开Dag的开关后，调度器会自动trigger一次Dag Run，但昨天开始Airflow的调度器自动trigger一直不成功。</p>
<p><img src="/2020/03/04/k8s-coredns-dial-tcp-timeout/stockdata-dag-switch.jpg" alt=""></p>
<p>（图1）</p>
<p>使用<code>kubectl proxy</code>和<code>kubectl -n kube-system describe secret default| awk &#39;$1==&quot;token:&quot;{print $2}&#39;</code>进入K8S Dashboard，查看容器组（也就是Pod）airflow-79885d4bf5-464g5里shceduler这个容器日志，发现如下报错信息。</p>
<a id="more"></a>
<p><img src="/2020/03/04/k8s-coredns-dial-tcp-timeout/k8s-dashboard-stockdata-scheduler-log.jpg" alt=""></p>
<p>(图2)</p>
<p>其实不用K8S Dashboard，使用<code>kubectl logs airflow-79885d4bf5-464g5 scheduler -n stockdata</code>命令也可以查出相关的报错。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192:ShellCodes jacksonshawn$ kubectl get pods -n stockdata</div><div class="line">NAME                                READY   STATUS    RESTARTS   AGE</div><div class="line">airflow-79885d4bf5-464g5            2/2     Running   0          21m</div><div class="line">postgres-airflow-55659bc6fc-6cc4m   1/1     Running   0          21m</div><div class="line">192:ShellCodes jacksonshawn$ kubectl logs airflow-79885d4bf5-464g5 scheduler -n stockdata</div></pre></td></tr></table></figure>
<p>刚开始翻Airflow的源码，是kubernetes_executor执行器报的错，没发现什么有价值的信息。一番seacrh之后，发现<code>10.96.0.1</code>是K8S集群Master节点的IP地址，是Pod与Master节点之间的连通性出了问题，但如果在图1里，手工点击”Trigger DAG”发起一次Dag Run，调度器能够将Dag调度成功，是不是可以认为Pod与Master的初始网络链接出了问题。</p>
<p>使用<code>kubectl cluster-info</code>查看集群信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192:stockdata-dag jacksonshawn$ kubectl cluster-info</div><div class="line">Kubernetes master is running at https://kubernetes.docker.internal:6443</div><div class="line">KubeDNS is running at https://kubernetes.docker.internal:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</div><div class="line"></div><div class="line">To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.</div></pre></td></tr></table></figure>
<p>查看节点信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192:stockdata-dag jacksonshawn$ kubectl get nodes -o wide</div><div class="line">NAME             STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE         KERNEL-VERSION     CONTAINER-RUNTIME</div><div class="line">docker-desktop   Ready    master   43d   v1.14.8   192.168.65.3   &lt;none&gt;        Docker Desktop   4.9.184-linuxkit   docker://19.3.5</div></pre></td></tr></table></figure>
<p>查看K8S kube-system这个namespace里的Pod信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">192:stockdata-dag jacksonshawn$ kubectl get pods -n kube-system</div><div class="line">NAME                                     READY   STATUS    RESTARTS   AGE</div><div class="line">coredns-6dcc67dcbc-76xjh                 1/1     Running   33         43d</div><div class="line">coredns-6dcc67dcbc-lsbtx                 1/1     Running   34         43d</div><div class="line">etcd-docker-desktop                      1/1     Running   33         43d</div><div class="line">kube-apiserver-docker-desktop            1/1     Running   222        43d</div><div class="line">kube-controller-manager-docker-desktop   1/1     Running   124        43d</div><div class="line">kube-proxy-qrm2k                         1/1     Running   26         43d</div><div class="line">kube-scheduler-docker-desktop            1/1     Running   122        43d</div><div class="line">kubernetes-dashboard-5f7b999d65-m6djs    1/1     Running   26         32d</div></pre></td></tr></table></figure>
<p>依次检查两个coredns Pod的日志，发现下面这个异常情况。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">192</span>:stockdata-dag jacksonshawn$ kubectl logs coredns<span class="number">-6</span>dcc67dcbc-lsbtx -n kube-system</div><div class="line">.:<span class="number">53</span></div><div class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-03</span><span class="string">T09:</span><span class="number">35</span>:<span class="number">05.685</span>Z [INFO] CoreDNS<span class="number">-1.3</span><span class="number">.1</span></div><div class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-03</span><span class="string">T09:</span><span class="number">35</span>:<span class="number">05.685</span>Z [INFO] linux/amd64, go1<span class="number">.11</span><span class="number">.4</span>, <span class="number">6</span>b56a9c</div><div class="line">CoreDNS<span class="number">-1.3</span><span class="number">.1</span></div><div class="line">linux/amd64, go1<span class="number">.11</span><span class="number">.4</span>, <span class="number">6</span>b56a9c</div><div class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-03</span><span class="string">T09:</span><span class="number">35</span>:<span class="number">05.685</span>Z [INFO] plugin/<span class="string">reload:</span> Running configuration MD5 = <span class="number">599</span>b9eb76b8c147408aed6a0bbe0f669</div><div class="line">E0303 <span class="number">09</span>:<span class="number">35</span>:<span class="number">30.579778</span>       <span class="number">1</span> reflector.<span class="string">go:</span><span class="number">134</span>] github.com<span class="regexp">/coredns/</span>coredns<span class="regexp">/plugin/</span>kubernetes<span class="regexp">/controller.go:322: Failed to list *v1.Namespace: Get https:/</span><span class="regexp">/10.96.0.1:443/</span>api<span class="regexp">/v1/</span>namespaces?limit=500&amp;resourceVersion=0: dial tcp <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span>: i/o timeout</div><div class="line">E0303 <span class="number">09</span>:<span class="number">35</span>:<span class="number">30.582230</span>       <span class="number">1</span> reflector.<span class="string">go:</span><span class="number">134</span>] github.com<span class="regexp">/coredns/</span>coredns<span class="regexp">/plugin/</span>kubernetes<span class="regexp">/controller.go:315: Failed to list *v1.Service: Get https:/</span><span class="regexp">/10.96.0.1:443/</span>api<span class="regexp">/v1/</span>services?limit=500&amp;resourceVersion=0: dial tcp <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span>: i/o timeout</div><div class="line">E0303 <span class="number">09</span>:<span class="number">35</span>:<span class="number">30.584304</span>       <span class="number">1</span> reflector.<span class="string">go:</span><span class="number">134</span>] github.com<span class="regexp">/coredns/</span>coredns<span class="regexp">/plugin/</span>kubernetes<span class="regexp">/controller.go:317: Failed to list *v1.Endpoints: Get https:/</span><span class="regexp">/10.96.0.1:443/</span>api<span class="regexp">/v1/</span>endpoints?limit=500&amp;resourceVersion=0: dial tcp <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span>: i/o timeout</div></pre></td></tr></table></figure>
<p>查看service信息</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192:~ jacksonshawn$ kubectl <span class="builtin-name">get</span> svc -o wide</div><div class="line">NAME        <span class="built_in"> TYPE </span>       CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE   SELECTOR</div><div class="line">kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   43d   &lt;none&gt;</div></pre></td></tr></table></figure>
<p>使用@dannymk给出的方法，删除services之后，kubernetes马上又重新被create一个，并没有真正解决问题。</p>
<p>查看所有endpoints信息</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">192</span>:~ jacksonshawn$ kubectl get endpoints --all-namespaces</div><div class="line">NAMESPACE     NAME                      ENDPOINTS                                                  AGE</div><div class="line"><span class="meta">default</span>       kubernetes                <span class="number">192.168</span><span class="meta">.65</span><span class="meta">.3</span>:<span class="number">6443</span>                                          <span class="number">43d</span></div><div class="line">kube-system   kube-controller-manager   &lt;none&gt;                                                     <span class="number">43d</span></div><div class="line">kube-system   kube-dns                  <span class="number">10.1</span><span class="meta">.10</span><span class="meta">.148</span>:<span class="number">53</span>,<span class="number">10.1</span><span class="meta">.10</span><span class="meta">.151</span>:<span class="number">53</span>,<span class="number">10.1</span><span class="meta">.10</span><span class="meta">.148</span>:<span class="number">53</span> + <span class="number">3</span> more...   <span class="number">43d</span></div><div class="line">kube-system   kube-scheduler            &lt;none&gt;                                                     <span class="number">43d</span></div><div class="line">kube-system   kubernetes-dashboard      <span class="number">10.1</span><span class="meta">.10</span><span class="meta">.150</span>:<span class="number">8443</span>                                           <span class="number">32d</span></div><div class="line">stockdata     airflow-webserver         <span class="number">10.1</span><span class="meta">.10</span><span class="meta">.193</span>:<span class="number">8080</span>                                           57m</div><div class="line">stockdata     postgres-airflow          <span class="number">10.1</span><span class="meta">.10</span><span class="meta">.192</span>:<span class="number">5432</span>                                           57m</div></pre></td></tr></table></figure>
<p>最后查看所有services时，发现除了kubernetes这个service使用443端口外，其它compose-api和kubernetes-dashboard也使用443端口，会不会是这两个服务将端口占用了导致的文 it。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">192:~ jacksonshawn$ kubectl <span class="builtin-name">get</span> svc --all-namespaces</div><div class="line">NAMESPACE     NAME                  <span class="built_in"> TYPE </span>       CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</div><div class="line">default       kubernetes             ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  44d</div><div class="line">docker        compose-api            ClusterIP   10.102.119.151   &lt;none&gt;        443/TCP                  44d</div><div class="line">kube-system   kube-dns               ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   44d</div><div class="line">kube-system   kubernetes-dashboard   ClusterIP   10.103.217.122   &lt;none&gt;        443/TCP                  32d</div><div class="line">stockdata     airflow-webserver      NodePort    10.105.134.77    &lt;none&gt;        8080:30800/TCP           88m</div><div class="line">stockdata     postgres-airflow       ClusterIP   10.105.126.217   &lt;none&gt;        5432/TCP                 88m</div></pre></td></tr></table></figure>
<p>使用<code>kubectl delete svc/compose-api -n docker</code>和<code>kubectl delete svc/kubernetes-dashboard -n kube-system</code>将这两个使用443端口的service删掉后，以为问题可以就此解决，重启K8S之后，发现问题依然存在。</p>
<p>浪费时间太多，以后对K8S熟悉之后再查吧。</p>
<p><strong>参考资料</strong></p>
<ul>
<li>[<a href="https://github.com/kubernetes/kubeadm/issues/1264" target="_blank" rel="external">kubernetes/kubadm#1264</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Docker </tag>
            
            <tag> Airflow </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> K8S </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket打造资源监控器]]></title>
      <url>/2020/02/18/go-websocketd/</url>
      <content type="html"><![CDATA[<p>最近在学习Go语言。</p>
<p>发现很多优秀的软件服务其后台程序都是基于Go来实现，今天补缺websocket这一块内容时看到阮一峰老师文章《WebSocket 教程》提到<code>WebSocketd</code>，点进去一看，又是一个使用Go语言实现的web服务。</p>
<p>我来了兴趣，决定实现它。</p>
<p>在macOS里实现它非常简单，安装Go语言环境后，直接<code>brew install websocketd</code>即可安装成功，参照官方实例开箱即用；但监控Linux CPU/IO/Mem stats的那个example只能在Linux上跑，我想着在Docker Linux上实现。</p>
<a id="more"></a>
<p>步骤如下：</p>
<blockquote>
<p>1、安装Go环境</p>
<p>2、安装<code>WebSocketd</code>服务</p>
<p>3、安装<code>web-vmstat</code>服务</p>
<p>4、执行shell脚本</p>
</blockquote>
<p><strong>使用Docker Alpine部署</strong></p>
<p>最开始尝试在Docker Alpine里面部署，结果发现<a href="https://stackoverflow.com/questions/52056387/how-to-install-go-in-alpine-linux/53405005" target="_blank" rel="external">Alpine自带的库对Go语言支持不友好</a>，折腾半天嫌麻烦放弃Alpine改用CentOS，并不是说Alpine里不可以安装Go语言环境。改用CentOS不使用Ubuntu是因为Ubuntu默认自带的shell版本为/bin/dash，部署<code>websocketd</code>过程中需要经常使用bash shell命令，想着少一事就少一事，CentOS是最佳的选择。</p>
<p><strong>使用Docker CentOS部署</strong></p>
<p>运行CentOS容器：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> -p <span class="number">8080</span>:<span class="number">8080</span> <span class="comment">--name centoswebsocket &lt;image-id&gt;</span></div></pre></td></tr></table></figure>
<p>参照<a href="https://mirror.tuna.tsinghua.edu.cn/help/centos/" target="_blank" rel="external">CentOS 镜像使用帮助</a>，更改为清华的源。</p>
<p>下载如下内容：</p>
<p>使用wget下载Go语言包，安装后设置好Go语言环境变量；</p>
<p>使用wget下载websocketd-0.3.0-linux_amd64.zip，解压缩后得到一个二进制文件<code>websocketd</code>，将其拷贝到/usr/bin目录，确保<code>WebSocketd</code>是一个全局命令；</p>
<p>使用yum-install安装Git，然后使用Git下载web-vmstats；</p>
<p><img src="/2020/02/18/go-websocketd/websocketd-dir.jpg" alt=""></p>
<p><strong>更改run脚本文件</strong></p>
<p>进到web-vmstats目录，修改run这个bash文件。</p>
<p>将<code>./websocketd --port=9231 --staticdir=web /usr/bin/vmstat -n 1</code>修改为</p>
<p><code>websocketd --port=8080 --staticdir=web /usr/bin/vmstat -n 1</code></p>
<p>两点原因：</p>
<p>1、web-vmstats和<code>websocketd</code>并不在同一个目录，<code>./websocketd</code>命令会报错”not found”</p>
<p>2、端口需要改为使用<code>docker run</code>命令打开的端口</p>
<p><img src="/2020/02/18/go-websocketd/web-vmstats.jpg" alt=""></p>
<p><strong>查看监控页面</strong></p>
<p>上图中执行./run脚本后，服务启动成功，浏览器里输入<code>http://127.0.0.1:8080</code>后即可看到这台Docker CentOS服务器实时的资源监控页面。</p>
<p><img src="/2020/02/18/go-websocketd/webui-websocketd.jpg" alt=""></p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="external">WebSocket 教程</a></li>
<li><a href="https://github.com/joewalnes/websocketd" target="_blank" rel="external">GitHub websocketd</a></li>
<li><a href="https://github.com/joewalnes/web-vmstats" target="_blank" rel="external">GitHub web-vmstats</a></li>
<li><a href="https://www.cnblogs.com/zipon/p/9049433.html" target="_blank" rel="external">linux安装websocketd服务</a></li>
<li><a href="https://www.cnblogs.com/tinywan/p/6826125.html" target="_blank" rel="external">Github 开源项目（一）websocketd （实战：实时监控服务器内存信息）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
            <tag> websocket </tag>
            
            <tag> websocketd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[My grandma just passed away]]></title>
      <url>/2020/01/27/my-grandma-just-passed-away/</url>
      <content type="html"><![CDATA[<p>我奶奶在2020年农历正月初一过世了，享年89.5岁，自然死亡离开的，走得很平安。除夕晚上回到家，我妈跟我说奶奶这次可能真的不行了，我特地下楼去看了一下，她躺在床上半睁着眼，呼气急促没有规律，完全不省人事，情况确实不太好。</p>
<p>初一早上再去看的时候，就没有生命气息了。</p>
<p>今年情况特殊，恰逢”武汉肺炎”冠状病毒肆虐荆楚大地，我们老家离武汉非常近，是重灾区，村委不允许大张旗鼓。若按往常，这一类红白喜事，都是要大摆宴席的，血缘关系近的父老乡亲们都会请来吃席，丧葬礼仪会办得热热闹闹。唢呐吹奏、敲锣打鼓、炮竹鞭炮这些必不可少，童年时期碰到出殡队伍最喜欢做的事情就是跟在丧葬队伍后面玩耍。</p>
<p>今年一切从简，从讣告到出殡总共3天时间。村里面的习俗还是讲究入土为安（我提议过火葬父辈们没同意），明天出殡，今晚由我来守夜，坐在她的灵柩旁边，很多陈年往事一下子在脑海里浮现出来。小时候她去集贸市场卖菜回来给我带的烧饼、她和妈妈吵架、暑假里她做的那些好吃的肉馍馍…..想着想着眼泪就忍不住地掉下来，那些事仿佛就发生在昨天。</p>
<p>时间一晃20多年过去了，我们从年少无知到长大成人，从不当家不知柴米贵到养儿方知父母恩……忽然想起有人说过”成长不一定能够得到，但一定会失去”……</p>
<a id="more"></a>
<p>翻阅QQ空间，找到7年前我写我奶奶的那篇文章，重读了一遍，我觉得写得挺好，现在恐怕写不出这样的文字了，我直接把它贴到这里来吧，当作对她的一份思念。</p>
<p><img src="/2020/01/27/my-grandma-just-passed-away/memory-of-my-grandma.jpg" style="zoom:50%;"></p>
<p>现将原文摘抄如下：</p>
<blockquote>
<p><strong>肖氏家族之奶奶篇</strong></p>
<p>2012/02/18</p>
<p>其实一直有想法写一些关于我奶奶的东西。作为她老人家的长孙，在我们肖家的所有兄弟姐妹当中，毫无疑问，奶奶是最疼我的了，而在所有的兄弟姐妹当中接触奶奶最多的和了解奶奶最多的也是我。在从一个普通青年往文艺青年转型的过程中，我也一直有计划来提高自己的文笔功力，所以今天得以有此文。</p>
<p>我很喜欢史铁生写的《我与地坛》那篇散文，里面把一个儿子对母亲的那种思念和爱表达地既朴素而又淋漓尽致。对于写我奶奶的这篇文章，多是我个人的回忆，缺乏作家的那种底蕴，写不出那种味道来，但我尽力把它写好。</p>
<p>废话颇多，正式开始。</p>
<p>奶奶姓梅，全名梅红莲，这是她们那个年代很通俗很常见的一个名字。奶奶她祖上是哪里我现在已经打听不到了，因为她的兄弟姐妹现在一个个的都不在世了，而她本人今年也有81岁的高寿，上了年纪的人眼睛昏花、耳朵不灵敏、记忆力衰退，每次我问及她本人这些事情的时候，不知道是她没听懂我在问什么还是她听懂了但记不起来有多少。反正次次是无果而终。只不过在我问到“你还想不想爷爷”的时候，她会冷不丁地冒出来一句“死都死了那么多年，还想他做什么”，我就扑哧一笑，她老人家很实在。</p>
<p>我奶奶跟我老妈的婆媳关系这20多年里面几乎从来就没好过。20多年里，两个女人之间，恩恩怨怨，吵架斗嘴，不计其数。我的记忆里面好像有她们两人零星片刻的友好画面但是具体是那些事情我也记不起来了。还在读书的那会，我是极力站在我老妈这一边的，但凡她们两人一吵架的时候，我就冲到中间去劝架，先把我老妈连推带哄地弄进屋，然后再去“喝斥”我奶奶，说她“老东西，人糊涂”。那个时候不懂事，基本上凡事听我妈的，在选择偏颇哪一方的时候，难免有失偏颇；再一个就是实话实说，大多数吵架的时候理是站在我老妈这一边的，因为我奶奶有很无理取闹的一面，比如说不喜欢屋前屋后的邻居过来玩，比如说很不喜欢我姥姥家那边来客人。等到后来我长大了，当她们再吵架，我就会感情上地多偏袒我奶奶一些，因为年纪再比较大了，加上她老人家脑子又已经糊涂了，一个人在家里面待着很闷很孤独，没人陪说话，难免会有“老宇宙”爆发骂张三骂李四的时候，当然大多数情况下还是我奶奶一如既往地无理取闹，这时候我也只能劝劝我老妈“这么多年了，奶奶她人也糊涂了，你说了也没用，她改得了嘛，由她去吧”。</p>
<p>其实，我们的生活里面充斥了很多无奈的事情。以前我奶奶是不这样的，我老妈刚嫁过来那会，听我姥姥说，我奶奶人还是很好的，待她都很和气，亲家母嘛，俩老人在一起说得来聊得来，感情还很融洽。老爸老妈他们结婚之后，我老妈怀着我，那时候家里面建房子，一切事情，前前后后全靠我奶奶一个人打点，夜里经常是忙到一两点钟还没有睡觉。为这个家，奶奶也是操了不少的心。只是在后来老爸得了病，害得我奶奶心烦意乱，性情才慢慢地变了起来。直到今天，我奶奶还是一如既往地不喜欢我姥姥家那边的人，连逢年过节10几岁的表弟来我家串门都不要人家进门，想想看这有多难受。所以，很多时候，我经常在想这个问题，为什么这个世界上很多男人造的孽，却需要由女人来承担和忍受。老爸得病，奶奶是首当其冲第一个遭罪的人，老妈毫无疑问则是受伤最深最重的一个，当然，这些都是后话了。</p>
<p>我小的时候，我们肖家湾还是处在未开垦的“原始”状态。打个赤脚，出门往西走，不出一点远，全部是一片片的菜园、池塘以及家家户户的自留地。那个地方称得上是我们的一片乐土，下河摸鱼，抓螃蟹，玩弹弓，掏鸟窝，捉知了，偷地瓜，那些绿地上面不知道留了我们多少的脚印。奶奶那个时候很要强，由于跟我老妈合不来，加上又是分家住（房子是连在一起的，就在隔壁），所以衣食起居全部是她自己来，60多岁的年纪，自己一个人在池塘边开了一块荒地，种点小菜自己吃，偶尔有多的，就挑到街上去卖。那时候每天的惊喜就是临到中午吃饭的时候等奶奶到街上卖完菜回来能带两个炊饼给我。呵呵，我每次的期盼奶奶几乎一次都没叫我失望过。那个时候最喜欢吃奶奶蒸的一种肉卷，那种味道很特别，特别到老妈不管怎么做，都就是做不出奶奶做的那股味道来，一直到今天我都还记得。</p>
<p>还有让我印象非常深刻的一件事，事情的主角其实是我跟我老妈以及我爷爷，这件事情，奶奶只是被动参与其中，也一并写在这里了。读小学一年级还是二年级的时候，有一次我睡在我奶奶床上，早上起来从她口袋里偷了她7块钱。差不多20年前，那个时候7块钱算相当不菲的一笔零花钱了。那天到学校里面我很客气地带了几个小伙伴跟我一起去扫荡小卖部，买吃的买玩的，差不多把钱花了个精光。晚上一回来，就被我老妈抓住了打。老妈摆出一副悍妇的模样，拿着切菜刀，叫我跪在地上，前面放了个小板凳，教训我“以后再敢偷东西，把我的手指头剁掉”，吓得直哭。当时爷爷在边上劝了几句，“别把孩子吓坏了，教训一下就行了”。奶奶在不在旁边我已经不记得了，她好像没把这个当回事，也不晓得她那次到底有说什么没有。只不过这次挨打的效果出奇地好，打那以后，我生平到现在就再也没有偷过东西了。</p>
<p>小插曲一个，记忆犹新。</p>
<p>爷爷是个老中医，颇有那个年代宅心仁厚的医者品质，为人老实本分，奶奶则是精明能干的类型，操家过日子，样样事情打理得井井有条。想都不用想，他们老两口子吵架的话肯定是我爷爷扛不过我奶奶了。大概是95年吧，爷爷就是在一次跟奶奶吵架之后去了黄石我大伯家生气喝酒突发脑溢血而过世的，享年77岁。奶奶是1931年生人，他们相差13岁。据说奶奶是爷爷的二婚，因为爷爷的第一任老婆不能够生孩子，所以后来休掉了第一任再娶的我奶奶。这样来看的话，这可能性还是有挺大的。</p>
<p>时间就是一把刻刀。我们从背着小书包高高兴兴地去上学到现在大学毕业参加工作将近两年，一下子20多年过去了。岁月在我奶奶的脸上留下了许多的斑点和皱纹。过年在家，只要没事我就跑去她屋子里跟她唠嗑，随便说一些不着边际的话，陪她安安静静地坐在一起烤火喝茶。年纪大了，耳朵不好使了，有时候问她的话我总是不厌其烦地重复好几次她才能够听得清楚。</p>
<p>Q：“还想不想爷爷啊”<br>A：“想哪个”<br>Q：“爷爷啊”<br>A：“还想他做么鬼，死都死了，老说做什么”<br>Q：“你以前带的哪些镯子跟手链呢，你屋滴那个金坛子呢，找出来给得我啊”<br>A：“都搞不见了，那个金坛子在很多年前被村里那个某某某抢得去了，说起来好值钱的一个东西……”</p>
<p>奶奶现在一年一年地老了，也越来越怕冷了，冬天的日子里面一时半刻都离不开取暖设备。偶尔天气暖和的时候，她就拄着根棍子出去溜达一圈，买了无数根拐杖给她，她都不用，嫌没有一根普普通通的棍子用得舒服。现在饭也不能烧了吃，每天基本上是我家端下去送给她吃。还好，奶奶的生活状态倒是出奇地好，饿了能吃好几碗，困了能睡得着觉，渴了就去泡壶茶。生活能够自理并且能吃得下饭睡得着觉，这已经算是很大的福气了，屋前屋后的邻居们这样说，家里面的人也是这样说。</p>
<p>只不过有一件事很搞笑，就是她老人家一直以为我已经结了婚、生了娃，并且我现在在县政府上班，甚至老婆的名字她都已经帮我给想好了，叫红梅。每次回家就问我媳妇带回来了没有，小孩子抱回来回来，然后塞给我她自己存下来的若干私房钱叫我拿去给孩子买奶粉吃，弄得我哭笑不得。因为在她的观念里面，像我现在这么大年纪了，理应结了婚、成了家、生了娃。只可惜您的孙子不挣气啊，20多年到现在，连女朋友都还没讨到一个。</p>
<p>春节在家，一次我跑到她屋子里面跟她唠嗑。</p>
<p>我端端地看着她，开玩笑地叫到“老货，老货”（类似叫她“老东西”的意思）。没想到她一下子听懂了，反应过来，脸马上拉了下来，伸出右手合成的拳头，厉声喝道“老货，老货，再叫我一拳头打死你”</p>
<p>我呵呵地笑，不说话。</p>
<p>然后她沉默了一小会，很认真地跟我说“老货是骂人的话，不能到处乱叫，你要叫就叫我老梅吧”</p>
<p>我哈哈地大笑了起来。</p>
<p>经常是这些时候，我才体会得出来什么叫做“家有一老，如有一宝”。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 奶奶 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2020农历新年快乐]]></title>
      <url>/2020/01/24/2020-lunar-new-year/</url>
      <content type="html"><![CDATA[<p><img src="/2020/01/24/2020-lunar-new-year/2020-lunar-new-year.jpeg" alt=""></p>
<p>在开往回家方向的T398列车上，此时此刻的我，祝大家2020农历新年快乐，祝大家以一个健康的身体和积极的心态迎接新年的到来。</p>
<p>2019年对我来说是非常重要的一年，我想清楚了自己想要的东西是多少，想清楚了自己能够做的事情是什么，想明白了自己以后（未来10年内）要做的事情是什么。这其实是一个很大的话题，三言两语不容易讲清楚，以后再慢慢细说。</p>
<p>工作方面，2019年在公司参与了3个项目，对我来说意义非凡，让我对自己的职业技能有了新的认识，对自己的职业方向有了新的思考。它们让我认识和明确了以下几点：</p>
<ul>
<li>一个优秀的技术人员在项目团队里是非常有价值的</li>
<li>我想成为一名优秀的技术人员</li>
<li>目前我的技术能力离一个优秀的技术人员还相差很远</li>
<li>我定一个10年的计划来达到这个目标，慢的话10年快的话5年我一定可以实现这个目标</li>
</ul>
<a id="more"></a>
<p>学习方面，2019年我阅读了很多技术文章和书籍资料，也敲了很多代码。阮一峰老师的《科技爱好者周刊》是每周必不可少的读物，抛开技术方面的内容，他的这份周刊我觉得适合每一个具备英语阅读能力的人看。Tinyfool的油管视频是意外的收获，特别是他分享自己的英语学习方法，对我来说犹如醍醐灌顶，他用自己的行动力证明自己的学习方法行之有效，非常具备说服力。</p>
<p>编程方面，从0到1完成了一个Python Airflow项目，从本机开发到部署Kubernetes，从整个过程中学到很多，意外地打开了容器化编程的大门，我觉得Docker这种软件部署和其背后的设计思想非常有趣，也进一步激发了我学习Go语言的想法；比较遗憾的是职业生涯的前5年（从事Cobol语言开发）走了一个巨大的弯路，对目前的技术提升几乎一点帮助和积累都没有，以至于现在在就业市场缺乏竞争力，好在已经意识到并且正在努力追赶中。至于为什么我认为这5年是一个巨大的弯路，以后有机会再单独撰文细说。</p>
<p>生活方面，见证了小女从2岁到3岁的成长，她聪明可爱、能说会道、机灵活泼，简直是我们全家的开心果。有时候996加班劳累，想辞职不干，但想一想为了妻儿父母，只能默默忍受，所有的付出都是值得的。2019年比较遗憾的是太缺乏锻炼，身体体质变差了很多。平时加班较多，周末基本都宅在家里看书写代码，运动锻炼的次数屈指可数。</p>
<p>投资方面，买了聚美优品的股票，持仓将近快有2年，一直处于被腰斩状态，愿赌服输，仓位就丢那儿难得动了；A股2019年稍有盈利，但也不吓人，整体加到一起看，还是处于亏损状态。</p>
<p>其它方面也有一些心得体会，但比较杂乱和零碎，多半是一些个人的碎碎念，比较适合和朋友聊天叙说，就不在这儿废话了。</p>
<p>2020年我的目标是在继续夯实Python的基础上，学习Go语言。Python生态强大，可以应用的领域很多，2020年计划染指Django开发和机器学习这两块，目标是各做一个小应用出来。对Go语言的学习，其实2019年我已经开始了，不过现在了解得比较基础，等学到一定程度，我再来写一些心得和总结吧。</p>
<p>2020年还有另外一个目标是，加强英语听力的学习，准备尝试一下tinyfool介绍的新方法。</p>
<p>就写这么些吧，祝大家新年快乐，一年更比一年好。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">科技爱好者周刊</a></li>
<li><a href="https://www.youtube.com/user/tinyfoolgmail" target="_blank" rel="external">Tinyfool</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 新年快乐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Airflow常用操作手册]]></title>
      <url>/2020/01/21/airflow-manual/</url>
      <content type="html"><![CDATA[<h2 id="Airflow操作流程"><a href="#Airflow操作流程" class="headerlink" title="Airflow操作流程"></a>Airflow操作流程</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>使用账号、密码登录Airflow，登录成功后进到Airflow主页面。</p>
<p><img src="/2020/01/21/airflow-manual/airflow-homepage.jpg" alt="airflow-homepage"></p>
<p>（图1）</p>
<a id="more"></a>
<h3 id="打开Dag开关"><a href="#打开Dag开关" class="headerlink" title="打开Dag开关"></a>打开Dag开关</h3><p><img src="/2020/01/21/airflow-manual/airflow-dag-switch.jpg" alt="airflow-dag-switch"></p>
<p>（图2）</p>
<p>选中需要执行的DAG，如图2中，数字1表示打开DAG开关，数字2表示当前UTC时间；数字3表示该DAG自动触发的时间间隔，参数表示的意思是Airflow调度器每天05:30分和17:30分Trigger一次DAG批量。</p>
<p>由于worldcheck_file_downloader已经设置好了自动Trigger时间，DAG开关打开后，Airflow检测到当前系统时间（数字2）达到了DAG触发的时间，整个DAG就会自动执行，Airflow将DAG的每一次执行命名为一次Dag Run，这个词不太好翻译，我们将它理解为一个批次就好。</p>
<p>注意：</p>
<p>如数字4，DAG开关打开后，如果已经触发了批次，在已有task执行的情况下，关闭DAG开关，不会影响当前正在执行的task；如果当前没有task执行，关闭DAG开关，整个DAG就处于关闭状态，DAG开关关闭后即便task达到触发时间，也不会被调度执行（如图4说明）</p>
<h3 id="start-date和schedule-interval"><a href="#start-date和schedule-interval" class="headerlink" title="start_date和schedule_interval"></a>start_date和schedule_interval</h3><p><img src="/2020/01/21/airflow-manual/dag-start-date.jpg" style="zoom:50%;"></p>
<p>（图3）</p>
<p><img src="/2020/01/21/airflow-manual/dag-schedule-interval.jpg" style="zoom:50%;"></p>
<p>（图4）</p>
<p>进到DAG执行页面，点击”Code”，查看start_date参数，<code>airflow.utils.dates.days_ago(1)</code>表示是当前日期前一天的零时零分零秒。schedule_interval参数表示DAG被触发的时间间隔，’30 05,17 <em> </em> *’表示每天的05:30和17:30，该DAG会被自动触发，它与Linux cron表达式的格式兼容。</p>
<h3 id="理解Dag-Run"><a href="#理解Dag-Run" class="headerlink" title="理解Dag Run"></a>理解Dag Run</h3><p>假如今天日期是2020-01-21，上图中start_date表示2020-01-20这天的零时零分零秒，即”<strong>2020-01-20 00:00:00+00:00</strong>“ 这个时间点。</p>
<p>你可能会奇怪，这个时间怎么是一个过去的时间？</p>
<p>其实Airflow的设置规则是：以<strong>start_date</strong> + <strong>schedule_interval</strong>之后的第一个时间点作为第一次触发时间，因此该DAG首次触发时间为2020-01-20 17:30:00+00:00，并不是2020-01-20 05:30:00+00:00；理解这里是一个难点。该DAG首次触发时间是2020-01-20 17:30:00+00:00，此后触发时间依次是2020-01-21 05:30:00+00:00、2020-01-21 17:30:00+00:00、2020-01-22 05:30:00+00:00······注意，这些触发时间并不代表这个批次真正开始执行的时间。</p>
<p>该触发时间只是Dag Run的时间，它只用于确定该批次run_id的时间。见下图5。</p>
<p><img src="/2020/01/21/airflow-manual/dag_run_schedule_run_id.jpg" style="zoom:50%;"></p>
<p>（图5）</p>
<p>红色方框中的Run和run_id是同一个时间”2020-01-17T05:30:00+00:00”，这个批次真正开始执行的时间是Started参数的时间，它是”2020-01-17T17:30:09.250405+00:00”.</p>
<p>如果是手工Trigger的批次，run_id会以”manual”开头，Run、run_id两个参数对应的也是同一个时间，手工Trigger的批次，started时间与run_id时间比较一致。见下图6。</p>
<p><img src="/2020/01/21/airflow-manual/dag_run_manual_run_id.jpg" style="zoom:50%;"></p>
<p>（图6）</p>
<p>理解Airflow每个批次的执行时间是一个难点。</p>
<h3 id="查看Dag执行状态"><a href="#查看Dag执行状态" class="headerlink" title="查看Dag执行状态"></a>查看Dag执行状态</h3><h4 id="查看Graph-View"><a href="#查看Graph-View" class="headerlink" title="查看Graph View"></a>查看Graph View</h4><p>在<code>Graph View</code>查看DAG执行状态。</p>
<p><img src="/2020/01/21/airflow-manual/dag-graph-view2.jpg" alt=""></p>
<p>（图7）</p>
<p>DAG是一个有向无环图，它是一个单向流动的ETL流程图，从上图7中可以看到每一个task的先后执行顺序以及前后依赖关系。只有前置task执行成功后，后续task才会被Trigger；如果后续task有并行分支，会被同时Trigger执行。如上图7<code>aml_get_wc_vault_credentials</code>执行成功后，后续4个task都会同时执行。</p>
<p>对于已经执行完的task，鼠标停留在task上面，会自动浮现出一个黑色的提醒框，显示该task的基本情况。</p>
<p>如图7，鼠标停留在<code>latest_only</code>task上面</p>
<ol>
<li><p>数字1：Airflow当前UTC时间</p>
</li>
<li><p>数字2：默认显示一个与数字1一样的时间，自动跟随数字1的时间变动而变动</p>
</li>
<li><p>数字3：DAG当前批次触发的时间，也就是Dag Run时间，没有什么实际意义</p>
</li>
<li><p>数字4：该task开始执行的时间</p>
</li>
<li><p>数字5：该task开始执行和结束执行的UTC时间</p>
</li>
<li><p>数字6：该task开始执行和结束执行的CST时间，也就是香港本地时间</p>
</li>
</ol>
<h4 id="了解task-status"><a href="#了解task-status" class="headerlink" title="了解task status"></a>了解task status</h4><p>Airflow中每一个task可能有8种状态，使用8种不同的颜色标注，分别是<code>success</code>、<code>running</code>、<code>failed</code>、<code>skipped</code>、<code>up_for_reschedule</code>、<code>up_for_retry</code>、<code>queued</code>、<code>no_status</code>。</p>
<p>每一个task被调度执行前都是<code>no_status</code>状态；</p>
<p>当被调度器传入作业队列之后，状态被更新为<code>queued</code>；</p>
<p>被调度器调度执行后，状态被更新为<code>running</code>；</p>
<p><img src="/2020/01/21/airflow-manual/task-status1.jpg" style="zoom:50%;"></p>
<p>（图8）</p>
<p>如上图8所示，<code>aml_dwn_premium_fullsize_gz</code>task正在执行中，后续作业都在pending它的执行结果</p>
<p>如果该task执行成功，状态会被更新为<code>success</code>；</p>
<p>如果该task执行失败，如果没有设置retry参数，状态立马被更新为<code>failed</code>；如果有设置retry参数，第一次执行失败后，会被更新为<code>up_for_retry</code>状态，等待重新被调度执行，执行完retry次数仍然失败则状态会被更新为<code>failed</code>；</p>
<p><code>skipped</code>状态是指该task被跳过不执行，在worldcheck_file_downloader这个DAG里没有出现；</p>
<p><code>up_for_reschedule</code>状态是指等待重新调度，在worldcheck_file_downloader这个DAG里没有出现；</p>
<ol>
<li>数字7：鼠标选中一种状态点击后，所有该状态的task都会高亮显示，再次点击后，高亮效果自动消失；</li>
</ol>
<p>如下图9，选中”running”状态后，<code>Graph View</code>里只将状态为”running”的task高亮出来，再次点击”running”状态，高亮效果自动取消</p>
<p><img src="/2020/01/21/airflow-manual/task-status2.jpg" alt=""></p>
<p>（图9）</p>
<h4 id="了解Operator"><a href="#了解Operator" class="headerlink" title="了解Operator"></a>了解Operator</h4><ol>
<li>数字8：显示当前task属于Airflow哪种类型的Operator。从数字8里可以看出，该DAG一共使用了<code>DummyOperator</code>、<code>EmailOperator</code>、<code>KubernetesPodOperator</code>、<code>LatestOnlyOperator</code>、<code>ShortCircutOperator</code>5种不同的Operator。更复杂的DAG，可能会使用更多其它类型的Operator。</li>
</ol>
<h4 id="Dag-Run状态"><a href="#Dag-Run状态" class="headerlink" title="Dag Run状态"></a>Dag Run状态</h4><ol>
<li>数字9：显示DAG当前批次的执行状态，DAG每个批次执行完后，只要有一个task执行状态为<code>failed</code>，则该批次的执行状态会被标记为<code>failed</code>，只有当所有task执行状态为<code>success</code>，该批次的执行状态才会被标记为<code>success</code>。</li>
</ol>
<h4 id="查看Tree-View"><a href="#查看Tree-View" class="headerlink" title="查看Tree View"></a>查看Tree View</h4><p>在<code>Tree View</code>查看每一个Dag Run执行情况</p>
<p><img src="/2020/01/21/airflow-manual/dag-tree-view.jpg" style="zoom:50%;"></p>
<p>（图10）</p>
<p>如图10所示，Tree View中第一行是每一个Dag Run的执行结果，红色表示该批次执行失败；绿色表示该批次执行成功；鼠标放在每一个圆圈上面，会浮现一个提示框，显示该批次的执行情况。</p>
<h3 id="手工Trigger-DAG执行"><a href="#手工Trigger-DAG执行" class="headerlink" title="手工Trigger DAG执行"></a>手工Trigger DAG执行</h3><p>点击”Trigger DAG”图标，Airflow会触发一次批量执行，这种人为干预触发的批量，在”Tree View”页面里，其run_id上会显示以manual开头的字符串，表示该批次是手工触发执行。手工Trigger的Dag Run，Started参数与run_id参数比较一致，只是稍稍晚了几秒钟。</p>
<p><img src="/2020/01/21/airflow-manual/tree-view1.jpg" alt=""></p>
<p>（图11）</p>
<p>手工Trigger的批次，和Airflow调度器自动Trigger的批次一样，也是一个完整的批次，从第一个task开始执行到最后一个task。</p>
<h3 id="task-rerun弹窗"><a href="#task-rerun弹窗" class="headerlink" title="task rerun弹窗"></a>task rerun弹窗</h3><p><img src="/2020/01/21/airflow-manual/task-popup.jpg" style="zoom:50%;"></p>
<p>（图12）</p>
<p>点击每一个task，都会弹出这样一个提示框，如上图12所示。</p>
<ol>
<li><p>在数字1中分别点击每一个button，可以跳转到对应页面，查看这个task对应的Task Instance Details信息、Rendered信息、Task Instance信息、Log信息。这4个button中对我们最有用的是”View Log”这个button；</p>
</li>
<li><p>数字2显示该task一共被执行了3次，点击”All”会下载全部3次执行的log日志；点击数字1、2、3则分别只下载那一次的执行结果；</p>
</li>
<li><p>点击数字3中的”Run”可以单次执行该task，右边3个button是执行task时可以选择的条件，鼠标停留在每一个条件上会显示该条件表示的含义。选择”Ignore All Deps”表示忽略该task的前后依赖条件及之前批次的执行状态，直接执行该task。后面两个条件使用得不多，暂不做介绍。</p>
</li>
<li><p>数字4里的”Clear”表示可以清除当前task的执行状态，清除执行状态后，该task会被自动重置为<code>no_status</code>，等待Airflow调度器自动调度执行；注意数字4中”Downstream”和”Recursive”是默认选中的，它的意思是当你点击”Clear”后，当前task及所有后置task的状态都会被清除，即当前task及所有后置task都会重新等待调度执行；</p>
<p>数字4中如果在默认选中”Downstream”和”Recursive”同时，选中”Failed”条件，则表示点击”Clear”后当前task及后置task中所有状态为<code>failed</code>的task会被重新调度执行；</p>
<p>如果同时选中”Upstream”和”Recursive”，点击”Clear”后则表示从Dag第一个task到当前task，这条路径上的所有task会被重新调度执行；其它几个参数使用不多，暂不做介绍。</p>
</li>
<li><p>数字5里的button用于标记task的执行状态，可以将单个task的状态标记为<code>failed</code>，也可以配合”Upstream”参数或”Downstream”参数，将该task所在分支上的所有task的状态标记为<code>failed</code>；</p>
</li>
<li><p>数字6和数字5里功能类似，只是用来将task执行状态标记为<code>success</code>。</p>
</li>
</ol>
<h3 id="task-rerun规则"><a href="#task-rerun规则" class="headerlink" title="task rerun规则"></a>task rerun规则</h3><ol>
<li>整个DAG有4个分支，每个分支都是独立运行，互相不会产生影响。原则上每个task都可以在自己分支上return，不管它上一次的执行结果是成功还是失败。</li>
<li>fullsize分支<code>aml_gen_temenos_fcm</code>这个task依赖两个前置task，只有两个前置task执行成功后，才可以rerun当前这个task。</li>
<li>由于vault TTL参数被设置为1h，从vault获取sftp账号密码task只能在TTL有效期内被rerun，超过TTL有效期，需要先执行它的前置task，然后才可以rerun</li>
<li>只要一个task的前置条件得到满足，它就可以被手工rerun。</li>
</ol>
<h3 id="失败task-rerun"><a href="#失败task-rerun" class="headerlink" title="失败task rerun"></a>失败task rerun</h3><p>整个DAG执行流程中，难免会出现task执行失败。如果出现task执行失败，可以选择手工rerun失败task，也可以视情况rerun整个DAG 分支。</p>
<h4 id="单个task-rerun"><a href="#单个task-rerun" class="headerlink" title="单个task rerun"></a>单个task rerun</h4><p><img src="/2020/01/21/airflow-manual/task-error-rerun2.jpg" alt=""></p>
<p>（图13）</p>
<p>如图13，点击失败task，弹出提示框后，选中”Ignore All Deps”然后点击”Run”即可忽略该task的所有依赖条件立刻执行该task，这种方法只会执行当前这一个task。</p>
<h4 id="rerun失败task及所有后续作业"><a href="#rerun失败task及所有后续作业" class="headerlink" title="rerun失败task及所有后续作业"></a>rerun失败task及所有后续作业</h4><p>1、点击失败task作业，弹出提示框后，选中”Downstream”和”Recursive”后，点击”Clear”按钮</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun3.jpg" alt=""></p>
<p>（图14）</p>
<p>2、点击”Clear”按钮后，会将当前task及所有后续task作业的task id打印出来</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun4.jpg" alt=""></p>
<p>（图15）</p>
<p>3、点击”OK”后，Airflow会将这些task的最近一次执行记录清除，然后将当前task及后续所有task生成新的task instance，将它们放入队列由调度器调度重新执行</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun5.jpg" alt=""></p>
<p>（图16）</p>
<p>从上图可以看到aml_native_dummy task及后续4个task的状态都被更新为”no_status”</p>
<h4 id="rerun失败task及所有之前的作业"><a href="#rerun失败task及所有之前的作业" class="headerlink" title="rerun失败task及所有之前的作业"></a>rerun失败task及所有之前的作业</h4><p>1、选中需要执行的task，弹出提示框后，选中”Upstream”和”Recursive”后，点击”Clear”按钮</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun6.jpg" alt=""></p>
<p>（图17）</p>
<p>2、点击”Clear”按钮后，会将当前task及所有前置task的task id打印出来</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun7.jpg" alt=""></p>
<p>（图18）</p>
<p>3、点击”OK”后，Airflow会将这些task的最近一次执行记录清除，然后为当前task及所有前置task生成新的instance，将它们放入队列由调度器调度执行</p>
<p><img src="/2020/01/21/airflow-manual/task-error-rerun8.jpg" alt=""></p>
<p>（图19）</p>
<p>从上图可以看到aml_native_dummy task及后续4个task的状态都被更新为”no_status”</p>
<h3 id="查看task-XCom"><a href="#查看task-XCom" class="headerlink" title="查看task XCom"></a>查看task XCom</h3><p><img src="/2020/01/21/airflow-manual/task-xcom.jpg" style="zoom:50%;"></p>
<p>（图20）</p>
<p>在查看task执行日志旁边，有一个”Xcom”按钮，XCom是Ariflow用于在task之间传递参数的组件。在worldcheck_file_downloader这个DAG中大量使用XCom组件进行参数传递。如下载文件task，备份AWS S3这些task，都有使用XCom功能传递参数，参数传递成功后，参数内容会在XCom页面保留，可以用来辅助查看这些task的执行情况是否符合预期。</p>
<h2 id="查看Airflow日志"><a href="#查看Airflow日志" class="headerlink" title="查看Airflow日志"></a>查看Airflow日志</h2><p>Dev环境中，可以直接点击”View Log” button查看task的执行日志；由于SIT环境作业日志被定向收集到日志服务器，需要在Kibana里搜索task name查询日志。</p>
<p><img src="/2020/01/21/airflow-manual/task-error-log1.jpg" alt=""></p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://airflow.apache.org/docs/stable/index.html" target="_blank" rel="external">Airflow Documentaion</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Airflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用Docker和K8S命令]]></title>
      <url>/2020/01/19/docker-and-k8s-commands/</url>
      <content type="html"><![CDATA[<p>本篇记录工作项目中经常使用的Docker和K8S命令，我所运行Docker和K8S的工作环境如下所示，大部分本文使用的命令都可以在Linux K8S和Windows10 K8S环境使用，少数命令存在预期结果不一致的地方，请自行查阅资料解决。</p>
<p>注意，这并不是一篇介绍Docker和K8S是什么的文章，入门课程请自行查阅官方文档学习；如果安装Docker和K8S环境也请自行查阅资料解决。</p>
<a id="more"></a>
<p>环境安装好之后，便可以直接在Terminal里输入<code>Docker</code>和<code>Kubectl</code>命令。</p>
<hr>
<p><strong>测试Docker环境</strong></p>
<p>1、查看<code>Docker</code>版本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker --version</div><div class="line">Docker version 19.03.5, build 633a0ea</div><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker-compose --version</div><div class="line">docker-compose version 1.24.1, build 4667896b</div><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker-machine --version</div><div class="line">docker-machine version 0.16.2, build bd45ab13</div></pre></td></tr></table></figure>
<p>2、启动一个nginx服务器，测试Docker环境</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker run -d -p 80:80 --name webserver nginx</div><div class="line">d943b30fc65b3b1a4875caa3468c46bb86c9aa3ff70fce44a8576aa26fbf4e7e</div><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</div><div class="line">d943b30fc65b        nginx               "nginx -g 'daemon of…"   17 seconds ago      Up 15 seconds       0.0.0.0:80-&gt;80/tcp   webserver</div></pre></td></tr></table></figure>
<p><code>docker run</code>命令通过镜像创建一个容器，该命令功能强大，参数居多，这里只用到最基本的几个参数。</p>
<p><code>docker ps</code>查看当前正在运行的镜像，Status显示内容”Up 15 seconds”表示该容器已经成功启动15秒钟。</p>
<p>浏览器打开<a href="http://localhost，可以看到nginx的欢迎页面，说明nginx服务器启动成功。" target="_blank" rel="external">http://localhost，可以看到nginx的欢迎页面，说明nginx服务器启动成功。</a></p>
<p>3、使用<code>docker stop container id</code>或<code>docker stop container name</code>停止这个容器(一般倾向于使用container id)</p>
<p>4、容器停止之后，使用<code>docker ps -a</code>就可以查到该容器的结束记录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                                        COMMAND                  CREATED             STATUS                     PORTS                      NAMES</div><div class="line">d943b30fc65b        nginx                                        "nginx -g 'daemon of…"   8 minutes ago       Exited (0) 5 seconds ago                              webserver</div></pre></td></tr></table></figure>
<p>5、对已停止的容器可以使用<code>docker start container id</code>  重新启动这个已停止的容器</p>
<p>6、对正在运行的容器可以使用<code>docker restart container id</code>来重新启动该容器；当然<code>docker restart container id</code>也可以对已停止的容器使用</p>
<p>7、容器使用后会产生log日志，我发现不管在macOS还是Windows10，PVC对应的默认文件夹路径都在”your currnet username/.docker/Volumes”这个文件夹下面</p>
<p><img src="/2020/01/19/docker-and-k8s-commands/docker-volumes-folder.jpg" alt=""></p>
<p>使用<code>docker rm container id</code>可以将已停止运行的容器删除</p>
<p>8、删除已停止的容器后，可以使用<code>docker rmi image id</code>删除关联的镜像</p>
<p>9、至此，我们的Docker环境测试就结束了；不管你是*nix系统还是Windows系统，只要Docker环境安装成功了，上面的流程都应该能成功。</p>
<hr>
<p><strong>Docker基础部分</strong></p>
<p>1、<code>docker login private hub url</code>和<code>docker logout private hub url</code> </p>
<p>环境安装好之后，使用默认的Docker Hub作为镜像仓库；我们工作项目中使用了私有镜像仓库，因此需要先login。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker login XXX.XXX.XXX.XXX</div><div class="line">Username: vnb-dev</div><div class="line">Password:</div><div class="line">Login Succeeded</div><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker login XXX.XXX.XXX.XXX</div><div class="line">Authenticating with existing credentials...</div><div class="line">Login Succeeded</div><div class="line">JacksonShawnMBP:~ jacksonshawn$</div></pre></td></tr></table></figure>
<p>login成功就可以从这个私有仓库拉取镜像；不想使用私有仓库镜像，只需使用<code>docker logout XXX.XXX.XXX.XXX</code>退出，就会自动转为使用官方镜像。</p>
<p>2、<code>docker logs -f container id</code>或<code>docker logs -t container id</code>查看容器日志</p>
<p>3、容器启动成功后，可以使用<code>docker exec -it container id /bin/bash</code>或<code>docker attach container id</code>进入到容器里面</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">1042cb49b1d8        ec5b6a3ab232        "airflow run worldch…"   21 minutes ago      Up 21 minutes                           k8s_base_worldcheckfiledownloaderamlgentemenosfcm-23f4d1df26f147edbcb8d4689cd9c12c_airflow_29d58db0-3a91-11ea-9053-025000000001_0</div><div class="line">861173bbd573        ec5b6a3ab232        "/entrypoint.sh sche…"   40 minutes ago      Up 40 minutes                           k8s_scheduler_airflow-858d8c6fcf-lgpm4_airflow_835bfba9-3a8e-11ea-9053-025000000001_0</div><div class="line">3da3748064ea        ec5b6a3ab232        "/entrypoint.sh webs…"   40 minutes ago      Up 40 minutes                           k8s_webserver_airflow-858d8c6fcf-lgpm4_airflow_835bfba9-3a8e-11ea-9053-025000000001_0</div><div class="line">2f9ef21f9721        vault               "docker-entrypoint.s…"   3 hours ago         Up 3 hours                              k8s_vault_vault-775bfd6575-t28bp_airflow_cc1f7cf0-376f-11ea-bf4f-025000000001_2</div><div class="line">e6c41740e6a7        53912975086f        "docker-entrypoint.s…"   3 hours ago         Up 3 hours                              k8s_postgres_postgres-airflow-55659bc6fc-xv76l_airflow_c822fe93-376f-11ea-bf4f-025000000001_2</div></pre></td></tr></table></figure>
<p>如上所示，我们输入<code>docker exec -it 3da3748064ea bash</code>进到了k8s_webserver_airflow-xxxxxxxx容器里面，这个命令非常有用，它可以进到容器里查看环境变量、参数配置、程序代码等信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ docker exec -it 3da3748064ea bash</div><div class="line">airflow@airflow-858d8c6fcf-lgpm4:~$ ls</div><div class="line">airflow-webserver.pid  airflow.cfg  config  dags  logs  unittests.cfg  webserver_config.py</div><div class="line">airflow@airflow-858d8c6fcf-lgpm4:~$ pwd</div><div class="line">/usr/local/airflow</div></pre></td></tr></table></figure>
<p>4、使用<code>docker save image-id</code>可以将镜像保存为.tar或.zip文件进行备份</p>
<p>其它常用的Docker命令还有很多，比如<code>docker build</code>构建镜像和<code>docker cp</code>挂载文件卷等，今天这篇写不完，暂且先跳过，下面写最近常用的K8S命令。</p>
<p><strong>Kubectl基础使用</strong></p>
<p>Docker对应的是容器，K8S在容器的基础上抽象出来Pod的概念，容器包含在它里面。集群以Pod为基本单位进行管理。K8S服务启动后，首先可以查看当前启动了哪些Pod。</p>
<p>1、<code>kubectl get pods --all-namespaces</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ kubectl get pods --all-namespaces</div><div class="line">NAMESPACE     NAME                                     READY   STATUS      RESTARTS   AGE</div><div class="line">airflow       airflow-858d8c6fcf-lgpm4                 2/2     Running     0          64m</div><div class="line">airflow       airflow-job-d4fcj                        0/1     Completed   0          64m</div><div class="line">airflow       postgres-airflow-55659bc6fc-xv76l        1/1     Running     2          4d</div><div class="line">airflow       vault-775bfd6575-t28bp                   1/1     Running     2          4d</div><div class="line">docker        compose-6c67d745f6-66cgp                 1/1     Running     2          4d</div><div class="line">docker        compose-api-57ff65b8c7-prsvq             1/1     Running     3          4d</div><div class="line">kube-system   coredns-6dcc67dcbc-h2852                 1/1     Running     5          4d</div><div class="line">kube-system   coredns-6dcc67dcbc-hffkr                 1/1     Running     35         4d</div><div class="line">kube-system   etcd-docker-desktop                      1/1     Running     2          4d</div><div class="line">kube-system   kube-apiserver-docker-desktop            1/1     Running     77         4d</div><div class="line">kube-system   kube-controller-manager-docker-desktop   1/1     Running     27         4d</div><div class="line">kube-system   kube-proxy-rghht                         1/1     Running     2          4d</div><div class="line">kube-system   kube-scheduler-docker-desktop            1/1     Running     25         4d</div></pre></td></tr></table></figure>
<p>namespace为<code>docker</code>和<code>kube-system</code>的那些Pod都是K8S环境启动自带的服务，我们不用理会。重点关注namespace为<code>airflow</code>的这几个Pod。</p>
<p>使用<code>kubectl get pods -n airflow</code>查看namespace为<code>airflow</code>的Pod，可以看到airflow-858d8c6fcf-lgpm4这个Pod它里面包含了2个容器，状态都是Running，没有被重启过，Pod成功运行了67分钟。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ kubectl get pods -n airflow</div><div class="line">NAME                                READY   STATUS      RESTARTS   AGE</div><div class="line">airflow-858d8c6fcf-lgpm4            2/2     Running     0          67m</div><div class="line">airflow-job-d4fcj                   0/1     Completed   0          67m</div><div class="line">postgres-airflow-55659bc6fc-xv76l   1/1     Running     2          4d</div><div class="line">vault-775bfd6575-t28bp              1/1     Running     2          4d</div></pre></td></tr></table></figure>
<p>2、使用<code>kubectl describe pod pod-name -n airflow</code>查看Pod运行状态，但通常这个命令我觉得看不到什么有效信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:~ jacksonshawn$ kubectl logs airflow-858d8c6fcf-s58tm webserver -n airflow</div><div class="line">[2020-01-19 09:44:44,346] &#123;settings.py:252&#125; INFO - settings.configure_orm(): Using pool settings. pool_size=5, max_overflow=10, pool_recycle=1800, pid=1</div><div class="line">/usr/local/lib/python3.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use "pip install psycopg2-binary" instead. For details see: &lt;http://initd.org/psycopg/docs/install.html#binary-install-from-pypi&gt;.</div><div class="line">  """)</div><div class="line">  ____________       _____________</div><div class="line"> ____    |__( )_________  __/__  /________      __</div><div class="line">____  /| |_  /__  ___/_  /_ __  /_  __ \_ | /| / /</div><div class="line">___  ___ |  / _  /   _  __/ _  / / /_/ /_ |/ |/ /</div><div class="line"> _/_/  |_/_/  /_/    /_/    /_/  \____/____/|__/</div><div class="line">[2020-01-19 09:44:47,550] &#123;__init__.py:51&#125; INFO - Using executor KubernetesExecutor</div><div class="line">[2020-01-19 09:44:47,553] &#123;dagbag.py:92&#125; INFO - Filling up the DagBag from /dev/null</div><div class="line">[2020-01-19 09:44:48,928] &#123;security.py:453&#125; INFO - Start syncing user roles.</div><div class="line">[2020-01-19 09:44:50,479] &#123;security.py:364&#125; INFO - Fetching a set of all permission, view_menu from FAB meta-table</div><div class="line">[2020-01-19 09:44:51,504] &#123;security.py:307&#125; INFO - Cleaning faulty perms</div><div class="line">Running the Gunicorn Server with:</div><div class="line">Workers: 4 sync</div><div class="line">Host: 0.0.0.0:8080</div><div class="line">Timeout: 120</div><div class="line">Logfiles: - -</div><div class="line">=================================================================</div></pre></td></tr></table></figure>
<p>4、使用<code>kubectl get event -n airflow</code>查看K8S启动Pod过程中产生的各类事件，对排查Pod无法启动或启动报错等原因有帮助</p>
<p>5、假如程序版本有变动，需要发布新版本，可以使用<code>kubectl delete pod pod-name</code>一个一个将Pod删除，然后再重新启动。</p>
<p>逐个删除Pod比较费力，我们可以使用<code>kubectl delete deployment airflow -n airflow</code>将namespac为<code>airflow</code>里面Pod名字包含<code>airflow</code>的全部一次性删除</p>
<p>也可以直接使用<code>kubectl delete namespace airflow</code>将namespace为<code>airflow</code>的所有Pod都删除。</p>
<p>6、使用<code>kubectl apply</code>可以将服务部署到K8S集群里面，这个需要实际操练，本文不做讲解</p>
<p>基础的Docker和K8S命令先简单介绍到这里，经常动手操练，日积月累，才能够做到熟练应用。</p>
<hr>
<!--more-->
<p><strong>常用Docker命令</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 查看Docker版本</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker --version</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker-machine --version</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 测试Docker环境</span></div><div class="line">运行nginx镜像实例，-d表示守护进程，-p表示将宿主机30882端口映射到容器的80端口</div><div class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 30882:80 --name webserver nginx</span></div><div class="line"></div><div class="line">http://localhost:30882/</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 刪除nginx服务器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker stop webserver</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rm webserver</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 列出当前执行中的容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container ls</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker ps</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 列出所有容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container ls -a     </span></div><div class="line"><span class="meta">$</span><span class="bash"> docker ps -a </span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 列出所有容器id集合</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container ls -q</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker ps -q</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 停止容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container stop &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker stop &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 强制退出删除容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container <span class="built_in">kill</span> &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container rm &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rm &lt;<span class="built_in">hash</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除所有容器（谨慎使用）</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container rm $(docker container ls -q)</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8080:80 --name webserver nginx </span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看指定容器的端口映射</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker port &lt;container-id/container-name&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看容器<span class="built_in">log</span>日志</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker logs -f &lt;container-id/container-name&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看容器里运行的PID(比较少用)</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker top &lt;container-id/container-name&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 检查容器的底层信息（比较少用）</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker inspect &lt;container-id/container-name&gt; </span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查询容器IP地址方法1:</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker inspect -f <span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> &lt;container-id&gt;或&lt;container-name&gt;</span></div><div class="line"><span class="meta">#</span><span class="bash"> 查询容器IP地址方法2：</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker inspect &lt;container-id&gt;或&lt;container-name&gt; | grep IPAddress</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看宿主机ip地址</span></div><div class="line">在Linux服务器终端里使用下述命令，可以查到ip地址是172.17.0.1</div><div class="line"><span class="meta">$</span><span class="bash"> ip addr show docker0</span></div><div class="line">macOS终端没有docker0虚拟网卡，宿主机IP默认是192.168.65.1，可在docker-for-desktop里设置。</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 进入容器的两种方法，可以指定使用root用户进入容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &lt;container-id&gt; /bin/bash</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 以root用户进入容器执行操作</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user root &lt;container-id&gt; /bin/bash</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 使用docker attach</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker attach &lt;container-id&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker attach --sig-proxy=<span class="literal">false</span> &lt;container-id&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> docker attach与docker <span class="built_in">exec</span>的区别</span></div><div class="line">docker attach可以将容器与当前终端共用一个屏幕；使用Ctrl+C可以从容器退出，也就是detach，但实际情况是将容器也停止了；加上--sig-proxy=false参数关联容器后，使用Ctrl+C从容器退出则不会将容器自动停止；</div><div class="line">docker exec是进到容器里面执行命令或查看文件，它和docker attach区别其实挺大</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 通过容器制作镜像 </span></div><div class="line">-m参数表示制作image时写的描述信息，container-id/container-name指要制作inage的容器id或容器名称，最后的“ubuntu-python3-airflow:v0.2”表示待制作镜像的image name和其版本号</div><div class="line"><span class="meta">$</span><span class="bash"> docker commit -m <span class="string">'create airflow image'</span> &lt;container-id/container-name&gt; ubuntu-python3-airflow:v0.2</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 容器端口映射</span></div><div class="line">docker run命令-it参数后面指定Repository和Tag参数或指定Image ID即可使用这个镜像创建容器并启动容器，-i参数表示可以交互，-t参数表示该容器支持终端登录，-p 8080:8080表示将宿主机的8080端口映射到容器的8080端口</div><div class="line"><span class="meta">$</span><span class="bash"> docker run -it -p 8080:8080 python3-ubuntu-stockdata:v0.1 /bin/bash</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker run -it -p 8080:8080 centos-py3.6-af:0.0.1 /bin/bash</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 容器端口映射</span></div><div class="line">如果使用-P参数，则将容器暴露的所有端口随机映射到宿主机上</div><div class="line"><span class="meta">$</span><span class="bash"> docker run -P -d nginx:latest</span></div><div class="line"></div><div class="line">下面表示将容器的80端口随机映射到宿主机的一个高段端口上（高于1024的随机端口号）</div><div class="line"><span class="meta">$</span><span class="bash"> docker run -P 80 -d nginx:latest</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 挂载文件卷</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /Users/jacksonshawn/Downloads/testdocker:/var alpine sh</span></div><div class="line">如上所示，将宿主机`/Users/jacksonshawn/Downloads/testdocker`文件夹挂载到alpine镜像生成的容器的`/var`路径，然后在容器中执行sh命令；</div><div class="line"></div><div class="line">挂载到容器里面的文件如果被修改或删除，对应宿主机上的文件也会被同步修改或删除，一定谨慎使用删除功能</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 宿主机拷贝文件到容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker cp /Users/jacksonshawn/Downloads/testdocker/a.txt &lt;container id&gt;:/var</span></div><div class="line">从宿主机拷贝到容器里的文件，在容器里被修改或删除后，宿主机里的文件不会被同步修改或删除</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> docker cp /Users/jacksonshawn/airflow/config/airflow.cfg &lt;container-id&gt;:/usr/<span class="built_in">local</span>/airflow/airflow.cfg </span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 容器拷贝文件到宿主机</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker cp &lt;container id&gt;:/var/b.txt /Users/jacksonshawn/Downloads/testdocker</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker cp &lt;container-id&gt;:/usr/<span class="built_in">local</span>/airflow/airflow.cfg /Users/jacksonshawn/airflow/config</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 使用Dockerfile生成镜像，Dockerfile编写比较复杂，不在这里过多展开</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image build -t centos-py3.6-af:0.0.1 .</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image build --no-cache -t centos-py3.6-af:0.0.1 . -f Dockerfile.centos</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image build --no-cache -t centos-py3.6-af:0.0.1 .</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image build -t centos-py3.6-af:0.0.1 .</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 列出所有容器ID然后删除</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker ps -aq</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker stop $(docker ps -aq)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 刪除所有容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rm $(docker ps -aq)</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker container prune -f(谨慎使用)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 停止所有已经运行完的容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker stop $(docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除所有已经运行完的容器</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rm $(docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除所有REPOSITORY为None的镜像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images | grep <span class="string">"none"</span> | awk <span class="string">'&#123;print $3&#125;'</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 刪除所有镜像（不要使用）</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images -q)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 刪除所有不使用的鏡像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image prune(谨慎使用)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除所有指定名称镜像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image rm $(docker image ls -q redis)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除所有镜像(不要使用)</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker image prune --force --all</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Docker运行mssql(详细查看Docker mssql官方文档)</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker run -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=zaq1@WSX'</span> -p 1433:1433 --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> docker run --memory=512M -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=zaq1@WSX'</span> -p 1433:1433 --<span class="built_in">cap</span>-add SYS_PTRACE --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> docker run -m=2G -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=zaq1@WSX'</span> -p 1433:1433 --<span class="built_in">cap</span>-add SYS_PTRACE --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &lt;container-id&gt; /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P your-password</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 登录私有仓库</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker login XXX.XXX.XXX.XXX</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">logout</span> XXX.XXX.XXX.XXX</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 将image镜像备份为文件</span></div><div class="line">docker save &lt;image-id&gt; &gt; /XXX/Download/airflow.20200223.tar</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 从备份文件中导入image镜像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker load -q -i /XXX/Download/airflow.20200223.tar</span></div><div class="line">由于导入进来的image镜像REPOSITORY和TAG都为none，需要使用docker tag来标记它的名字和标签</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 标记镜像的tag名称</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker tag &lt;image-id&gt; &lt;image-name&gt;:&lt;image-tag&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 将正在运行的容器打成镜像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker commit &lt;container-id&gt; &lt;image-name&gt;:&lt;image-tag&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除镜像标签</span></div><div class="line"><span class="meta">#</span><span class="bash"> 对于一个镜像有多个标签的情况，以下可以删除指定的标签；如果该镜像只有一个标签，下面命令就是删除镜像</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker rmi &lt;image-name&gt;:&lt;image-tag&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看容器端口映射</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker port &lt;container-id&gt;</span></div><div class="line">如下所示，说明容器里的9000和8000端口分别被映射到了宿主机的9000和8000端口</div><div class="line">9000/tcp -&gt; 0.0.0.0:9000</div><div class="line">8000/tcp -&gt; 0.0.0.0:8000</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 显示容器使用的系统资源</span></div><div class="line"><span class="meta">$</span><span class="bash"> docker stats</span></div><div class="line">stats命令每隔1秒会刷新输出内容，在命令后面加上"--no-stream"则只输出当前状态；</div><div class="line">如果需要显示指定容器使用的系统资源，则在后面加上容器id或容器名即可，使用Ctrl+C命令退出；</div><div class="line">这个命令有个额外的作用是可以防止SSH断开</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> docker stats &lt;container-id&gt;或&lt;container-name&gt;</span></div></pre></td></tr></table></figure>
<!--more-->
<p><strong>常用K8S命令</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 显示pod信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl describe pod airflow-858d8c6fcf-9q4bw --namespace=airflow &gt;&gt; pod.txt</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl describe pod airflow-job-z7f8f -n airflow &gt;&gt; pod.txt</span></div><div class="line"> </div><div class="line"><span class="meta">#</span><span class="bash"> 显示pvc信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl describe pvc sample-dags-pvc -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 打印pod日志信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl logs &lt;pod-name&gt; -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 对于一个pod里有多个container的情况</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl logs &lt;pod-name&gt; webserver -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl logs &lt;pod-name&gt; scheduler -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看k8s事件</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get event -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看集群健康状态</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get cs</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看所有namespace</span></div><div class="line"><span class="meta">$</span><span class="bash"> Kubectl get ns</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看所有service</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get service -o wide</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get services --all-namespaces</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get svc --all-namespaces</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl describe svc kubernetes</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看pods </span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get pods -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get pods --all-namespaces</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 指定yaml文件部署pods</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f k8s/airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f k8s/vault</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f k8s/deploy</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看pvc</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get pvc --all-namespaces</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete pvc &lt;pvc-name&gt; -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看pv</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get pv --all-namespaces</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看job</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get <span class="built_in">jobs</span> --all-namespaces</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除job</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete job airflow-job -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看configmap</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get configmap --all-namespaces</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get configmap &lt;configmap-name&gt; -o yaml -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get configmap airflow-configmap -o yaml -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get configmap airflow-env -o yaml -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看Secret</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get Secret --all-namespaces</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除pod</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete pod &lt;pod-name&gt; -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete po &lt;pod-name&gt; -n airflow --force --grace-period=0</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看并删除deployment</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get deployment -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete deployment &lt;deployment-name&gt; -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete deployment postgres-airflow -n airflow</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete deployment airflow -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看并删除namespace</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl get namespaces</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete namespace airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 根据配置文件创建pod</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl create -f k8s/airflow/download.local.yaml</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl create -f k8s/airflow/sampledags.local.yaml</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看pod环境变量</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl <span class="built_in">exec</span> &lt;pod-name&gt; env -n airflow</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看cluster信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl cluster-info</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看k8s配置文件信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl config view</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 配置k8s dashboard</span></div><div class="line">step1: 安装k8s dashboard镜像</div><div class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></div><div class="line"></div><div class="line">step2: 启动k8s dashboard服务</div><div class="line"><span class="meta">$</span><span class="bash"> kubectl proxy</span></div><div class="line"></div><div class="line">step3: 获取k8s dashboard访问token</div><div class="line"><span class="meta">$</span><span class="bash"> kubectl -n kube-system describe secret default| awk <span class="string">'$1=="token:"&#123;print $2&#125;'</span></span></div><div class="line"></div><div class="line">step 4: 访问k8s dashboard页面</div><div class="line">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 删除k8s dashboard</span></div><div class="line"><span class="meta">$</span><span class="bash"> kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 没有yaml文件时强制重启pod</span></div><div class="line">kubectl get pod &lt;podname&gt; -n &lt;namespace&gt; -o yaml | kubectl replace --force -f -</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://docs.kubernetes.org.cn" target="_blank" rel="external">Kubernetes中文社区 | 中文文档</a></li>
<li><a href="https://jimmysong.io/kubernetes-handbook/concepts/" target="_blank" rel="external">Kubernetes架构</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="external">Docker-从入门到实践</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Airflow </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python paramiko下载大文件报错]]></title>
      <url>/2020/01/12/python-paramiko-error/</url>
      <content type="html"><![CDATA[<p>Airflow pipeline作业流遇到这样一个问题：使用paramiko下载小文件成功，下载大文件出现<code>Server connection dropped</code>报错。</p>
<hr>
<p><strong>问题描述</strong></p>
<p>下图可以看到<code>aml_dwn_native_gz</code>、<code>aml_dwn_deleted_daily</code>、<code>aml_dwn_premium_daily</code>三个作业执行成功，但<code>aml_dwn_premium_fullsize_gz</code>出现报错。</p>
<p><img src="/2020/01/12/python-paramiko-error/airflow-paramiko-task-error.jpg" alt=""></p>
<a id="more"></a>
<p>四个下载作业均使用<code>ShortCircuitOperator</code>，代码块如下所示，唯一不同的是传入的参数<code>filename1</code>和<code>filename2</code>在k8s配置文件中对应的文件名不同。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Airflow premium fullsize process</span></div><div class="line">aml_dwn_premium_fullsize_gz = ShortCircuitOperator(</div><div class="line">    task_id=<span class="string">'aml_dwn_premium_fullsize_gz'</span>,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=load_function(<span class="string">'worldcheck_file_downloader.aml_download_files.\</span></div><div class="line"><span class="string">                                    aml_download_files'</span>,<span class="string">'aml_download_files'</span>),</div><div class="line">    executor_config=&#123;</div><div class="line">            <span class="string">'KubernetesExecutor'</span>: &#123;</div><div class="line">                <span class="string">'image'</span>: <span class="string">'|| getenv "IMAGE_AIRFLOW" ||'</span>,</div><div class="line">                <span class="string">"volumes"</span>: [</div><div class="line">                    &#123;</div><div class="line">                        <span class="string">"name"</span>: <span class="string">"airflow-download"</span>,</div><div class="line">                        <span class="string">"persistentVolumeClaim"</span>: &#123;</div><div class="line">                            <span class="string">"claimName"</span>: <span class="string">'|| getenv "TASKS_PVC" ||'</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                ],</div><div class="line">                <span class="string">"volume_mounts"</span>: [</div><div class="line">                    &#123;</div><div class="line">                        <span class="string">"mountPath"</span>: <span class="string">'|| getenv "VOLUME_MOUNT_PATH" ||'</span>,</div><div class="line">                        <span class="string">"name"</span>: <span class="string">'airflow-download'</span>,</div><div class="line">                    &#125;,</div><div class="line">                ]</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">    op_kwargs=&#123;<span class="string">'sftphost'</span>: <span class="string">'|| getenv "SFTP_HOST" ||'</span>,</div><div class="line">               <span class="string">'sftpport'</span>: <span class="string">'|| getenv "SFTP_PORT" ||'</span>,</div><div class="line">               <span class="string">'sftpremotepath1'</span>: <span class="string">'|| getenv "SFTP_REMOTEPATH1" ||'</span>,</div><div class="line">               <span class="string">'sftpremotepath2'</span>: <span class="string">'|| getenv "SFTP_REMOTEPATH2" ||'</span>,</div><div class="line">               <span class="string">'sftpusername'</span>: <span class="string">'|| getenv "SFTP_USERNAME" ||'</span>,</div><div class="line">               <span class="string">'sftppassword'</span>: <span class="string">'|| getenv "SFTP_PASSWORD" ||'</span>,</div><div class="line">               <span class="string">'worldcheck_download_basedir'</span>: <span class="string">'|| getenv "DOWNLOAD_BASEDIR" ||'</span>,</div><div class="line">               <span class="string">'filename1'</span>: <span class="string">'|| getenv "PREMIUM_FULLSIZE_GZ" ||'</span>,</div><div class="line">               <span class="string">'filename2'</span>: <span class="string">'|| getenv "PREMIUM_FULLSIZE_GZ_MD5" ||'</span>&#125;,</div><div class="line">    email_on_failure=<span class="keyword">True</span>,</div><div class="line">    email=<span class="string">'|| getenv "AIRFLOW_EMAIL_LIST" ||'</span>,</div><div class="line">    dag=dag)</div></pre></td></tr></table></figure>
<hr>
<p><strong>日志分析</strong></p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">27</span>,<span class="number">906</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">27</span>,<span class="number">906</span>] &#123;transport<span class="variable">.py</span>:<span class="number">1819</span>&#125; INFO - Connected (version <span class="number">2</span><span class="variable">.0</span>, client Twisted)</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">28</span>,<span class="number">182</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">28</span>,<span class="number">182</span>] &#123;local_task_job<span class="variable">.py</span>:<span class="number">124</span>&#125; WARNING - Time since last heartbeat(<span class="number">0</span><span class="variable">.07</span> s) &lt; heartrate(<span class="number">5</span><span class="variable">.0</span> s), sleeping <span class="keyword">for</span> <span class="number">4</span><span class="variable">.928218</span> s</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">29</span>,<span class="number">824</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">29</span>,<span class="number">824</span>] &#123;transport<span class="variable">.py</span>:<span class="number">1819</span>&#125; INFO - Authentication (password) successful!</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">29</span>,<span class="number">996</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">29</span>,<span class="number">995</span>] &#123;sftp<span class="variable">.py</span>:<span class="number">158</span>&#125; INFO - [chan <span class="number">0</span>] Opened sftp connection (server version <span class="number">3</span>)</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">30</span>,<span class="number">839</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - ftpclient<span class="variable">.py</span> sftp_get filename_fullpath: &lt;<span class="keyword">class</span> 'str'&gt; /<span class="keyword">var</span>/data/k8s/download/<span class="number">202001</span>/daily_check<span class="variable">.csv</span><span class="variable">.gz</span></div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">33</span>,<span class="number">280</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">33</span>,<span class="number">279</span>] &#123;local_task_job<span class="variable">.py</span>:<span class="number">124</span>&#125; WARNING - Time since last heartbeat(<span class="number">0</span><span class="variable">.06</span> s) &lt; heartrate(<span class="number">5</span><span class="variable">.0</span> s), sleeping <span class="keyword">for</span> <span class="number">4</span><span class="variable">.938538</span> s</div><div class="line">......</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">38</span>,<span class="number">638</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">38</span>,<span class="number">637</span>] &#123;local_task_job<span class="variable">.py</span>:<span class="number">124</span>&#125; WARNING - Time since last heartbeat(<span class="number">0</span><span class="variable">.07</span> s) &lt; heartrate(<span class="number">5</span><span class="variable">.0</span> s), sleeping <span class="keyword">for</span> <span class="number">4</span><span class="variable">.927038</span> s</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">907</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; WARNING - <span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">906</span> - <span class="number">10</span> -    ERROR -  <span class="number">184</span> - sftp_get:sftp_get downloader<span class="variable">.csv</span><span class="variable">.gz</span> error:sftp_get filename_fullpath /<span class="keyword">var</span>/data/k8s/download/<span class="number">202001</span>/daily_check<span class="variable">.csv</span><span class="variable">.gz</span> error:&lt;<span class="keyword">class</span> 'paramiko<span class="variable">.ssh_exception</span><span class="variable">.SSHException</span>'&gt;:Server connection dropped:</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">918</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; INFO - [<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">906</span>] &#123;ftpclient<span class="variable">.py</span>:<span class="number">184</span>&#125; ERROR - sftp_get:sftp_get downloader<span class="variable">.csv</span><span class="variable">.gz</span> error:sftp_get filename_fullpath /<span class="keyword">var</span>/data/k8s/download/<span class="number">202001</span>/daily_check<span class="variable">.csv</span><span class="variable">.gz</span> error:&lt;<span class="keyword">class</span> 'paramiko<span class="variable">.ssh_exception</span><span class="variable">.SSHException</span>'&gt;:Server connection dropped:</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">921</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; WARNING - --- Logging error ---</div><div class="line">[<span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">911</span>] &#123;logging_mixin<span class="variable">.py</span>:<span class="number">112</span>&#125; WARNING - <span class="number">2020</span>-<span class="number">01</span>-<span class="number">10</span> <span class="number">03</span>:<span class="number">29</span>:<span class="number">41</span>,<span class="number">906</span> - <span class="number">10</span> -    ERROR -  <span class="number">184</span> - sftp_get:sftp_get downloader<span class="variable">.csv</span><span class="variable">.gz</span> error:sftp_get filename_fullpath /<span class="keyword">var</span>/data/k8s/download/<span class="number">202001</span>/daily_check<span class="variable">.csv</span><span class="variable">.gz</span> error:&lt;<span class="keyword">class</span> 'paramiko<span class="variable">.ssh_exception</span><span class="variable">.SSHException</span>'&gt;:Server connection dropped:</div><div class="line">Exception in thread Thread-<span class="number">3</span>:</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/threading.py"</span>, line <span class="number">926</span>, in <span class="number">_</span>bootstrap_inner</div><div class="line">    self<span class="variable">.run</span>()</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/threading.py"</span>, line <span class="number">870</span>, in run</div><div class="line">    self<span class="variable">._target</span>(*self<span class="variable">._args</span>, **self<span class="variable">._kwargs</span>)</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/site-packages/paramiko/sftp_file.py"</span>, line <span class="number">538</span>, in <span class="number">_</span>prefetch_thread</div><div class="line">    self, CMD_READ, self<span class="variable">.handle</span>, long(offset), <span class="keyword">int</span>(length)</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/site-packages/paramiko/sftp_client.py"</span>, line <span class="number">837</span>, in <span class="number">_</span>async_request</div><div class="line">    self<span class="variable">._send_packet</span>(t, msg)</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/site-packages/paramiko/sftp.py"</span>, line <span class="number">198</span>, in <span class="number">_</span>send_packet</div><div class="line">    self<span class="variable">._write_all</span>(out)</div><div class="line">  File <span class="string">"/usr/local/lib/python3.7/site-packages/paramiko/sftp.py"</span>, line <span class="number">164</span>, in <span class="number">_</span>write_all</div><div class="line">    raise EOFError()</div><div class="line">EOFError</div></pre></td></tr></table></figure>
<p>可以看到，中间有20多分钟持续输出heartbeat warning message，于是以为<code>Server connection dropped</code>报错是Airflow hearbeat warning message太多所致，其它3个paramiko download作业能够执行成功，唯有这一个因为待下载的文件size巨大（670MB），需要耗费的时间较多，Airflow打印了很多hearbeat warning message，从log日志中看到cpu time经常性地被sleep函数占用，故而无法给paramiko download作业分配执行时间。</p>
<hr>
<p><strong>原因排查</strong></p>
<p>第一时间在Stack Overflow上面发帖求助。</p>
<p>Stack Overflow求助帖：<a href="https://stackoverflow.com/questions/59676480/airflow-heartbeat-warning-log-cause-ssh-connection-dropped" target="_blank" rel="external">Airflow heartbeat warning log cause ssh connection dropped</a></p>
<p>后来翻来覆去地看Airflow <code>local_task_job.py</code>程序源码，发现不是hearbeat warning message的问题，即使把这些warning message给disable掉，我推断情况可能还是会如此（这里因为k8s中跑的Airflow image我没有权限修改，并没有尝试）。</p>
<p>后来搜索<code>paramiko EOFError</code>报错，发现很多人遇到了类似的问题，详细见别人在GitHub上发的这个求助帖。</p>
<p>GitHub求助帖：<a href="https://github.com/paramiko/paramiko/issues/926" target="_blank" rel="external">SFTP: Downloading Large Files Hangs</a></p>
<p>为什么使用paramiko下载小文件能成功，下载大文件会报错，原因目前并没有探明。</p>
<p>我的一个推测是，paramiko创建ssh连接后，使用ssh对象实例化一个sftp对象，通过这个sftp对象去完成文件下载动作，由于large size文件下载需要耗费大量时间，ssh对象在下载过程中被Python虚拟机gc机制当作垃圾给回收掉了，这样就出现了”Server connection dropped”。</p>
<hr>
<p><strong>解决方法</strong></p>
<p>最后参照GitHub上该博主的建议，使用shutil.copyfileobj替换paramiko sftp.get下载功能，测试后发现large size文件可以下载成功。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpClient</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Create sftp instance;then implemnet all sftp methods</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sftphost, sftpport, sftpusername, sftppassword)</span>:</span></div><div class="line">        self.hostname = sftphost</div><div class="line">        self.port = sftpport</div><div class="line">        self.username = sftpusername</div><div class="line">        self.password = sftppassword</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> type(self.port) <span class="keyword">is</span> str:</div><div class="line">                self.port = int(self.port)</div><div class="line"></div><div class="line">            self.client = paramiko.Transport((self.hostname, self.port))</div><div class="line">            self.client.connect(username=self.username,</div><div class="line">                                password=self.password)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            logger.error(<span class="string">'%s:%s:%s:%s'</span>,</div><div class="line">                         inspect.stack()[<span class="number">0</span>][<span class="number">3</span>],</div><div class="line">                         <span class="string">'paramiko connect error'</span>,</div><div class="line">                         type(e),</div><div class="line">                         e)</div><div class="line">            self.sftp = <span class="keyword">None</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.sftp = paramiko.SFTPClient.from_transport(self.client)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sftp_downloads</span><span class="params">(self, remote_directory, filename, filename_fullpath)</span>:</span></div><div class="line">        <span class="comment"># set server directory as pwd</span></div><div class="line">        self.sftp_chdir(remote_directory)</div><div class="line">        </div><div class="line">        <span class="comment"># 旧方法下载大文件会出现Server connection dropped</span></div><div class="line">        <span class="comment"># self.sftp.get(filename, filename_fullpath, callback=self.sftp_get_callback)</span></div><div class="line">        </div><div class="line">        <span class="comment"># 新方法下载大文件成功</span></div><div class="line">        <span class="keyword">with</span> self.sftp.open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">            shutil.copyfileobj(fp, open(filename_fullpath, <span class="string">'wb'</span>))</div></pre></td></tr></table></figure>
<p>后续有新的发现，再做更新。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://github.com/paramiko/paramiko/issues/926" target="_blank" rel="external">SFTP: Downloading Large Files Hangs</a></li>
<li><a href="https://stackoverflow.com/questions/12486623/paramiko-fails-to-download-large-files-1gb" target="_blank" rel="external">Paramiko Fails to download large files &gt;1GB</a></li>
<li><a href="https://stackoverflow.com/questions/59676480/airflow-heartbeat-warning-log-cause-ssh-connection-dropped" target="_blank" rel="external">Airflow heartbeat warning log cause ssh connection dropped</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Airflow </tag>
            
            <tag> paramiko </tag>
            
            <tag> sftp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019年雪球嘉年华]]></title>
      <url>/2019/11/30/the-7th-snowball-festival/</url>
      <content type="html"><![CDATA[<p>今天去广州参加2019年雪球嘉年华活动，收获很多，在此整理记录一下。</p>
<p>我参加这个活动的目的是去听雪球上各路大V对证券投资的分析，以及听券商分析师们对行业的研究与分析。</p>
<a id="more"></a>
<p>招商证券食品饮料行业首席分析师<strong>杨勇胜</strong>，在食品饮料领域研究了8年。今天在台上讲白酒的投资逻辑，将2001年至今白酒行业的变与不变讲述了一遍，令人耳目一新。听他讲完这份PPT，我才知道白酒有酱香、浓香、清香和其它香这样的分法。</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-wine.jpg" alt=""></p>
<p>（图1-招商证券食品饮料行业分析师杨勇胜）</p>
<p>国盛证券医药行业首席分析师<strong>张金洋</strong>，在台上讲整个医药股的投资逻辑，从宏观政策到细分领域等各个方面由点到线再到面得介绍，一听就是有高水平的人。时间仓促，我感觉他还没把整个内容讲完，就匆匆下去了，有点意犹未尽。</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-medicine.jpg" alt=""></p>
<p>（图2-国盛证券医药行业首席分析师张金洋）</p>
<p>方正证券研究所所长<strong>杨仁文</strong>讲述云游戏的未来，他有一句话让我印象深刻。”技术变革导致游戏设备的变迁，能够带来投资机会“。他从街机（我们小时候去游戏厅打的那种游戏机）到主机（Xbox和PlayStation）再到PC机（端游和页游）然后到手游，分析了每一次游戏硬件设备变革所带来的增量市场空间。接下来的一波浪潮他认为是5G+VR设备。</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-game.jpg" alt=""></p>
<p>（图3-方正证券研究所所长杨仁文）</p>
<p>方正证券科技行业首席分析师<strong>陈杭</strong>讲5G和芯片股的投资逻辑，虽然没有讲出令我印象深刻的观点，但对整个行业周期和上下游趋势的发展做了详细介绍，重点说到了国产替代这个过程，让我对这个产业周期有了一个朦胧的认识。</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-5g.jpg" alt=""></p>
<p>（图4-方正证券科技行业首席分析师陈杭）</p>
<p>雪球创始人<strong>方三文</strong>分享新能源汽车的投资理念，这几天刷新了我的认知。</p>
<blockquote>
<p>汽车产业是仅次于房地产的第二大产业，中国房地产行业每年产值10万亿，汽车行业产值3-4万亿</p>
<p>纯电动车适合用于有充电桩家庭的第二辆车</p>
<p>电动车在动力性能（<strong>百公里加速时间</strong>）上秒杀燃油车，但乘坐体验和安全性并不一定比燃油车强</p>
<p>电动车可以晚上停在家里充电，燃油车必须去加油站加油，这个方面电动车有优势</p>
</blockquote>
<p>华兴资本董事总经理<strong>刘佳宁</strong>讲述社交网络、社交媒体和媒体这3者的关系，令人醍醐灌顶，我觉得用文字写不清楚他所讲的内容，得现场听才有意思。了解了这3者之间的关系后，就可以对我们每天使用的雪球、知乎、B站、微博、微信、抖音、头条这些App多一个维度的认识。</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-social-media1.jpg" alt=""></p>
<p>（图5-华兴资本董事总经理刘佳宁）</p>
<p><img src="/2019/11/30/the-7th-snowball-festival/snowball-social-media2.jpg" alt=""></p>
<p>（图6-华兴资本董事总经理刘佳宁）</p>
<p>雪球CEO<strong>李楠</strong>说中环股份董事长称雪球上的评论是“乡间俗谈”，哈哈，莫名戳中笑点。</p>
<p>雪球人气用户<strong>林园</strong>对投资风险的认识，令人印象深刻。</p>
<p>其它介绍自己公司的宣传稿，我就不写了，一整天的活动听下来，最大的几点感受是：</p>
<ol>
<li>听这些雪球大V和分析师的演讲，可以培养大局观，对提升炒股水平一点用也没有；</li>
<li>投研能力是非常专业的一个能力，不是普通散户（比如说我）轻易能学得到的；</li>
<li>普通散户如果既缺乏投研能力，又不擅长使用数据进行基本面分析，直接与正规军在市场中贴身肉搏，很难在市场中存活。即便通过自身学习，掌握了一定的分析能力，但如果对趋势的反转、拐点的来临把握不到位，也还是很难赚钱。</li>
</ol>
<p>想到这里，我觉得对于普通散户来说，挣市场波动的钱可能比挣价值的钱或成长的钱，要容易一些。于我来说，我具备编程能力，可以借助Tushare这一类工具对市场指数、个股信息作一些数据化分析，这或许是一个可以尝试的方向。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 雪球 </tag>
            
            <tag> 乡间俗谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Amazon AWS使用方法]]></title>
      <url>/2019/10/16/aws-boto3/</url>
      <content type="html"><![CDATA[<p>Amazon AWS使用方法：</p>
<p>1.参照<a href="https://aws.amazon.com/cn/cli/" target="_blank" rel="external">官网</a>方法安装AWS-CLI</p>
<p>直接使用“pip install awscli”即可。</p>
<p>2.参照<a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html" target="_blank" rel="external">boto3 Documentation</a>安装boto3</p>
<p>直接使用“pip install boto3”安装就行。</p>
<p>3.配置文件</p>
<p>先阅读官网，了解配置文件信息，进入终端：</p>
<p>使用”open -t ~/.aws/credentials”，先设置access token.</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[default]</div><div class="line">aws_access_key_id = XXXXXXXX</div><div class="line">aws_secret_access_key = XXXXXXXX</div></pre></td></tr></table></figure>
<p>使用”open -t ~/.aws/config”，设置region</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[default]</div><div class="line">output = json</div><div class="line">region = us-east-1</div></pre></td></tr></table></figure>
<p>(注意：如果设置的region与access token属性不一致，程序执行时，会报错“<class 'botocore.exceptions.clienterror'="">:An error occurred (IllegalLocationConstraintException) when calling the PutObject operation: The ap-east-1 location constraint is incompatible for the region specific endpoint this request was sent to.”)</class></p>
<p>4.AWS CLI S3命令使用</p>
<p>我主要使用S3，常用的命令如下所示：</p>
<p>1、创建bucket</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws s3 mb s3://bucket-name</div></pre></td></tr></table></figure>
<p>2、列出所有bucket</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> ls</div></pre></td></tr></table></figure>
<p>3、列出指定bucket信息</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> ls <span class="built_in">s3</span>://<span class="keyword">bucket-name</span></div></pre></td></tr></table></figure>
<p>3.1、如果看bucket里面的对象，后面加上recursive参数</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> ls <span class="built_in">s3</span>://<span class="keyword">bucket-name </span>--recursive</div></pre></td></tr></table></figure>
<p>4、删除空白bucket</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> rb <span class="built_in">s3</span>://<span class="keyword">bucket-name</span></div></pre></td></tr></table></figure>
<p>5、删除非空bucket</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> rb <span class="built_in">s3</span>://<span class="keyword">bucket-name </span>--force</div></pre></td></tr></table></figure>
<p>上述命令查看<a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-services-s3-commands.html" target="_blank" rel="external">AWS CLI S3 command</a></p>
<p>6、删除bucket里的文件对象</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> rm <span class="built_in">s3</span>://<span class="keyword">bucket-name </span>--recursive</div></pre></td></tr></table></figure>
<p>其它命令参考<a href="https://docs.aws.amazon.com/cli/latest/reference/s3/rm.html" target="_blank" rel="external">AWS CLI S3 rm command</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AWS </tag>
            
            <tag> boto3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[直觉与Python CSV文件处理]]></title>
      <url>/2019/10/07/intuition-on-python-file-processing/</url>
      <content type="html"><![CDATA[<p><img src="/2019/10/07/intuition-on-python-file-processing/tianyi-ma-WiONHd_zYI4-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/@tma?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Tianyi Ma</a> on <a href="https://unsplash.com/s/photos/computer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>客户需要用Python解决这样一个问题，读入一个3.4G大小的CSV文件，除首行记录外，将剩余行数记录中的K列，按照业务规则进行内容替换，处理完后生成一个新的CSV文件出来。</p>
<p>沟通了一番需求后，了解到CSV文件编码格式是”ISO 8859-1”；文件记录数大概有400多万行（拿到文件后我没敢用Excel打开看，怕卡死）；首行是Header Cloumn，记录每一行数据的Layout；除首行外每一行记录都使用Tab键区分。</p>
<p>下面是我的分析思路：</p>
<p>CSV文件很大，不可能一次性读入内容，只能分块来读；首行是Header Column，读出来后需要单独标记不做处理；剩下400多万行中有一些需要替换（替换可以简单理解为将第K列的值由”Tencent”修改为”Alibaba”），具体哪些行，事先是不知道的；那最好就读一行处理一行。</p>
<a id="more"></a>
<p>最先进入脑海的是使用Pandas包来处理，但客户要求用内置的CSV模块来做。</p>
<p>如果使用文件对象的read方法，指定一个固定的BlockSize，每次读入一块固定大小的内容进行处理，这样看起来可行，但这个ChunkSize不知道该指定多少，每行记录的栏位数都相同，但具体每行记录，可能有大有小，指定ChunkSize，如果读进来的内容是10.5行或20.3行这样的大小，那非整数部分的0.5行或0.3行，会不会出现异常呢？无法评估这个风险，因此放弃了指定ChunkSize方案。</p>
<p>如果用文件对象的readline方法，读一行处理一行，这样应该可行，以前没做过类似的需求，readline方案要多长时间处理完3.4G大小的文件，这个时间预估不到。</p>
<p>最后想到使用Python生成器来做，它可以创建一个generator对象，因为generator本质是一个迭代器（实现了Next方法的可迭代对象就叫Iterator），它可以表示一个数据流序列，每次读入一行处理一行然后写入一行；非常符合需要。</p>
<p>使用一个Sample文件测试成功后，直接读入3.4G大小的CSV文件进行转换，先别看下面，你们猜一下要多长时间处理完？</p>
<p>第一次执行完，看到结果，说实话让我有点惊讶，一度有点怀疑是不是代码哪里出问题导致程序异常终止了。因为我的直觉是：处理这么大的文件，CPU至少需要计算半个小时吧。重新跑一遍后，发现还是这个时间，有点喜出望外，generator的处理效率真得非常强悍。</p>
<p>废话不多说了，大家看代码吧</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line">filename = <span class="string">'old.csv'</span></div><div class="line">filename_new = <span class="string">'new.csv'</span></div><div class="line">ENCODIND_FMT = <span class="string">'ISO-8859-1'</span></div><div class="line"></div><div class="line"><span class="comment"># Check Python verison</span></div><div class="line">PY3 = (sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Statistic execute time for each function</span></div><div class="line"><span class="string">    """</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line"></div><div class="line">        t1 = datetime.datetime.now()</div><div class="line">        res = func(*args, **kwargs)</div><div class="line">        t2 = datetime.datetime.now()</div><div class="line">        print(<span class="string">"Function %s takes %s Time"</span> % (func.__name__, (t2-t1)))</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv_reader_yield</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">if</span> PY3:</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'r'</span>, encoding=ENCODIND_FMT, newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</div><div class="line">            csv_content = csv.reader(fp, delimiter=<span class="string">'\t'</span>)</div><div class="line">            <span class="keyword">yield</span> next(csv_content)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> csv_content:</div><div class="line">                <span class="keyword">yield</span> i</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">            csv_content = csv.reader(fp, delimiter=<span class="string">'\t'</span>)</div><div class="line">            <span class="keyword">yield</span> next(csv_content)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> csv_content:</div><div class="line">                <span class="keyword">yield</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_colx_2_coly</span><span class="params">(content_one)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Do nothing</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> content_one</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_csv_yield</span><span class="params">(header_column, csv_generator, filename_new)</span>:</span></div><div class="line">    <span class="keyword">if</span> PY3:</div><div class="line">        <span class="keyword">with</span> open(filename_new, <span class="string">'w'</span>, encoding=ENCODIND_FMT, newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</div><div class="line">            csv_content = csv.writer(fp, delimiter=<span class="string">'\t'</span>)</div><div class="line">            csv_content.writerow(header_column)</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> csv_generator:</div><div class="line">                csv_content.writerow(change_colx_2_coly(x))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">with</span> open(filename_new, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</div><div class="line">            csv_content = csv.writer(fp, delimiter=<span class="string">'\t'</span>)</div><div class="line">            csv_content.writerow(header_column)</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> csv_generator:</div><div class="line">                csv_content.writerow(change_colx_2_coly(x))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_new_csv_file</span><span class="params">(filename, filename_new)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        csv_generator = read_csv_reader_yield(filename)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"csvfile generator error"</span>, type(e), e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        header_column = next(csv_generator)</div><div class="line">        print(<span class="string">"csvfile generator get header success"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        write_to_csv_yield(header_column, csv_generator, filename_new)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"write new csv file error"</span>, type(e), e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"write new csv file success"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  </div><div class="line">    generate_new_csv_file(filename, filename_new)</div></pre></td></tr></table></figure>
<p>上面程序中change_colx_2_coly函数负责将K列中记录进行替换，这里为了简便，我将其具体功能替去掉了，不对文件记录做任何处理，只是简单地对读入记录做一个Return，我们的目的是测试generator处理文件的执行效率。</p>
<p>Python2执行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">csvfile generator get header success</div><div class="line">write new csv file success</div><div class="line">Function generate_new_csv_file takes <span class="number">0</span>:<span class="number">02</span>:<span class="number">56.134797</span> Time</div><div class="line">[Finished <span class="keyword">in</span> <span class="number">176.2</span>s]</div></pre></td></tr></table></figure>
<p>Python3执行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">csvfile generator get header success</div><div class="line">write new csv file success</div><div class="line">Function generate_new_csv_file takes <span class="number">0</span>:<span class="number">03</span>:<span class="number">04.136872</span> Time</div><div class="line">[Finished <span class="keyword">in</span> <span class="number">184.6</span>s]</div></pre></td></tr></table></figure>
<p>看到了吧，3分钟多一点就处理完了；加上change_colx_2_coly函数功能的代码，处理完这个3.4G大小的文件，也是3分钟多一点，几乎和这个没差别。</p>
<p>我惊喜地跟同事们宣布这个结果时，他们都表示不可思议。</p>
<p>凭直觉，我以为至少要30分钟；万万没想到，不到3分钟左右就把3.4G大小的文本文件处理完了。</p>
<p>这说明一个事情，直觉是一个多么不靠谱的事情。</p>
<p>如果以后有人问我类似问题，我会根据文件大小跟他预估时间，当他按照我说的方法做完之后，发现我预估的时间”很准”，会跟身边其他人说”他的直觉真准”。</p>
<p>呵呵，其实哪里是直觉，只不过是经验换来的罢了。</p>
<p>附：</p>
<blockquote>
<p>generator本质是一个迭代器（Python中实现了Next方法的可迭代对象（Iterable）就叫Iterator），Iterator对象表示的是一个数据流，可以理解为它就是一个有序序列，通常你无法提前预知这个有序序列的长度，但可以通过next()函数源源不断地计算序列中每一条数据直到没有数据时返回StopIteration报错。相比于List、Dict、Set、Tuple、Str这些没有实现next()方法的可迭代对象（Iterable）来说，Iterator这种计算形式又被称为惰性计算，因为它不需要将要计算的内容全部读入内存，一次性拿到所有数据后再做计算。</p>
</blockquote>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/5552555/unicodedecodeerror-invalid-continuation-byte" target="_blank" rel="external">UnicodeDecodeError, invalid continuation byte</a></li>
<li><a href="https://stackoverflow.com/questions/21504319/python-3-csv-file-giving-unicodedecodeerror-utf-8-codec-cant-decode-byte-err" target="_blank" rel="external">Python 3 CSV file giving UnicodeDecodeError: ‘utf-8’ codec can’t decode byte error when I print</a></li>
<li><a href="https://stackoverflow.com/questions/6539881/python-converting-from-iso-8859-1-latin1-to-utf-8" target="_blank" rel="external">Python: Converting from ISO-8859-1/latin1 to UTF-8</a></li>
<li><a href="https://stackoverflow.com/questions/32123872/encoding-characters-with-iso-8859-1-in-python" target="_blank" rel="external">Encoding characters with ISO 8859-1 in Python</a></li>
<li><a href="https://www.cnblogs.com/liujinhong/p/5937527.html" target="_blank" rel="external">python读取CSV文件</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> CSV </tag>
            
            <tag> 生成器 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019年国庆节]]></title>
      <url>/2019/10/06/2019-national-day/</url>
      <content type="html"><![CDATA[<p><img src="/2019/10/06/2019-national-day/kyle-hinkson-xyXcGADvAwE-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@kajhinkson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Kyle Hinkson</a> on <a href="https://unsplash.com/s/photos/festival?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>国庆这几天没有出门，基本上都待在家里写代码和调程序了。答应了客户节后交货，花了好几天时间，反复在Docker里面做Airflow的测试，这两项以前都没有玩过，学习它的用法和测试，花了很多时间。</p>
<p>家人们经常不理解，为什么每天要花这么多时间在电脑面前？是不是效率太低了？</p>
<p>还真不是效率低，主要原因是软件开发这个职业，细节内容太多，一不小心很容易出错，碰到棘手的Bug，可能卡你半天，查原因和解决问题都非常耗费时间。</p>
<p>这几天调试下来，Docker的用法基本搞熟了，非常有收获。相比虚拟机，Docker确实太轻便了，拉取镜像制作容器，几分钟内就组装出来一个开发环境，简直发现了一片新大陆。</p>
<p>Airflow的DAG在Python3环境也跑通了，顺利迁移到了Python3环境。Python3读取CSV文件和Python2有很大差别，在CSV文件处理上也踩了好几个坑，收获了宝贵的经验，以后遇到这些都是小Case了。</p>
<p>今年一直专注在Python语言上做”单点突破”，虽然还没有达成我的目标，不过收获甚多，以前很多解决不了的问题现在都能解决了，自信心就这样一点点地建立起来；但确实还存在很多欠缺，比如说，我从来没有完整地做过一个Web开发项目，对于WSGI和Nginx的理解，看了很多例子，敲了很多程序，就是无法理解透彻，这些理解不透彻的地方，就是接下来需要努力的方向和目标吧。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扯淡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Airflow中PythonOperator参数传递方法]]></title>
      <url>/2019/09/20/airflow-python-operator-variable/</url>
      <content type="html"><![CDATA[<p><img src="/2019/09/20/airflow-python-operator-variable/iker-urteaga-5ifFHbV-elk-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@iurte?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Iker Urteaga</a> on <a href="https://unsplash.com/s/photos/air-flow?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>工作项目需要，最近在研究Airflow，Apache基金会下的一款任务流管理工具，基于Python而生，官网链接<a href="https://airflow.apache.org" target="_blank" rel="external">在此</a>。这几天弄清楚了PythonOperator中不同Task之间如何传递参数，目前主要找到了两种方法。</p>
<p>第一种方法是使用Variable.set和Variable.get方法；第二种方法使用Xcoms。</p>
<a id="more"></a>
<p><strong>方法1:</strong></p>
<p>在Airflow自带的example_python_operator这个DAG里面，从airflow.models导入Variable模块，使用Variable.set先设置变量；然后在另外一个Task里面使用Variable.get获取参数。设置变量时可以使用deserialize_json参数，deserialize_json=True时，表示被设置的变量为序列化对象；后面使用Variable.get获取该变量的地方，也需要对应加上deserialize_json参数。</p>
<p>Variable.set和Variable.get方法直接查看<a href="https://airflow.apache.org/_modules/airflow/models/variable.html#Variable.set" target="_blank" rel="external">Source code for airflow.models.variable</a>这份文档。</p>
<p>在example_python_operator这个DAG里面，如下方式即可实现不同Task之间传递参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># [START howto_operator_python]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_context</span><span class="params">(ds, **kwargs)</span>:</span></div><div class="line">    <span class="comment"># Set variable without serialization parameter</span></div><div class="line">    Variable.set(<span class="string">'flag1'</span>, <span class="string">'print_context flag1'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Set variable with serialization parameter</span></div><div class="line">    <span class="comment"># Variable.set('flag1', 'print_context flag1', deserialize_json=True)</span></div><div class="line">    pprint(kwargs)</div><div class="line">    print(<span class="string">"print_context ds:"</span>, ds, len(ds))</div><div class="line">    print(<span class="string">"print_context kwargs:"</span>, kwargs, len(kwargs))</div><div class="line">    <span class="keyword">return</span> <span class="string">'Whatever you return gets printed in the logs'</span></div><div class="line"></div><div class="line"></div><div class="line">run_this = PythonOperator(</div><div class="line">    task_id=<span class="string">'print_the_context'</span>,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=print_context,</div><div class="line">    dag=dag,</div><div class="line">)</div><div class="line"><span class="comment"># [END howto_operator_python]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [START howto_operator_python_kwargs]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sleeping_function</span><span class="params">(random_base)</span>:</span></div><div class="line">    <span class="string">"""This is a function that will run within the DAG execution"""</span></div><div class="line">    flag1 = Variable.get(<span class="string">'flag1'</span>)</div><div class="line">    <span class="comment"># Get variable by serialization method</span></div><div class="line">    <span class="comment"># flag1 = Variable.get('flag1', deserialize_json=True)</span></div><div class="line">    print(<span class="string">"my_sleeping_function flag1:"</span>, flag1)</div><div class="line">    time.sleep(random_base)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Generate 5 sleeping tasks, sleeping from 0.0 to 0.4 seconds respectively</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    task = PythonOperator(</div><div class="line">        task_id=<span class="string">'sleep_for_'</span> + str(i),</div><div class="line">        python_callable=my_sleeping_function,</div><div class="line">        op_kwargs=&#123;<span class="string">'random_base'</span>: float(i) / <span class="number">10</span>&#125;,</div><div class="line">        dag=dag,</div><div class="line">    )</div><div class="line"></div><div class="line">    run_this &gt;&gt; task</div><div class="line"><span class="comment"># [END howto_operator_python_kwargs]</span></div></pre></td></tr></table></figure>
<p>执行结果请看下面红色方框处：</p>
<p><img src="/2019/09/20/airflow-python-operator-variable/output1.jpg" style="zoom:50%;"></p>
<p><strong>方法2:</strong></p>
<p>在Task A中使用return返回要被Task B引用的变量；在Task B中直接使用xcom_pull即可引用该变量。参考代码如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"></div><div class="line">DAG = DAG(</div><div class="line">  dag_id=<span class="string">'test_python_operator_variable'</span>,</div><div class="line">  start_date=datetime.now(),</div><div class="line">  schedule_interval=<span class="string">'@once'</span></div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">push_function</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    ls = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">    <span class="keyword">return</span> ls</div><div class="line"></div><div class="line">push_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'push_task'</span>,</div><div class="line">    python_callable=push_function,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=DAG)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pull_function</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    print(<span class="string">"pull_function kwargs:"</span>, kwargs, len(kwargs))</div><div class="line">    ti = kwargs[<span class="string">'ti'</span>]</div><div class="line">    ls = ti.xcom_pull(task_ids=<span class="string">'push_task'</span>)</div><div class="line">    print(ls)</div><div class="line"></div><div class="line">pull_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'pull_task'</span>,</div><div class="line">    python_callable=pull_function,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=DAG)</div><div class="line"></div><div class="line">push_task &gt;&gt; pull_task</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<p>push_task这个Task执行完后Return的值如下所示。</p>
<p><img src="/2019/09/20/airflow-python-operator-variable/push_task.jpg" alt=""></p>
<p>push_task这个Task执行完后Xcom的内容如下所示。</p>
<p><img src="/2019/09/20/airflow-python-operator-variable/push_task_xcom.jpg" alt=""></p>
<p>pull_task执行过程中打印出了变量ls的值，说明参数传递成功。</p>
<p><img src="/2019/09/20/airflow-python-operator-variable/pull_task.jpg" alt=""></p>
<p>方法2是从StackOverflow翻出来的，参考链接见<a href="https://stackoverflow.com/questions/46059161/airflow-how-to-pass-xcom-variable-into-python-function" target="_blank" rel="external">这里</a>。</p>
<p>ti是kwargs字典里面内置的变量，表示的是当前这个Task Instance。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Airflow </tag>
            
            <tag> PythonOperator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Tushare new_stocks接口报错]]></title>
      <url>/2019/09/09/python3-tushare-newstocks/</url>
      <content type="html"><![CDATA[<p><img src="/2019/09/09/python3-tushare-newstocks/eduardo-flores-x84rVUB3TVk-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@eduardoflorespe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Eduardo Flores</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>前几天在Python3里面调用Tushare的new_stocks接口，一直遇到这个报错”Length mismatch: Expected axis has 13 elements, new values have 12 elements”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</div><div class="line"></div><div class="line">df = ts.new_stocks()</div><div class="line">print(<span class="string">"df:\n"</span>,df.head(<span class="number">3</span>))</div></pre></td></tr></table></figure>
<p>奇怪的是，这段代码在Python2里能够正常运行，不报错。</p>
<p>开始了定位Bug的奇妙之旅，首先发现错误是从Tushare包reference.py模块里_newstocks函数报出来的；根据报错信息关键字axis，推测出错行数应该在447-452之间。</p>
<p>最开始怀疑是两个版本获取的数据源有差异，将加上了<table>标签的<strong><em>sarr</em></strong>变量值分别在Python2和PYthon3环境下打印出来，使用Beyond Compare对比，结果发现没有任何差别。</table></p>
<a id="more"></a>
<p><img src="/2019/09/09/python3-tushare-newstocks/beyond_compare1.jpg" alt=""></p>
<p>（图1-Beyond Compare对比结果）</p>
<p><img src="/2019/09/09/python3-tushare-newstocks/beyond_compare2.jpg" alt=""></p>
<p>（图2-Beyond Compare对比结果）</p>
<p>数据源既然一致，那问题可能出在解析HTML生成dataframe的这几行代码上，首先分析这一行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = pd.read_html(StringIO(sarr), skiprows=[<span class="number">0</span>, <span class="number">1</span>])[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>对比Python2和Python3下的执行结果，果然发现了问题，Python3返回结果有16列，多出来一列’NaN’。</p>
<p><img src="/2019/09/09/python3-tushare-newstocks/python2_pandas_compat.jpg" style="zoom:50%;"></p>
<p>（图3-Python2执行结果）</p>
<p><img src="/2019/09/09/python3-tushare-newstocks/python3_pandas_compat.jpg" style="zoom:50%;"></p>
<p>（图4-Python3执行结果）</p>
<p>同样一段HTML文本，在Python3环境下执行，会额外返回一列’NaN’，这是pandas.compat模块的StringIO函数的问题，已经明显超出了我的能力范围，各种Pandas的Issue看了一圈后，毫不犹豫地提了一个Issue给他们开发人员。</p>
<p>分析出原因后，这个问题就好解决了，将下面这行代码修改成这样，Python3下执行new_stocks函数就不报错了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ct.PY3:</div><div class="line">    <span class="comment"># 如果是Python3，将第15列也drop掉  </span></div><div class="line">    df = df.drop([df.columns[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]], axis=<span class="number">1</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    df = df.drop([df.columns[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://github.com/pandas-dev/pandas/issues/28355" target="_blank" rel="external">GitHub Pandas Issue</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Tushare </tag>
            
            <tag> Python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个Python递归问题]]></title>
      <url>/2019/08/11/python-recursion-problem/</url>
      <content type="html"><![CDATA[<p><img src="/2019/08/11/python-recursion-problem/karine-zenda-5ToSuqmQXYo-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/@karinezenda?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Karine Zenda</a> on <a href="https://unsplash.com/search/photos/program?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>上篇<a href="/2019/08/10/stock-blacklist">Python实现股票黑名单</a>使用双层循环将巨潮网里司法冻结的股票记录爬取下来之后，想着使用递归来实现这个处理，结果发现踩到一个大坑，递归函数处理完列表后，返回结果一直是None，这一篇记录一下具体的解决办法。</p>
<p>原问题经过简化后，其实就是这样一个函数，前面N次执行给列表赋值，最后一次将列表返回，返回之前打印列表，显示其内容有值，返回后结果却一直为None。</p>
<p>将问题简化后的F1函数如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F1</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</div><div class="line">        print(<span class="string">"L1:"</span>, L1)</div><div class="line">        <span class="keyword">return</span> L1</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L1.append(i)</div><div class="line">        i = i + <span class="number">1</span></div><div class="line">        F1(i)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    L1 = []</div><div class="line">    L1 = F1(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Main L1:"</span>, L1)</div></pre></td></tr></table></figure>
<p>函数F1执行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'L1:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">(<span class="string">'Main L1:'</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>print语句显示列表L1有值，return之后的结果为什么一直None呢？最开始以为是没有给列表L1添加global关键字的原因。</p>
<a id="more"></a>
<p>使用了global关键字的F2函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F2</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">global</span> L2</div><div class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</div><div class="line">        print(<span class="string">"L2:"</span>, L2)</div><div class="line">        <span class="keyword">return</span> L2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L2.append(i)</div><div class="line">        i = i + <span class="number">1</span></div><div class="line">        F2(i)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    L2 = []</div><div class="line">    L2 = F2(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Main L2:"</span>, L2)</div></pre></td></tr></table></figure>
<p>使用了global关键字之后，函数F2执行结果如下所示，可见并不是没有设置global关键字的缘故。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'L2:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">(<span class="string">'Main L2:'</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>在排查过程中，我想起来使用双层循环时，返回列表并没有问题，问题应该是出在递归的处理机制上，在微信群和学Python的朋友讨论了一番之后，有一个朋友点明了问题原因：return语句返回的列表对象是函数第一次执行的结果，并不是最后一次执行的结果。</p>
<p>恰好这时，在CSDN上看到了<a href="https://blog.csdn.net/Ha_hha/article/details/79393041" target="_blank" rel="external">Python 递归函数返回值为None的解决办法</a>这篇文章，和我遇到的情形几乎一模一样，里面有张图非常形象地展示了递归调用return语句的处理过程，看完后瞬间秒懂。</p>
<p><img src="/2019/08/11/python-recursion-problem/recursion_sequence.png" alt=""></p>
<p>函数F1前几次递归调用并没有返回值，最后一次返回时，F1(5)将F1(5)执行结果返回给F1(4)，然后F1(4)将F1(4)执行结果返回给F1(3)，F1(3)将F1(3)执行结果返回给F1(2)，F1(2)将F1(2)执行结果返回给F1(1)，F1(1)将F1(1)执行结果返回给main函数中的L1；由于没有返回值，Python语言默认会返回None，因此列表L1的结果就是None。</p>
<p>搞清楚了原因所在，那如何将函数的最后一次执行结果返回回来呢？</p>
<hr>
<p>我没有朝这个方向去想，我是反过来想，如果不返回列表，在if分支里返回None退出递归处理，这样得到的结果会如何呢？测试了一下发现结果符合预期，如下函数F3所示。歪打正着得刚好满足了”递归三要素”，这个后面会说。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F3</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</div><div class="line">        print(<span class="string">"L3:"</span>, L3)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L3.append(i)</div><div class="line">        i = i + <span class="number">1</span></div><div class="line">        F3(i)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    L3 = []</div><div class="line">    F3(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Main L3:"</span>, L3)</div></pre></td></tr></table></figure>
<p>函数F3执行结果如下，符合预期：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'L3:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">(<span class="string">'Main L3:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure>
<p>列表L3对F3函数来说本身就是全局变量，F3函数执行完之后，L3就是最后一次执行结果。</p>
<hr>
<p>微信群里一位朋友提供了他的解决办法，如下函数F4所示，前面4次执行过程中，返回函数F4自身的执行结果，当递归终止条件达到后，再返回列表L4，这时就将函数F4最后一次执行结果返回了回来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F4</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</div><div class="line">        print(<span class="string">"L4:"</span>, L4)</div><div class="line">        <span class="keyword">return</span> L4</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L4.append(i)</div><div class="line">        i = i + <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> F4(i)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    L4 = []</div><div class="line">    L4 = F4(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Main L4:"</span>, L4)</div></pre></td></tr></table></figure>
<p>函数F4执行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'L4:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">(<span class="string">'Main L4:'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure>
<p>必须承认函数F4这种写法更加清晰地展现了递归的处理机制，每一次返回函数F4自身的执行结果，就是无限趋近于终止条件”return L4”。</p>
<p>F3函数和F4函数这两种写法都得到了想要的结果，现在重点来了：F3和F4有什么区别呢？</p>
<p>在给出结论之前，先说一下”递归三要素”：</p>
<blockquote>
<p>#The Three Laws of Recursion</p>
<p>Like the robots of Asimov, all recursive algorithms must obey three important laws:</p>
<ol>
<li>A recursive algorithm must have a <strong>base case</strong>.</li>
<li>A recursive algorithm must change its state and move toward the base case.</li>
<li>A recursive algorithm must call itself, recursively.</li>
</ol>
</blockquote>
<p>我的理解是：</p>
<p>1、递归函数必须要有一个终止条件。上面F1,F2,F4函数中”return 列表”就是终止条件；F3函数的”return None”是终止条件。</p>
<p>2、递归函数执行状态，每一次调用都需要趋近它的终止条件，否则就不是递归。</p>
<p>3、递归函数需要调用函数本身。这一点最好理解。</p>
<p>仔细思考第2点，函数F1和F2每次执行并没有趋近于递归的终止条件，所以我认为形势上看起来像递归，但并不是真正的递归。</p>
<p>Python函数调用处理的一个默认机制是，如果没有返回值默认视为返回None。F3函数的else分支里虽然没有return语句，但其实它隐性地返回了None，无限趋近于终止条件”return None”，恰好符合”递归三要素”的第2点。它的处理逻辑是通畅的，虽然没有F4好理解，但看起来更加简洁。</p>
<p>至于递归实现和双层循环实现，哪个处理速度更快，测试下来后其实差不多，双层循环有时候还更快一些，这个就不去详细比较了，性能瓶颈在网页IO请求环节。</p>
<p>想起前辈先贤们总结的一点经验：递归是很好的解决方案，但有时候并不是最佳的解决方案。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://blog.csdn.net/Ha_hha/article/details/79393041" target="_blank" rel="external">Python 递归函数返回值为None的解决办法</a></li>
<li><a href="https://runestone.academy/runestone/books/published/pythonds/Recursion/TheThreeLawsofRecursion.html" target="_blank" rel="external">The Three Laws of Recursion</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 递归三要素 </tag>
            
            <tag> 巨潮网 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python实现股票黑名单]]></title>
      <url>/2019/08/10/stock-blacklist/</url>
      <content type="html"><![CDATA[<p><img src="/2019/08/10/stock-blacklist/rawpixel-com-252130.jpg" alt=""></p>
<p>（Photo by rawpixel.com on Unsplash）</p>
<p>7月25日晚上看招财大牛猫的财经夜报，他提到过说“上市公司大股东，凡是股份有被司法冻结过，表明财务状况非常糟糕，建议投资者不要去碰”。</p>
<p><img src="/2019/08/10/stock-blacklist/cninfo_page.jpg" alt=""></p>
<p>里面还特意提到可以去<a href="http://www.cninfo.com.cn/new/index" target="_blank" rel="external">巨潮网</a>查询“股份被司法冻结”的信息，当时看完就在想，这不就是我们Pythoner擅长干的事情吗。</p>
<a id="more"></a>
<p>进到巨潮网搜了一下，司法冻结相关的记录有3800多条；一开始担心HTML页面元素复杂，要翻380页，数据量有点大，用requests库实现的爬虫可能吃不消，在考虑是不是要用Scrapy框架。犹豫之中，用Chrome的开发者模式突然间发现巨潮网提供了非常友好的API接口，试着写了一个requests爬虫，一顿猛如虎的操作之后，所有目标数据就都搞到手了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">pgm:python_learning_cninfo2.py</span></div><div class="line"><span class="string">ref:获取巨潮网司法冻结的股票名单</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @wraps(f)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        t1 = time.time()</div><div class="line">        res = f(*args, **kwargs)</div><div class="line">        t2 = time.time()</div><div class="line">        print(<span class="string">"Function %s takes %s time"</span> % (f.__name__, (t2-t1)))</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> func</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_timestamp</span><span class="params">(timestamp)</span>:</span></div><div class="line">    <span class="comment"># 将日期格式化处理</span></div><div class="line">    temp = int(str(timestamp)[:<span class="number">10</span>])</div><div class="line">    datearray = datetime.utcfromtimestamp(temp)</div><div class="line">    <span class="keyword">return</span> datearray.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_char</span><span class="params">(chardata)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> chardata.replace(<span class="string">'&lt;em&gt;'</span>, <span class="string">''</span>).replace(<span class="string">'&lt;/em&gt;'</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_nums</span><span class="params">(first_page_url)</span>:</span></div><div class="line"></div><div class="line">    resp = requests.get(first_page_url)</div><div class="line">    resp_dict = json.loads(resp.text)</div><div class="line">    stock_totalAnnouncement = resp_dict[<span class="string">'totalAnnouncement'</span>]</div><div class="line">    stock_totalRecordNum = resp_dict[<span class="string">'totalRecordNum'</span>]</div><div class="line">    <span class="keyword">return</span> max(stock_totalAnnouncement, stock_totalRecordNum)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_dataframe</span><span class="params">(data)</span>:</span></div><div class="line"></div><div class="line">    df_columns = [</div><div class="line">                <span class="string">'id'</span>,</div><div class="line">                <span class="string">'secCode'</span>,</div><div class="line">                <span class="string">'secName'</span>,</div><div class="line">                <span class="string">'orgId'</span>,</div><div class="line">                <span class="string">'announcementId'</span>,</div><div class="line">                <span class="string">'announcementTitle'</span>,</div><div class="line">                <span class="string">'announcementTime'</span>,</div><div class="line">                <span class="string">'adjunctUrl'</span>,</div><div class="line">                <span class="string">'adjunctSize'</span>,</div><div class="line">                <span class="string">'adjunctType'</span>,</div><div class="line">                <span class="string">'storageTime'</span>,</div><div class="line">                <span class="string">'columnId'</span>,</div><div class="line">                <span class="string">'pageColumn'</span>,</div><div class="line">                <span class="string">'announcementType'</span>,</div><div class="line">                <span class="string">'associateAnnouncement'</span>,</div><div class="line">                <span class="string">'important'</span>,</div><div class="line">                <span class="string">'batchNum'</span>,</div><div class="line">                <span class="string">'announcementContent'</span>,</div><div class="line">                <span class="string">'orgName'</span>,</div><div class="line">                <span class="string">'announcementTypeName'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        df = pd.DataFrame(data=data, columns=df_columns)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"gen_dataframe error:"</span>, type(e), e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        df.to_excel(<span class="string">'stock_blacklist_all.xlsx'</span>)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"generate excel error:"</span>, type(e), e)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(index_url, page_cnt)</span>:</span></div><div class="line"></div><div class="line">    pdf_url_prefix = <span class="string">'http://static.cninfo.com.cn/'</span></div><div class="line">    stock_list_all = []</div><div class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">1</span>, page_cnt/<span class="number">10</span>+<span class="number">1</span>):</div><div class="line">        page_url = index_url + str(pos)</div><div class="line">        resp = requests.get(page_url)</div><div class="line">        resp_dict = json.loads(resp.text)</div><div class="line">        stock_list = resp_dict[<span class="string">'announcements'</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(stock_list)):</div><div class="line">            stock_id = stock_list[i][<span class="string">'id'</span>]</div><div class="line">            stock_secCode = stock_list[i][<span class="string">'secCode'</span>]</div><div class="line">            stock_secName = stock_list[i][<span class="string">'secName'</span>]</div><div class="line">            stock_orgId = stock_list[i][<span class="string">'orgId'</span>]</div><div class="line">            stock_announcementId = stock_list[i][<span class="string">'announcementId'</span>]</div><div class="line">            stock_announcementTitle = replace_char(stock_list[i][<span class="string">'announcementTitle'</span>])</div><div class="line">            stock_announcementTime = format_timestamp(stock_list[i][<span class="string">'announcementTime'</span>])</div><div class="line">            stock_adjunctUrl = pdf_url_prefix + stock_list[i][<span class="string">'adjunctUrl'</span>]</div><div class="line">            stock_adjunctSize = stock_list[i][<span class="string">'adjunctSize'</span>]</div><div class="line">            stock_adjunctType = stock_list[i][<span class="string">'adjunctType'</span>]</div><div class="line">            stock_storageTime = stock_list[i][<span class="string">'storageTime'</span>]</div><div class="line">            stock_columnId = stock_list[i][<span class="string">'columnId'</span>]</div><div class="line">            stock_pageColumn = stock_list[i][<span class="string">'pageColumn'</span>]</div><div class="line">            stock_announcementType = stock_list[i][<span class="string">'announcementType'</span>]</div><div class="line">            stock_associateAnnouncement = stock_list[i][<span class="string">'associateAnnouncement'</span>]</div><div class="line">            stock_important = stock_list[i][<span class="string">'important'</span>]</div><div class="line">            stock_batchNum = stock_list[i][<span class="string">'batchNum'</span>]</div><div class="line">            stock_announcementContent = stock_list[i][<span class="string">'announcementContent'</span>]</div><div class="line">            stock_orgName = stock_list[i][<span class="string">'orgName'</span>]</div><div class="line">            stock_announcementTypeName = stock_list[i][<span class="string">'announcementTypeName'</span>]</div><div class="line">            stock_list_one = [</div><div class="line">                            stock_id,</div><div class="line">                            stock_secCode,</div><div class="line">                            stock_secName,</div><div class="line">                            stock_orgId,</div><div class="line">                            stock_announcementId,</div><div class="line">                            stock_announcementTitle,</div><div class="line">                            stock_announcementTime,</div><div class="line">                            stock_adjunctUrl,</div><div class="line">                            stock_adjunctSize,</div><div class="line">                            stock_adjunctType,</div><div class="line">                            stock_storageTime,</div><div class="line">                            stock_columnId,</div><div class="line">                            stock_pageColumn,</div><div class="line">                            stock_announcementType,</div><div class="line">                            stock_associateAnnouncement,</div><div class="line">                            stock_important,</div><div class="line">                            stock_batchNum,</div><div class="line">                            stock_announcementContent,</div><div class="line">                            stock_orgName,</div><div class="line">                            stock_announcementTypeName]</div><div class="line">            stock_list_all.append(stock_list_one)</div><div class="line">    <span class="keyword">return</span> stock_list_all</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    index_url = <span class="string">'http://www.cninfo.com.cn/new/fulltextSearch/full?searchkey= \</span></div><div class="line"><span class="string">    %E5%8F%B8%E6%B3%95%E5%86%BB%E7%BB%93&amp;sdate=&amp;edate=&amp;isfulltext=false&amp;sortName=nothing&amp;sortType=desc&amp;pageNum='</span></div><div class="line">    first_page_url = index_url + str(<span class="number">0</span>)</div><div class="line">    page_cnt = get_page_nums(first_page_url)</div><div class="line">    stock_list_all = main(index_url, page_cnt)</div><div class="line">    gen_dataframe(stock_list_all)</div></pre></td></tr></table></figure>
<p>主程序是main函数，一个双层循环，将每个页面的数据提取后，添加到列表stock_list_all中，然后使用Pandas将其转换为一个DataFrame对象，最后将DataFrame导出到Excel表格。</p>
<p>Excel内容结果如下：</p>
<p><img src="/2019/08/10/stock-blacklist/stock_blacklist_snap.jpg" alt=""></p>
<p>将股票代码、公司名称、被冻结时间、证监会公告PDF文档链接等信息都提取了出来。需要表格原件的请登录<a href="https://pan.baidu.com/s/1CLTtN7sXZySn4V45fU4jkQ" target="_blank" rel="external">百度网盘</a>下载，提取密码<strong>tf04</strong>。</p>
<p>使用双层循环实现之后，突发奇想如果用递归处理会怎么样呢，速度是不是会更快一些呢？递归处理过程中遇到一个大坑，详细见下一篇文章<a href="/2019/08/11/python_recursion_problem">一个Python递归问题</a>。</p>
<p>最终问题解决了，递归实现的源代码放在<a href="https://github.com/benbendemo/learning-python" target="_blank" rel="external">GitHub</a>上，有兴趣的朋友自己去看吧。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 巨潮网 </tag>
            
            <tag> 股票黑名单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Selenium模拟登录并自动上传图片]]></title>
      <url>/2019/07/14/python-selenium/</url>
      <content type="html"><![CDATA[<p><img src="/2019/07/14/python-selenium/bram-naus-n8Qb1ZAkK88-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/@bramnaus?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Bram Naus</a> on <a href="https://unsplash.com/search/photos/computer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>因项目工作的需要，使用Selenium写了一个模拟登录程序，实现登录后自动提交测试数据，将测试同事的双手解放了出来。</p>
<p>因为上传图片需要与操作系统交互，MacOS上没有找到这个交互动作的解决方案，目前只在Windows实现了自动提交发布数据的功能，下面是对这个程序的简单介绍。</p>
<p>首先要搞定登录，登录页面长这样。</p>
<p><img src="/2019/07/14/python-selenium/cp_login_page.jpg" alt=""></p>
<p>（图1-登录页面）</p>
<p>在模拟登录过程中遇到好几个问题，Base64转码换行符问题更是耽搁了将近一周时间，下面一一进行说明。</p>
<a id="more"></a>
<blockquote>
<p>1、窗口句柄的处理</p>
<p>左下角这个”在线咨询”控件，WebDriver打开页面时会弹出一个对话框。对话框我就不去截图了，很多网站都会有。这个对话框在登录页面的上一层，它占据了WebDriver当前窗口控件的句柄，要先把它干掉，否则拿不到登录页面上的HTML元素。</p>
<p>2、验证码”VKI4”图片验证码的获取</p>
<p>写到这里我突然意识到，我在程序里做了无用功，写了多余的程序（反证了写技术博客的好处😄）。程序代码中，我的处理是：先将这个Base64编码的验证码字符串解码为图片二进制流，然后生成图片，再编码为Base64调用百度的文字识别OCR接口，去提取文本。看见没有，绕了一大圈，直接获取元素的Base64编码调百度的OCR接口即可。</p>
<p>我之前的处理遇到一个问题，Base64编码的字符串解码后，由于对换行符没有处理，导致刚开始生成的图片，打开时总是报错”Image Broken”。耽搁的一周时间里，我采取的Plan B是用元素坐标先定位验证码位置，将整个页面全屏截图，然后从大图中扣小图这种方式。Plan B是可行的，但觉得很麻烦，后来问题解决后将这个方法放弃了。</p>
<p>3、生成验证码图片</p>
<p>将Base64编码字符串解码为二进制流之后，最开始生成图片是保存到本地硬盘，调百度OCR时再读进内存。后来觉得这样一出一进，多了两次IO操作，改为使用StringIO模块（Python3里面是BytesIO模块），将二进制流直接写入内存，不进行IO处理，我没有比较过执行时间，理论上这样处理会快很多。</p>
<p>4、文字识别</p>
<p>刚开始使用Tesseract OCR进行文字识别，考虑到它的可移植性比较差，准确性没有商业产品高，后面就放弃了。</p>
</blockquote>
<p>模拟登录成功后，接下来要考虑页面逻辑控制。哪些元素先出来，哪些元素在哪些页面才出来。这些熟练掌握Selenium的WebDriverWait和Expected Condition方法后即刻轻松解决。</p>
<p>“我要发布”页面上这些测试数据，简单的Faker包都可以搞定，复杂一点的比如身份证和统一社会信用代码，最后一位涉及到有效性校验，于是专门写了一个CPData类，感兴趣的朋友可以拿去参考。</p>
<p><img src="/2019/07/14/python-selenium/cp_publish_page.jpg" alt=""></p>
<p>（图2-测试数据发布页面）</p>
<p>在上图这个页面，图片上传稍微特殊一些，它不是简单的Input标签，不能够直接使用WebDriver的sendKeys方法。</p>
<p>先要点击图片，触发操作系统打开图片上传窗口。需要使用AutoIt辅助完成图片上传，于是参照网上教程分别生成了一个32位和64位的exe程序，由于AutoIt只在Windows平台才有，这个程序只能在Windows环境下运行。</p>
<p>第一次使用Selenium写模拟程序，过程是艰辛的，结果是美好的。这个程序在Python2.7和Python3.5环境下分别测试过，都能执行，以后再也不用自己手工输入一大堆测试数据了。</p>
<p>使用<a href="https://www.bandicam.cn" target="_blank" rel="external">Bandicam</a>做了一个自动登录提交测试数据的录屏，11M多一点，有兴趣的可以去<a href="https://pan.baidu.com/s/1LgKgYp7R5U9pn14Pg_JYig" target="_blank" rel="external">百度网盘</a>下载查看，提取密码:euho。全文代码见<a href="https://github.com/benbendemo/learning-python/tree/master/python-selenium" target="_blank" rel="external">GitHub</a>。</p>
<p>最后补充一段Selenium的发展历史，Selenium单词本意是硒元素，作者为了对抗QTP mercury（汞元素），才取名叫Selenium，我觉得挺有意思。</p>
<blockquote>
<p>Jason Huggins在2004年发起了Selenium项目，当时身处ThoughtWorks的他，为了不想让自己的时间浪费在无聊的重复性工作中，幸运的是，所有被测试的浏览器都支持Javascript。Jason和他所在的团队采用Javascript编写一种测试工具来验证浏览器页面的行为；这个JavaScript类库就是Selenium core，同时也是seleniumRC、Selenium IDE的核心组件。Selenium由此诞生。</p>
<p>关于Selenium的命名比较有意思，当时QTP mercury是主流的商业自化工具，是化学元素汞（俗称水银），而Selenium是开源自动化工具，是化学元素硒，硒可以对抗汞。</p>
</blockquote>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://www.testclass.net/selenium_python/" target="_blank" rel="external">Selenium Python</a></li>
<li><a href="https://www.cnblogs.com/zhaof/category/1007686.html" target="_blank" rel="external">Python爬虫Selenium库</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> Base64 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CFA一级，一次失败的投资经历]]></title>
      <url>/2019/06/30/cfa-20190616/</url>
      <content type="html"><![CDATA[<p><img src="/2019/06/30/cfa-20190616/filip-bunkens-IkPpQqSMlk8-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/@thebeardbe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Filip Bunkens</a> on <a href="https://unsplash.com/search/photos/bad-investment?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>CFA一级考完那天，我发朋友圈说”题目做完时间多出一个小时，趴在桌子上睡了一觉”。让挺多人误以为我水平牛逼，一副胜卷在握的样子，其实这完全是自我调侃。多出一小时时间， 是因为大部分题都是靠蒙，对考试过关根本没做指望。😂</p>
<p>我是在考前大概两个月的时候，意识到自己这次考试没戏的，因为Ethics的模拟题，我做10个基本错7个，而且几个月前看的东西很多都忘记了，这次考试我的目标就是去走个过场，体验一下”金融行业第一考”的氛围。😉</p>
<p>我是18年12月报的名，那时项目做得比较顺，心里面有点小膨胀；加上大学同学的推荐怂恿，脑子一热，一天时间不到就报了名，当时真以为自己半年时间可以过关拿证，现在想一想，真的是“很傻很天真”。😂</p>
<a id="more"></a>
<hr>
<p>8000多块钱的注册费加报名费，没有充分考虑和调研，一下子就花了出去，很失败的一笔投资。</p>
<p>CFA一级一共考10门：</p>
<blockquote>
<p>道德与职业行为标准（Ethics and Professional Standards）</p>
<p>定量分析（Quantitative）</p>
<p>经济学（Economics）</p>
<p>财务报表分析（Financial Statement Analysis）</p>
<p>公司理财（Corporate Finance）</p>
<p>投资组合管理 （Portfolio Management）</p>
<p>权益投资（Equity Investments）</p>
<p>固定收益投资（Fixed Income）</p>
<p>衍生工具（Derivatives）</p>
<p>其他类投资（Alternative Investments）</p>
</blockquote>
<p>除此之外，我再加上一门，金融计算器使用的学习。哈哈，别笑，真的是这样哦。</p>
<p>……</p>
<p>全英文教程，英语基础差的题目可能都读不懂。这些课程里面，相对来说我比较擅长的是“定量分析”和“衍生工具”，“财务报表分析”和“权益投资”稍微了解一些，其余是一点都不懂。</p>
<p>现阶段的目标是“好好干好编程这份很有前途的职业”，等以后有空了，再回头来翻一翻“定量分析”和“衍生工具”这两块内容吧。</p>
<p>考前两个月，我跟老婆调侃说，“如果能退款，我一定选择退款”。8000多块钱，做啥不好，买点计算机的书看也比这个强啊。人总是要花很多钱买到教训后，才知道自己的份量。</p>
<p>CFA一级的考纲很宽泛，即便一级考试通过，也说明不了啥。这10门里的任何一门，想深钻，都要花挺多时间，CFA学习对挺拓展知识面挺有用的，对于想转型金融行业或进银行相关行业的人来说，是一个不错的敲门砖。基于我的亲身经历，有以下几点分享给想报考的朋友：</p>
<p>1、考这个证的目的是什么，一定要先想清楚。这个证可以给简历上加分，但给职业发展带来的作用可能有限。</p>
<p>2、真想考，先评估好时间和精力，知乎大V说至少400小时复习时间。对于上班族或有家庭的人来说，我估计翻倍都不够。没有足够的时间看书和做题，过关挺难的。</p>
<p>3、公众号后台回复“<strong>2019CFA</strong>”，看看我这份Quicksheet，你有信心弄懂里面的80%再报名。</p>
<p>4、如果预算充足，建议报补习班，人家老师有经验，能起到帮助作用，但关键还是靠自己看书和做题。</p>
<hr>
<p>对于已经报名待考的朋友，我有几点建议：</p>
<p>1、官网没有短信通知，不会提前通知你考试地点和考试时间。自己去官网查清楚，千万别错过，据说考试开始后30分钟进场视为弃考不让进。</p>
<p>2、打印准考证一定要趁早，提前1个月打印的时候还可以自己更换考点，晚了就是系统随机分配，可能会分到离家很远的地方。</p>
<p>3、一定要好好做模拟题。</p>
<p>4、公众号后台回复“<strong>2019CFA</strong>”，看看我这份Quicksheet，你弄懂了里面的80%我觉得基本上可以过关了。</p>
<p><img src="/2019/06/30/cfa-20190616/cfa-exam-test-center.jpeg" alt=""></p>
<p>（图1-考试现场拍图）</p>
<p>考完当天的几点感受：</p>
<p>1、CFA考试很专业。</p>
<ul>
<li>只允许带HB和2B铅笔、橡皮擦、手表和计算器进考场，其它一律不许带。你带了手机钱包怎么办，放酒店门口保安看管的物品架上；你带了草稿纸怎么办？也放外面，人家考卷是一本小册子，考卷空白页有的是对方让你打草稿。</li>
<li>整个考场分8个区，每个区3-4名工作人员，听广播指令操作，严谨有素。你提前把考卷翻个面，监考人员都要来纠正一下；厕所里还专门安排一个人全天候看守，</li>
<li>试卷、答题卡全英文内容，答题卡上考试地点和座位号千万别填反；考完后试卷和答题卡全收走，保密性做得很好。</li>
<li>只使用护照作为唯一报名证件。</li>
</ul>
<p>2、CFA考试很累。上午3小时，下午3小时，下午题明显比上午难，动脑多，中午又没时间休息。下午考试结束，人会感觉非常疲惫。</p>
<p>3、CFA协会很牛逼很赚钱。</p>
<ul>
<li>我所在的求水山酒店南岭会堂，满员1000人，管你去不去，8000元赚到手不退；整个酒店大概有5个这样的考场，算一下一天就4000万进账；整个深圳市有会展中心、宝立方、罗湖体育馆等几个考点，一个城市就赚到1.6个小目标。它在中国大陆有11个这样的城市，粗略算一下，光一级考试全年收入就有35个亿，这还没算二级和三级。如果CFA背后有一家上市公司，我一定买它的股票。</li>
<li>考试现场所有工作都交由供应商来做，租酒店、布置考场、收发试卷、请安保等等，应该都是由这家“中国技术创新有限公司“来做；CFA协会只需要维护好这个证书的品牌和声誉，打造出“CFA证书很吊很牛逼，你们快来考吧”就行。</li>
<li>2019年全球参考人数创新高，考证真tm是个好生意。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CFA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[桂林之旅]]></title>
      <url>/2019/05/05/trip-to-guilin/</url>
      <content type="html"><![CDATA[<p><img src="/2019/05/05/trip-to-guilin/joshua-earle-1050463-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/EqztQX9btrE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Joshua Earle</a> on <a href="https://unsplash.com/search/photos/guilin?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>五一去桂林玩了几天，整体感觉挺不错的，整个城市被青山绿水环绕，绿化率感觉和杭州很像。</p>
<p>我们四大一小，一行5个人，预订的是Airbnb的民宿，这是我第一次体验Airbnb，新鲜感还是有的，但远没有第一次使用Uber强烈，Airbnb已经出现了好多年，已经没什么稀奇了。房东是当地《桂林日报》的旅行记者，从他那里获取了不少旅游相关的信息，这确实是预订Airbnb带来的一个额外好处。他推荐了两家餐厅，”新郭纪油茶店”和”椿记烧鹅”，确实非常不错。</p>
<p><img src="/2019/05/05/trip-to-guilin/Oil-Tea-Restraunt.jpg" alt=""></p>
<p>(图1-新郭记油茶店正脸照)</p>
<a id="more"></a>
<hr>
<p>去”新郭记油茶”吃饭的一个意外发现是，除了”桂林米粉”家喻户晓之外，”油茶”在当地也是一款非常独到、有特色的食物，当茶喝它是很苦的，加上米泡、葱花、花生米、再加上一些盐，确实非常美味。</p>
<p><img src="/2019/05/05/trip-to-guilin/Elephant-Trunk-Hill.jpg" alt=""></p>
<p>(图2-象鼻山)</p>
<p>第一天旅途比较劳累，只去逛了一个象鼻山。上山下山走了一圈，没觉得有啥，回来后查百科才知道关于象鼻山有很多悠久的佛教文化和历史故事，比如供奉”菩贤菩萨”的普贤塔、天平天国时期太平军在象鼻山顶用火炮轰击桂林府的城门等。</p>
<p>第二天乘船游漓江逛银子岩。漓江畅游一路两岸的风景很美，可惜天气不好，下着小雨，江面上冷风阵阵，站在船顶三楼甲板上拍照，待不了多久，就得跑回去。喀斯特地貌因它的举世闻名和奇特，吸引了很多外国游客慕名前来，听说当年法（第四声）国总统带着一众保镖专门去西街《Lonely Planet》推荐的一家咖啡店去喝咖啡。</p>
<p><img src="/2019/05/05/trip-to-guilin/Ship-on-LiJiang.jpg" alt=""></p>
<p>(图3-漓江上的游轮)</p>
<p>船行3小时，在龙头山码头下船就到了阳朔。阳朔县城不大，出租车非常少，下船后我们直奔银子岩。溶洞太壮观了，进去参观之前，无论如何我都想不到山体里面会是如此巨大的空心结构，各种钟乳石从天而降，造型奇特，很多都是经历了上万年才长成，那天人很多，我们在溶洞里走了一个半小时，才把全部景观看完。</p>
<p><img src="/2019/05/05/trip-to-guilin/Karst-Cave-Silver-Rock-Scenic-Spot.jpg" alt=""></p>
<p>(图4-银子岩溶洞)</p>
<p>在银子岩里穿行的感觉很奇妙，时常让我想起学生时代边听《Nine Million Bicycles》边看《鬼吹灯》的场景，小说里有一章写主角们为了躲避追踪，逃进一个喀斯特地形的山洞，洞内峭壁上攀爬着小型蜥蜴和毒蛇野兽……</p>
<p>溶洞里没有自然光，打了背景灯钟乳石才拍得这么艳丽，我时不时往洞内那些阴暗的角落偷瞄几眼，想证实一下是否真的有小说里描述的猛兽存在。</p>
<p>自助语音讲解器里说”溶洞里面落差最大的地方将近有50米”、”有些钟乳石现在仍然在保持生长”……</p>
<p>第三天去看了一下《靖江王府》。朱元璋的侄孙继承父亲的王位被封于此，因为偏安一隅，躲避战乱，保存得比较完好。</p>
<p><img src="/2019/05/05/trip-to-guilin/Princess-Jingjiang-Residence.jpg" alt=""></p>
<p>(图5-靖江王府正脸照)</p>
<p>导游讲解王府里面的福寿文化很有意思，一提到”福”和”寿”，估计年轻人都觉得老气，不过它倆是中国人的传统文化，谁都无法避免它。</p>
<p>导游讲刘伯温的风水福里朱雀和龙在争抢一支如意棒，现在解读为风水，古时象征着争夺权力；”醉有福”很有意思，右边特像一个人站在酒坛子上喝酒；”全家福”里画着有钱、有粮、有田、有妻妾和子嗣，古人的幸福美好愿望，其实现代人也一样都盼望这些。</p>
<p><img src="/2019/05/05/trip-to-guilin/Felicity-Longevity-Culture.jpg" alt=""></p>
<p>(图6-五福图)</p>
<p>不知道支付宝每年搞的”集五福”活动是不是从这里汲取来的灵感。</p>
<p><img src="/2019/05/05/trip-to-guilin/HuanZhuGeGe.jpg" alt=""></p>
<p>(图7-还珠格格)</p>
<p>在靖江王府里看到”还珠格格”的故事，才知道她是历史上独此一位的汉人格格，确实流离颠沛、身世坎坷。</p>
<p>“<u><em>桂林山水甲天下，玉碧罗青意可参</em></u>“是南宋王正功作的诗，这首诗最高刻于王府后山独秀峰石壁上，名声也是从那儿传出来的。</p>
<p>Airbnb房东家里放了几本他们报社出版的书，其中一本讲改开40年老百姓生活、工作方式变化的书－《百姓记忆》写的很有意思，时间不允许，只读完了一半，等以后有空去图书馆再把它剩下的一半读完吧。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 桂林 </tag>
            
            <tag> 银子岩 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[资金监管报送项目]]></title>
      <url>/2019/04/14/one-project/</url>
      <content type="html"><![CDATA[<p><img src="/2019/04/14/one-project/jeff-sheldon-3231-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/@ugmonk" target="_blank" rel="external">Jeff Sheldon</a> on <a href="https://unsplash.com/photos/JWiMShWiF14" target="_blank" rel="external">Unsplash</a>)</p>
<p>上个月参与了一个资金监管报送项目，团队成员辛苦奋战一个月最终将项目投产上线。</p>
<p>项目的需求背景是：人行需要监管海南省内各金融机构下客户账户的进出岛资金交易，要求各金融机构按照人行制定的标准将监管报送系统在3月底上线。我们接到需求通知是2月22日，意味着要在不到一个半月的时间里面将这个系统开发出来并完成生产上线。</p>
<p>如果是一个熟练的团队，这不是啥难题，这个项目并不大，它只需按照人行的要求将客户的动帐记录组装成报文推送给人行服务器；但我们是一个临时组建起来的团队，小组6个人此前互相不认识，并且几乎都不熟悉行内的开发环境，像PL/SQL,IBM MQ,Oracle ESB,Hadoop ETL,GitLab这些对我们来说都是陌生的，都有不小的学习成本，而且最关键的是工期压得很紧，一个月多一点的时间得出活儿啊，团队面临不小的挑战。</p>
<a id="more"></a>
<p>刚开始一周都在熟悉开发环境，了解业务需求，后来决定使用SpringBoot+EMP(EMP是行内的一个前端框架)来做，版本管理工具使用GitLab，数据存储使用Oracle，动帐记录通过订阅MQ的方式获取T+0实时交易记录，映射表通过ETL从Hadoop数仓抽取(每日自动日清)，然后使用Quartz定时向人行MQ服务器进行数据报送。</p>
<p><img src="/2019/04/14/one-project/flow-chart.jpg" alt=""></p>
<p>大致的流程图长这样，数据源来自客户账户每日产生的交易记录，经过采集、清洗、加工、存档、报送、响应应答、最终存档入库，然后向前端展示。</p>
<p>计划得很好，实施起来各种问题一大堆。项目经理的不称职😰、Git代码管理的混乱、团队成员承受不了项目压力而离职、不服从项目管理、组员互相之间的不信任、<br>技术Leader的缺失、甲乙双方沟通理解的分歧、项目进度带来的压力等等等等，软件开发项目中可能出现的问题几乎都被我们遇到了。</p>
<p>整个团队的压力可想而知，随时都有散摊子的可能。更加不幸的是，我就是那个集万千压力于一身的项目经理。😥</p>
<p>得益于领导们的紧急救火，后来我们将整个项目扳回了正轨，投产上线成功后，收到了行方领导专程发来的感谢信，我们的付出得到了肯定，下面说一下我的几点收获。</p>
<p>1.大型软件项目中，数据的跨系统交互一般都会使用企业级的数据交互总线，如行方系统使用的Oracle ESB(Oracle Enterprise Service Bus)。如果需要跟多个系统进行数据交互，每一个都使用API去调上游的接口，这不现实；因此大型项目架构中，跨系统的数据请求，由统一的ESB总线去完成数据交互，既简捷又高效。</p>
<p>2.动帐交易数据的聚集。大型银行通常有上百个系统，与钱打交道的一般有结售汇、个贷、网银、第三方存管、支付(快捷支付、网联支付、无卡支付等)、卡交易、柜面、行内对转这些系统。对我们报送系统来说，我们需要从它们那里取数，如果要逐个去上游系统拿，那就太复杂了。好在行方已经将这些上游系统生产出来的交易记录聚合到了一个平台，我们现在只需要去平台订阅数据，就可以拿到客户实时的动帐交易记录，一切设计都变得简单。</p>
<p>3.生产者与消费者模型。在上面那张流程图中，生产交易数据的上游系统，它们是生产者，我们是消费者；但对人行来说，我们生产符合监管要求的报送数据，我们是生产者，人行变成了消费者。</p>
<p>4.Java替代COBOL的速度比我们相信中的快。国内各大中型银行都在推动去IOE化(即替换掉以IBM、Oracle、EMC为代表的国外软硬件产品)。主机开发人员赖以生存的软件开发环境惨遭厄运，逐步在被Java取代。软件行业在中国发展了几十年，国内每年毕业这么多Java程序员，COBOL被Java取代的速度比我们预想中得大大加快了。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> COBOL </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CFA金融英语单词]]></title>
      <url>/2019/01/16/finance-english/</url>
      <content type="html"><![CDATA[<p><img src="/2019/01/16/finance-english/neil-iris-1322261-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/photos/I2UR7wEftf4?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Neil Iris</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>以下是CFA学习过程中，我不太熟悉的金融英语词汇，特地整理在这里，按照字母A到Z进行排序。</p>
<p><strong>Account</strong></p>
<p>Account：会计科目</p>
<p>With the accounting system,a formal record of increases and decreases in a specific asset, liability, component of owners’ equity,revenue or expense.</p>
<p>Contra account：备抵科目</p>
<p>比如：公司有固定资产1000W，分10年进行折旧，截止目前已经折旧3年，累计折旧金额为300W，剩余资产净值为700W。</p>
<p>这个累积折旧金额300W，就叫做“备抵科目”。</p>
<p><strong>Active strategy</strong></p>
<p>Active strategy：主动投资策略，在市场主动选择个股进行投资；</p>
<p>Passive strategy：被动投资策略，以投资指数基金的方式进行被动投资；</p>
<a id="more"></a>
<p><strong>Antidilutive</strong></p>
<p>Antidilutive：反稀释</p>
<p>Dilutive：稀释</p>
<p>Net Income除以stock shares就是EPS。由于金融市场里有很多金融衍生品，比如可转债，当投资者进行行权时，stock shares会增大，EPS就会出现被稀释的情况，稀释后的EPS就是Diluted EPS。</p>
<p>如果公司的衍生品导致公司的股数减少，使净利润上升，EPS变高，这就叫做反稀释。</p>
<p><strong>Arbitrage</strong></p>
<p>Arbitrage：套利。</p>
<p>投资者不投入净透入，获取无风险套利利润的行为。</p>
<p><strong>Ask</strong></p>
<p>Ask是金融市场里面中介机构报出来的卖出价，中间人提出的卖出价。</p>
<p>Bid是金融市场里面中介机构报出来的买入价，中间人提出的买入价。</p>
<p>Ask price：卖出价</p>
<p>Bid price：买入价</p>
<p>bid-ask spread：买入卖出差价，即是中间商赚取的买卖差价。</p>
<p><strong>Behavioral finance</strong></p>
<p>Behavioral finance：行为金融学，相对于Traditional finance而言，除了传统金融学之外，引入了大量心理学的要素来进行考量。</p>
<p>真实金融事件中，人们只厌恶亏损（loss-averse），并不是厌恶风险（risk-averse）。</p>
<p><strong>Beta</strong></p>
<p>A measure of the sensitivity of a given investment or portfolio to movements in the overall market.</p>
<p>Beta：个股对于整个市场的风险，测试个股对于整个金融市场的敏感性。</p>
<p>Beta系数高，说明对大盘敏感度高。</p>
<p><strong>Binomial  Model</strong></p>
<p>Binomial：用二叉树模型对期权资产进行估值。期权的价格与股价紧密相关，在当前时刻估算出未来股价上涨的概率和下跌的概率，相加后，就可以得出期权价格。</p>
<p>Call option：看涨期权，未来可以买入一个资产的权利。<br>Put option：看跌期权，未来可以卖出一个资产的权利。</p>
<p>European option：欧式期权，行权只能在到期日行权。CFA一般常考这种。<br>American option：美式期权，在到期日前任意一天行权，比欧式更加复杂。</p>
<p><strong>Breakeven point</strong></p>
<p>Breakeven point：盈亏平衡点</p>
<p>当企业产品的销量达到多少个的时候，企业刚好可以达到盈亏平衡。</p>
<p><strong>Broad money</strong></p>
<p>Broad money：广义货币<br>Narrow money：狭义货币，通常就指示钱</p>
<p>广义货币包括可以被用来购买商品的流动资产，比如国债、债券。</p>
<p><strong>Broker</strong></p>
<p>Broker：经纪人，不参与交易，泛指金融市场里面的中间商，收入来源是佣金。<br>Dealer：做市商，与Broker不同的是，他实实在在参与交易，会自己从市场中买入资产，再找到买家卖出去。Dealer赚取的是bid-ask spread。</p>
<p><strong>Buyback</strong></p>
<p>Buyback：意指回购，上市公司回购自己的股份。<br>Anti-repo：逆回购，与回购互为反操作。以上面交易活动举例，B将钱出借给A，过一段时间，将钱收回，收回的钱较借出的钱要多。<br>Sell-repo：正回购。有点类似于抵押贷款。A将设备或资金抵押给B，过一段时间，A从B手里将设备或资金赎回。A用于回购的钱比抵押给B拿到的钱要多。</p>
<p><strong>Callable Bond</strong></p>
<p>Callable Bond：可赎回债券。发行方发行债券时，债券利率为5%，当前市场利率为3%，如果公司可以将这个债券进行赎回，这种债券就叫可赎回债券。<br>Puttable Bond：可提前卖出的债券，是指站在投资者的角度，投资者有权将债券提前卖出给发行方。</p>
<p><strong>Capacity</strong><br>Capacity：产能，产能不等于output</p>
<p><strong>Clearinghouse</strong></p>
<p>Clearinghouse：清算所<br>针对期货交易而言，保证期货合约不发生违约风险的地方。Clearinghouse就是用于买卖双方交易的用途。期货合约是在交易所场内完成；远期合约是在场外和交易对手签订合约，存在违约风险。</p>
<p>Exchanges-traded：场内交易<br>OTC-traded：场外交易</p>
<p><strong>Commercial paper</strong></p>
<p>Commercial paper：商业票据<br>特指企业发行的票据，具体收益债券的一种，是企业的一种短期融资工具。</p>
<p>Corparate Bond：企业债券<br>企业发行的长期债券。</p>
<p><strong>Common shares</strong></p>
<p>Preferral shares：优先股<br>Common shares：普通股</p>
<p><strong>Comparable company</strong></p>
<p>Comparable company：可比公司<br>指市场上同类型、公司财务可以进行对比的公司。</p>
<p><strong>Complements</strong></p>
<p>Complements：互补品<br>Substitute：替代品</p>
<p><strong>Comprehensive income</strong></p>
<p>Comprehensive income：综合收益</p>
<p><strong>Consumption bundler</strong></p>
<p>Consumption bundle：消费束，它是一个抽象概念，在宏观经济课程中出现，表示消费者的消费总和，消费意愿，不表示一笔具体的消费。A specific combination of the goods and services that a consumer wants to consume.</p>
<p><strong>Contractionary</strong></p>
<p>Contractionary：紧缩的<br>Expanding：扩张的</p>
<p><strong>Convergence</strong></p>
<p>Convergence：收敛，归一；比如GAAP准则和IFRS准确现在就在逐渐走向归一。</p>
<p>US GAAP：美国会计准则<br>IFRS：国际会计准则</p>
<p><strong>Convertible bond</strong></p>
<p>Convertible bond：可转换债券。在一定条件下，可以将公司债券转换为公司股票。<br>Convertible bond = bond + conversion option<br>可转债价格比一般债券价格要高，它是在债券基础上，给予了一个可以转换为股票的权利。<br>Option-free bond：不可转债</p>
<p><strong>Cost of capital</strong></p>
<p>Cost of capital：资金成本</p>
<p><strong>Cost of goods sold</strong><br>Cost of goods sold（COGS）：营业成本</p>
<p><strong>Credit risk</strong><br>Credit risk：信用风险<br>固定资产收益领域比较着重注意的一个风险，债券的风险主要在于违约风险，即发行人的信用风险。</p>
<p><strong>Crowding out</strong><br>Crowding out：挤出效应，金融市场里面，如果政府占据了大量的股份或大规模地投入资金，相应地就抑制了民间投资的热度，这就是一种挤出效应。</p>
<p><strong>Cumulative distribution function</strong><br>CDF：累积分布函数<br>CDF的作用是计算随机变量小于等于一个给定值的概率。</p>
<p><strong>Current ratio</strong><br>Current ratio：流动比率<br>衡量公司现金流动性强弱的指标，可以用来评比公司偿债能力的强弱，使用一年期以内的流动资产除以一年期内的流动负债可以得出这个指标值。</p>
<p><strong>Cyclical companies</strong><br>Cyclical companies：周期性公司，公司业绩随经济周期的波动而波动。<br>Defensive companies：防御性公司（非周期性公司），业绩不受经济周期波动影响。</p>
<p>周期性公司的判断标准是：公司生产的产品是否刚性需求，非刚性需求就是周期性公司，比如汽车和奢侈品。经济不景气时，人们就不倾向于消费这一类产品。<br>防御性公司：刚需产品。比如：食品公司、日化用品、制药企业、教育公司、共同事业（自来水厂、电力事业）。</p>
<p><strong>Debentures</strong><br>Debentures：债券<br>与Bond差别在于，debentures是没有担保物的债券。<br>Collateral bond是有担保物的债券。</p>
<p><strong>Declaration date</strong><br>Declaration date：公司发放分红的公告日期<br>holder-of-record date：股权登记日，这一天有股权的人可以拿到股利分红<br>payment date：实际发放股利分红的日期</p>
<p><strong>Default risk premium</strong><br>Default risk premium：违约风险溢价</p>
<p><strong>Deflation</strong><br>Deflation：通货紧缩，经济萧条，人民手里钱变少，失业率上升，需求量下降，消费下降，物价会下降，手里的钱会持续升值。</p>
<p>Inflation：通货膨胀，经济繁荣，人民手中有钱，消费增加，导致物价持续上升，手里的钱会持续发生贬值。</p>
<p><strong>Degrees of freedom</strong><br>Degrees of freedom：自由度。用于观察的独立变量个数。统计学里面的一个数学概念。</p>
<p><strong>Divergence</strong><br>Divergence：分歧，区别。<br>Convergence：收敛，归一。两个变量的值，协同变化，最终趋向于同一个值。</p>
<p><strong>Dividend</strong><br>Dividend：股利分红<br>Share repurchase：股份回购</p>
<p><strong>Duration</strong><br>Duration：久期<br>Bond price与Interest rate是一个反向关系。债券价格会随市场利率上升而下降，会随市场利率下降而上升。Duration是用来衡量两者变化关系(衡量敏感性)的一个参数值。</p>
<p>例如：Duration等于2，表示当Interest rate上升1%，Bond price会下降2%；当Interest rate下降1%，Bond price上升2%。</p>
<p><strong>Derivative</strong><br>Derivative：衍生品，衍生品价格波动不取决于自己，取决于标的资产。</p>
<p>衍生品通常分为4大类，远期合约、期货合约、期权、互换</p>
<p><strong>Ecomomic cost</strong><br>Economic cost：经济成本，等于账面成本和隐性成本的总<br>Accounting cost：账面成本（显性成本）<br>Implicit opportunity cost：机会成本（隐性成本）</p>
<p><strong>Elastic</strong><br>Elastic：弹性的，在宏观经济学一章中讲解供需关系时会出现。比如：需求弹性是，需求量增高，价格会上涨；<br>供给弹性是，供给量增高，价格下降。</p>
<p>Elasticity弹性值越高，表示价格随需求量或供给量的变动越大。</p>
<p><strong>Estimate</strong><br>Statistical inference（统计推断）有两个分支，一个是Hypothesis testing（假设检验）；另一个是estimation（估算）</p>
<p><strong>Exercise</strong><br>Option：期权，事先约定的价格买入或不买一个金融资产（股票）的权利。它只有权力，没有义务，就是说它可以买或者不买。<br>Exercise ：执行的意思，比如Exercise the option的意思就是行权。</p>
<p><strong>Externality</strong><br>Externality：外部性。评价一个新项目是否值得投资时，需要考虑的因素，即评估新项目对旧项目的影响，就是外部性。比如：新项目上线使老项目受损，则为负面的外部性；反之为正向的外部性。</p>
<p><strong>Factor</strong><br>Single-factor model：单一因素模型<br>Multi-factor model：多因素模型</p>
<p><strong>Float</strong><br>Float：浮动的<br>Fixed：固定的<br>Float rate和Fixed rate</p>
<p><strong>Forward contract</strong><br>Forward contract：远期合约，包含期货合约在内，它可以是场外的合约。<br>Futures contract：期货合约，在交易所交易的合约，受监管的标准化合约，场内。</p>
<p><strong>Goodwill</strong><br>Goodwill：商誉，不涉及摊销的金融资产。处理方法是进行减值测试。</p>
<p><strong>Harmonic mean</strong><br>Harmonic mean：调和平均数，将样本里的每一个值取倒数，求和之后，再除以样本数量，再取倒数得到结果<br>Arthmetic mean：算术平均数<br>例子：三个数字，1、2、10；取算术平均值是：(1+2+10)/3=4.33<br>调和平均值是：3/(1/1+1/2+1/10)=1.875</p>
<p>调和平均数的意义是可以剔除掉样本数据中的极值，以降低偏离程度。</p>
<p><strong>Histogram</strong><br>Histogram：直观图</p>
<p><strong>Indenture</strong><br>Indenture：契约，公司在发行债券时与投资者签订的法律合约，用来描述债券的形式、义务和权利归属等等，也被称为Trust deed。</p>
<p><strong>Interval</strong><br>Interval：间隔，在金融行业，称之为区间。</p>
<p><strong>Inventory</strong><br>Inventory：存货，包含原材料、半成品、成品(Raw materials、Work-in-progress、Finished goods)这三种类型。</p>
<p><strong>Kurtosis</strong><br>Kurtosis：峰度，表示一个概率分布的峰值。</p>
<p><strong>Leptokurtic</strong><br>Leptokurtic：尖峰的，用来形容比正太分布的峰值更高的分布。<br>platykurtic：低峰的，与Leptokurtic形成反义词，峰值比正态分布的峰值低。</p>
<p><strong>Lessee</strong><br>Lessee：承租人<br>Lessor：出租人<br>Lease：租赁</p>
<p><strong>Liquidation</strong><br>Going concern：持续经营<br>Liquidation：清算<br>Liquidity：流动性</p>
<p><strong>Margin</strong><br>Margin：保证金，衍生品(借钱买股票里面)和期货交易中需要客户提供保证金。<br>Margin另外一个意思是叫做比率。</p>
<p>Gross Profit Margin：毛利率</p>
<p><strong>Monopolistic competition</strong><br>Perfect competition：自由竞争，完全竞争，无数供应商都卖相同的产品。<br>Monopolistic competition：垄断竞争，高度竞争的市场，imperfect competition，<br>市场里面有大量的公司在进行同类竞争，卖的东西存在差异化，品牌商具有定价权。<br>Oligopoly competition：寡头垄断，定价权掌控在寡头手上，比如电信行业。<br>Monopoly：垄断，只有一家卖这种产品，消费者利益会受到损害，一般会被强制监管。</p>
<p><strong>Moving average</strong><br>Moving average：移动平均</p>
<p><strong>Net income</strong><br>Net income、Net profits、Earnings、Bottom line都是净利润的同义词</p>
<p><strong>Offer</strong><br>Offer：报价<br>Buy offer price：买方报价<br>Sell offer price：卖方报价</p>
<p><strong>Percentiles</strong><br>Percentiles：将数据或样本分成100份</p>
<p><strong>Perpetuity</strong><br>Perpetual annuity：一个永不到期的债券，每期支付一个固定的金额，直到永远</p>
<p><strong>Premium</strong><br>Premium：溢价，供不应求时会产生溢价效应<br>Discount：折价，供大于求时会产生折价效应</p>
<p><strong>Quotas</strong><br>Quotas：配额</p>
<p><strong>Recession</strong><br>Recession：衰退</p>
<p><strong>Redemptions</strong><br>Redemptions：赎回，投资者撤回资金<br>Subscribe：申购，投资者投入资金，购买份额</p>
<p><strong>Residual claim</strong><br>Residual claim：剩余索取权，公司债务被清算还完后，剩下来的权益对股东来说就是剩余索取权。</p>
<p><strong>Salvage value</strong><br>Salvage value：残值</p>
<p><strong>Skewness</strong><br>Skewness：偏度<br>lack of symmetry：缺乏对称性</p>
<p><strong>Solvency</strong><br>Solvency：偿债能力</p>
<p><strong>Spread</strong><br>Spread：息差不同收益债券之间的收益差额<br>债券的信用风险或流动风险越高，与Benchmark的Spread也就会相差越大。</p>
<p><strong>Subordination</strong><br>Subordination：级别比较低的证券。</p>
<p><strong>Substitutes</strong><br>Substitutes：替代品<br>Complementary：互补品</p>
<p><strong>Sunk cost</strong><br>Sunk cost：沉没成本，一个已经发生的，不可避免的成本<br>沉没成本不应该对未来的投资决策产生任何影响。</p>
<p><strong>Tariffs</strong><br>Tariffs：关税，调节国际贸易双边贸易的一个重要元素。</p>
<p><strong>Trough</strong><br>Trough：经济周期的谷底，最低点</p>
<p><strong>Volatility</strong><br>Volatility：波动性，高波动性经常意味着高风险。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CFA </tag>
            
            <tag> 金融英语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新年快乐，共同进步]]></title>
      <url>/2019/01/01/2019-new-year/</url>
      <content type="html"><![CDATA[<p><img src="/2019/01/01/2019-new-year/End2018begin2019.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 新年快乐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[月平息与实际年利率APR的关系]]></title>
      <url>/2018/12/23/monthly-flat-rate-and-apr/</url>
      <content type="html"><![CDATA[<p><img src="/2018/12/23/monthly-flat-rate-and-apr/annie-spratt-1147873-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/photos/nUZBAButMLA?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Annie Spratt</a> on <a href="https://unsplash.com/search/photos/dollar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>在<a href="/2018/10/15/monthly-flat-rate/">通过月平息计算实际年利率</a>一文，计算<u><strong>实际年利率(APR)</strong></u>过程中，我发现了三个特点。</p>
<p>1、APR的多少与贷款金额没有关系，给定<font color="FFC110"><strong>月平息利率</strong></font>和<font color="FFC110"><strong>贷款期限</strong></font>，就可以把APR算出来。</p>
<p>2、给定<strong>月平息利率</strong>后，并不是<strong>贷款期限</strong>越长，APR就越大，贷款期限与APR存在一个非线性关系。</p>
<p>3、给定<strong>贷款期限</strong>后，APR会随<strong>月平息利率</strong>增大而增大，它们也呈现出非线性关系。</p>
<a id="more"></a>
<p><strong>固定年平息利率为2.5%，查看APR与贷款期限的关系</strong></p>
<p>当固定年平息利率为2.5%时，即月平息利率为0.2083%，贷款期限从6个月到360个月，APR取值如下图所示。</p>
<p><img src="/2018/12/23/monthly-flat-rate-and-apr/FixFlatRate2_5Percent.jpg" alt="APR and Terms"></p>
<p>​                    （横坐标：贷款期限；纵坐标：实际年利率APR）</p>
<p>第一个取值，APR最大那个值，APR最小那个值分别如下，也就是图中箭头标注的地方。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">First Terms &amp; APR: <span class="number">6</span> <span class="number">0.0427304399998</span></div><div class="line">Max Terms &amp; APR: <span class="number">42</span> <span class="number">0.0475525199998</span></div><div class="line">Min Terms &amp; APR: <span class="number">360</span> <span class="number">0.0415012799998</span></div></pre></td></tr></table></figure>
<p>我们发现：</p>
<p>1.贷款期限从6个月增加到42个月过程中，APR会逐渐增大；</p>
<p>2.贷款期限等于42个月时，APR达到极大值，等于0.047553；</p>
<p>3.贷款期限从42个月增加到360个月过程中，APR逐渐减小；</p>
<p>4.贷款期限等于360个月时，APR达到极小值，等于0.041501；</p>
<hr>
<p><strong>固定年平息利率为4.8%，查看APR与贷款期限的关系</strong></p>
<p>当固定年平息利率为4.8%时，即月平息利率为0.4%，贷款期限从6个月到360个月，APR取值如下图所示。</p>
<p><img src="/2018/12/23/monthly-flat-rate-and-apr/FixFlatRate4Percent.jpg" alt="APR and Terms"></p>
<p>​                            （横坐标：贷款期限；纵坐标：实际年利率APR）</p>
<p>第一个取值，APR最大那个值，APR最小那个值分别如下，也就是图中箭头标注的地方。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">First Term &amp; APR: <span class="number">6</span> <span class="number">0.0818222399996</span></div><div class="line">Max Term &amp; APR: <span class="number">30</span> <span class="number">0.0896785199996</span></div><div class="line">Min Term &amp; APR: <span class="number">360</span> <span class="number">0.0718505999997</span></div></pre></td></tr></table></figure>
<p>我们发现：</p>
<p>1.贷款期限从6个月增加到30个月过程中，APR会逐渐增大；</p>
<p>2.贷款期限等于30个月时，APR达到极大值，等于0.089679；</p>
<p>3.贷款期限从30个月增加到360个月过程中，APR逐渐减小；</p>
<p>4.贷款期限等于360个月时，APR达到极小值，等于0.071851；</p>
<p>5.年平息利率增加后，APR取极大值的位置提前了；（年平息4.8%时，30期时APR最大；年平息2.5%时，42期最大）；</p>
<p>几乎可以肯定的是，如果贷款期限继续增大，APR还会继续减小，但一般来说，贷款的年期很少会超过30年，我们就不去进行后面的计算了。不过，我认为，即使APR继续减小，但它也是有一个极限值，这个极限值是多少，哪天有空我们再来推算它。</p>
<hr>
<p><strong>固定贷款期限为12个月，查看APR与月平息利率的关系</strong></p>
<p>当固定贷款期限为12个月时，月平息利率从0.0833%到1%（即年平息利率从1％到12%），APR取值如下图所示。</p>
<p><img src="/2018/12/23/monthly-flat-rate-and-apr/FixTerm12.jpg" alt="APR and MonthFlatRate"></p>
<p>​                        （横坐标：月平息利率；纵坐标：实际年利率APR）</p>
<p>第一个取值，APR最大那个值，APR最小那个值分别如下，也就是图中箭头标注的地方。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">First Flatrate &amp; APR: <span class="number">0.000833333333333</span> <span class="number">0.01840968</span></div><div class="line">Max Flatrate &amp; APR: <span class="number">0.01</span> <span class="number">0.214571640004</span></div><div class="line">Min Flatrate &amp; APR: <span class="number">0.000833333333333</span> <span class="number">0.01840968</span></div></pre></td></tr></table></figure>
<p>我们发现：</p>
<p>1.月平息利率从0.0833%增加到1%过程中，APR会逐渐增大；</p>
<p>2.APR与月平息利率的比值，第一期为0.01841/0.000833=22.1008，最后一期为0.214572/0.01=21.4572；</p>
<p>3.APR与月平息利率的比值逐渐减小；</p>
<p>4.APR与月平息利率看图形感觉像是线性关系，但实际是非线性关系；</p>
<hr>
<p><strong>固定贷款期限为48个月，查看APR与月平息利率的关系</strong></p>
<p>当固定贷款期限为48个月时，月平息利率从0.0833%到1%（即年平息利率从1％到12%），APR取值如下图所示。</p>
<p><img src="/2018/12/23/monthly-flat-rate-and-apr/FixTerm48.jpg" alt="APR and MonthFlatRate"></p>
<p>​                        （横坐标：月平息利率；纵坐标：实际年利率APR）</p>
<p>第一个取值，APR最大那个值，APR最小那个值分别如下，也就是图中箭头标注的地方。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">First Flatrate &amp; APR: <span class="number">0.000833333333333</span> <span class="number">0.01934748</span></div><div class="line">Max Flatrate &amp; APR: <span class="number">0.01</span> <span class="number">0.207536160002</span></div><div class="line">Min Flatrate &amp; APR: <span class="number">0.000833333333333</span> <span class="number">0.01934748</span></div></pre></td></tr></table></figure>
<p>我们发现：</p>
<p>1.月平息利率从0.0833%增加到1%过程中，APR会逐渐增大；</p>
<p>2.APR与月平息利率的比值，第一期为0.019347/0.000833=23.22569028，最后</p>
<p>一期为0.207536/0.01=20.7536；</p>
<p>3.APR与月平息利率的比值逐渐减小；</p>
<p>4.APR与月平息利率看图形感觉像是线性关系，但实际是非线性关系；</p>
<p>5.APR与月平息利率的比值在一个常数附件波动，因此有”<font color="FFC110"><strong><u>将月平息乘以常数21.5就近似得到APR的值</u></strong></font>“这一说法；</p>
<p>可以推测的是，如果月平息利率继续增大，APR会随之继续增大，APR与月平息利率的比值将会继续减小；由于金融机构发放贷款的利率严格受到政府监管，上述计算中，月平息利率上限我使用了1%，这个值已经很大了；再大就显得不太现实，过高的利率，监管机构是不会准许的，客户也不会傻到以这么高的利率来借钱。</p>
<p>但从数学计算的角度，即便月平息利率真的可以无限大，我觉得APR最终也会达到一个极限值，无法再增加下去。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 月平息 </tag>
            
            <tag> 实际年利率 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过月平息计算实际年利率]]></title>
      <url>/2018/12/15/monthly-flat-rate/</url>
      <content type="html"><![CDATA[<p><img src="/2018/12/15/monthly-flat-rate/kenny-luo-606878-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/1QbVbWjh9uY?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Kenny Luo</a> on <a href="https://unsplash.com/search/photos/flat-rate?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>很多金融机构发放贷款都以”月平息低至多少多少”作为卖点来吸引顾客，如果要知道这笔贷款的实际利率是多少，就需要转化为<strong><u>实际年利率(APR)</u></strong>进行计算比较。</p>
<p>比如，贷款20W，年平息2.5%（对应月平息就是2.5%/12=0.2083%），期限24个月，计算出贷款总利息为10,000，每月供款金额为8750.00，那么它的实际年利率是多少呢？</p>
<p><a href="https://www.bochk.com/sc/home/calculators/flatratevsapr.html" target="_blank" rel="external">中银香港</a>提供了一种计算方法，但它有一个问题，它的月平息利率最多只能输入3位小数，算出来的值不够准确。</p>
<a id="more"></a>
<p><img src="/2018/12/15/monthly-flat-rate/boc_hk_flat_2_apr.jpg" alt=""></p>
<p>此外，如果月平息利率想输入四位小数计算得更精确一些，如下图输入0.2083，它会直接提示报错。</p>
<p><img src="/2018/12/15/monthly-flat-rate/boc_hk_flat_2_apr_error.jpg" alt=""></p>
<p>可能这个网站一般人都不会去用吧，他们也就不去更新维护了，但作为金融领域专业人士的我（“咳咳”，有点吹牛逼了，请允许我往自己脸上贴这个金。），是无法容忍这个结果的。</p>
<p>要知道，小数精确位数不够，在金融领域实际计算出来的误差可以大到吓人啊。</p>
<p>我们得另谋它法。</p>
<p>在CCBA项目中，我们经常要对一笔Addon贷款进行实际年利率的计算，最开始就是用的这种方法，发现它计算出来的结果并不准确后，我们用了行方提供的一个Excel计算工具才得以解决问题。我们借鉴那个工具里面的Excel Rate函数来进行计算。</p>
<p>方法一：使用<a href="https://support.office.com/zh-cn/article/RATE-函数-9f665657-4a7e-4bb7-a030-83fc59e748ce" target="_blank" rel="external">Excel Rate函数</a>进行计算APR。</p>
<p><strong>Step1 - 根据年平息计算出每月供款额</strong></p>
<p>(20W+200,000*2.5%*2)/24=8750</p>
<p><strong>Step2 - 根据等额本息月供款额计算公式，计算每个月的月利率</strong></p>
<p>200,000*X*(1+X)$^{24}$/[(1+X)$^{24}$-1]=8750</p>
<p>这是一个一元24次方程，它并没有一个固定的求根公式。你是无法通过解方程算X的值的。怎么办啊？Excel里面的Rate函数可以帮上忙。</p>
<p><img src="/2018/12/15/monthly-flat-rate/excel-rate-function.jpg" alt=""></p>
<p><strong>Step3 - 将每个月的月利率（单元格B4）乘以12就可以得到实际年利率APR</strong></p>
<p>APR=0.00394060*12=0.04728721</p>
<p>方法二：写一个Python程序来计算APR。（我发现Python语言干这种事情非常轻巧、方便。）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Sun Dec 16 11:26:42 2018</span></div><div class="line"><span class="string">@author: jacksonshawn</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_flat_2_apr</span><span class="params">(LoanMonthFlatRate, LoanTerms, *LoanAmt)</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    calc_flat_2_apr: 根据月平息利率计算实际年利率(APR)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    参数依次为月平息利率, 贷款期限(单位月), 贷款金额</span></div><div class="line"><span class="string">    月平息利率必输, 并且必须是月平息, 不能是年平息</span></div><div class="line"><span class="string">    贷款期限必输</span></div><div class="line"><span class="string">    贷款金额选输</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(LoanAmt) != <span class="number">0</span>:</div><div class="line"></div><div class="line">        Month_repayment = LoanAmt[<span class="number">0</span>] / LoanTerms + LoanAmt[<span class="number">0</span>] * LoanMonthFlatRate</div><div class="line">        Interest_tot = LoanMonthFlatRate * LoanTerms * LoanAmt[<span class="number">0</span>]</div><div class="line">        <span class="keyword">print</span> <span class="string">"Month_repayment is:"</span>, Month_repayment</div><div class="line">        <span class="keyword">print</span> <span class="string">"Interest_tot is:"</span>, Interest_tot</div><div class="line">    </div><div class="line">    Max_MPR = <span class="number">1</span> / LoanTerms + LoanMonthFlatRate</div><div class="line">    </div><div class="line">    <span class="comment"># 给MPR变量分配一个初始值(根据实际取值的大小预估的初始值)</span></div><div class="line">    MPR = <span class="number">0.00000001</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (MPR &lt; Max_MPR):</div><div class="line">            </div><div class="line">        temp1 = pow((<span class="number">1</span> + MPR), LoanTerms)</div><div class="line">        temp2 = MPR * temp1 / (temp1 - <span class="number">1</span>) </div><div class="line"></div><div class="line">        <span class="comment"># 因为一元N次(N&gt;=5)方程没有固定求根公式,这里的策略是给定初始值和步长后,</span></div><div class="line">        <span class="comment"># 计算出一个误差在可接收范围内最接近正确值的结果出来,这个误差控制参数我将其设置为0.00000001</span></div><div class="line">        <span class="keyword">if</span> abs(temp2 - Max_MPR) &lt;= <span class="number">0.00000001</span>:    </div><div class="line">            <span class="keyword">return</span> MPR, Max_MPR</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:    </div><div class="line">            <span class="comment"># MPR是一个自增变量,每次增长的步长为0.00000001,这也是一个预估的数值</span></div><div class="line">            MPR = MPR + <span class="number">0.00000001</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    </div><div class="line">    <span class="comment"># 参数依次为月平息利率, 贷款期限(单位月), 贷款金额</span></div><div class="line">    MPR, Max_MPR = calc_flat_2_apr(<span class="number">0.025</span>/<span class="number">12</span>, <span class="number">24</span>)</div><div class="line">    APR = MPR * <span class="number">12</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"MPR is:"</span>, MPR</div><div class="line">    <span class="keyword">print</span> <span class="string">"Max_MPR is:"</span>, Max_MPR</div><div class="line">    <span class="keyword">print</span> <span class="string">"APR is:"</span>,APR</div></pre></td></tr></table></figure>
<p>计算结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MPR <span class="keyword">is</span>: <span class="number">0.00394058999998</span></div><div class="line">Max_MPR <span class="keyword">is</span>: <span class="number">0.04375</span></div><div class="line">APR <span class="keyword">is</span>: <span class="number">0.0472870799998</span></div><div class="line">[Finished <span class="keyword">in</span> <span class="number">0.4</span>s]</div></pre></td></tr></table></figure>
<p>需要注意的是，这里计算得出的数值0.0472870799998，它是一个近似值，并不是精确值，是一个误差被我控制在0.00000001之内的结果。</p>
<p>你可以认为方法一里面Excel Rate函数计算出来的0.04728721是精确值。与其相比，Python程序计算出来的0.0472870799998，与精确值非常接近，可以将其当作精确值使用。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://www.bochk.com/sc/home/calculators/flatratevsapr.html" target="_blank" rel="external">月平息兑换实际年利率</a></li>
<li><a href="https://support.office.com/zh-cn/article/rate-函数-9f665657-4a7e-4bb7-a030-83fc59e748ce" target="_blank" rel="external">Excel RATE 函数</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 月平息 </tag>
            
            <tag> 实际年利率 </tag>
            
            <tag> Rate函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[等额本金和等额本息]]></title>
      <url>/2018/11/25/equality-corpus-vs-equality-corpus-interest/</url>
      <content type="html"><![CDATA[<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/rawpixel-579263-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/5IiH_UVYdp0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">rawpixel</a> on <a href="https://unsplash.com/search/photos/loan?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>上周写的<a href="/2018/09/30/personal-loans/">我所知道的贷款业务</a>一文，对所有贷款业务做了一个提纲式的介绍。今天详细解析Installment Loan里面<strong>等额本金</strong>和<strong>等额本息</strong>两种还款方式的区别。</p>
<p>直接引用上次文章中的内容：</p>
<blockquote>
<p>银行会根据贷款金额、贷款利率、借款期限、还款频率、还款方式，计算出每一期账单的分期还款额。</p>
<blockquote>
<p>等额本息：客户每一期偿还的本金加利息是一个固定值，客户刚开始偿还的本金少，利息多；后面每一期本金不断增加，利息不断减少。每一期利息金额使用上一期贷款剩余本金乘以贷款利率计算得出。</p>
<p>等额本金：客户每一期偿还的本金是一个固定值，每一期利息刚开始多，后面每一期不断减少。每一期利息减少的金额是一个固定值，成等差数列形式。每一期利息金额采用78法则摊分计算得出。</p>
</blockquote>
<p>具体看这里：<a href="https://weibo.com/ttarticle/p/show?id=2309404244705431938357" target="_blank" rel="external">等额本息和等额本金</a></p>
<p>等额本息使用<font color="FFC125"><u><strong><em>复利计息</em></strong></u></font>，使用的是Discrete Compound，每一期的利息是使用上一期贷款剩余本金乘以贷款利率计算得出。</p>
<p>等额本金使用<font color="FFC125"><u><strong><em>单利计息</em></strong></u></font>，每一期的利息，使用78法则对利息总金额摊分计算得出。</p>
</blockquote>
<a id="more"></a>
<h3 id="等额本金"><a href="#等额本金" class="headerlink" title="等额本金"></a>等额本金</h3><p>贷款金额20W，年利率4.7287%，贷款期限24个月，还款方式使用等额本金，每一期的还款计划计算如下。</p>
<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/equality-corpus-20w-24.jpg" alt="等额本金方式"></p>
<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/equality-corpus-20w-24-result.jpg" alt="等额本金结果"></p>
<p>等额本金贷款总利息计算方式：</p>
<font color="FFC110"><u><strong><em>贷款总利息=(还款月数+1)×贷款额×月利率/2</em></strong></u></font>



<p>利息总额=(24+1)*20W*(4.7287%/12)/2=9851.4583</p>
<p>等额本金月供款额计算方式：</p>
<font color="FFC110"><u><strong><em>月供款额=(贷款本金/还款月数)+(贷款本金-已归还本金累计额)×月利率</em></strong></u></font>



<p>等额本金还款方式的月供款额分为月供本金和月供利息两部分进行计算。</p>
<ol>
<li><p>每期的月供本金好算，等于贷款金额除以贷款期数。</p>
<p>这里的月供本金就是20W/24=8333.34(这里是约等于，原值是一个除不断的分数；招商银行这里默认向上取大进行计算，并不是四舍五入)</p>
</li>
<li><p>每期月供利息可以用下面两种方式分别进行计算。</p>
<p>a.每期月供利息使用本金余额（也就是你欠银行未还的钱）乘以月利率（0.3941%）进行计算</p>
</li>
</ol>
<blockquote>
<p>第1期月供利息：20W*0.3941%=788.12</p>
<p>第2期月供利息：19.166667W*0.3941%=755.28</p>
<p>第3期月供利息：18.333333W*0.3941%=722.44</p>
<p>……</p>
<p>第24期月供利息：8333.33*0.3941%＝32.84</p>
</blockquote>
<p>​    b.在算出贷款总利息后，使用<strong>78法则</strong>对每期月供利息进行摊分</p>
<p>78法则：将所有期数相加作为分母，每一期的期数作为分子。第一期分子使用最大的期数，最后一期分子使用最小的期数，中间依次递减。比如：一共还款24期，第一期摊分贷款总利息的24/300；第二期摊分23/300；……；最后一期摊分1/300。    </p>
<blockquote>
<p>第1期月供利息：9851.46*$\frac{24}{300}$=788.12</p>
<p>第2期月供利息：9851.46*$\frac{23}{300}$=755.2786</p>
<p>第3期月供利息：9851.46*$\frac{22}{300}$=722.44</p>
<p>……</p>
<p>第24期月供利息：9851.46*$\frac{1}{300}$=32.8382</p>
</blockquote>
<h3 id="等额本息"><a href="#等额本息" class="headerlink" title="等额本息"></a>等额本息</h3><p>贷款金额20W，年利率4.75%，贷款期限24个月，还款方式使用等额本息，每一期的还款计划计算如下。</p>
<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/equality-corpus-and-interest-20w-24.jpg" alt="等额本息方式"></p>
<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/equality-corpus-and-interest-20w-24-result.jpg" alt="等额本息结果"></p>
<p>等额本息月供款额计算方式：</p>
<font color="FFC110"><u><strong><em>月供款额=[贷款本金[贷款本金$\times$月利率$\times$(1+月利率)$^{还款月数}$]/[(1+月利率)$^{还款月数}$-1]</em></strong></u></font>



<p>每月还款额=[20W*(4.7287%/12)*(1+(4.7287%/12))$^{24}$]$$\div$$[(1+(4.7287%/12))$^{24}$-1]=8750.04</p>
<p>贷款总利息=8750*24-20W=10,000</p>
<p>每一期月供利息使用本金余额（也就是你欠银行未还的钱）乘以月利率（0.3941%）进行计算。</p>
<blockquote>
<p>第1期月供利息：20W*0.39405833%=788.12</p>
<p>第2期月供利息：19.203812W*0.39405833%=756.74</p>
<p>第3期月供利息：18.404486W*0.39405833%=725.24</p>
<p>……</p>
<p>第24期月供利息：8715.65*0.39405833%＝34.34</p>
</blockquote>
<p><u><strong><em>要注意的是等额本息每期月供利息不能使用78法则进行摊分计算！</em></strong></u></p>
<h3 id="等额本金与等额本息比较"><a href="#等额本金与等额本息比较" class="headerlink" title="等额本金与等额本息比较"></a>等额本金与等额本息比较</h3><p>网上找到这样一张图，很形象地阐释了等额本金和等额本息两种还款方式的异同点。</p>
<p><img src="/2018/11/25/equality-corpus-vs-equality-corpus-interest/comparison.jpeg" alt="等额本金与等额本息比较"></p>
<p>等额本金：</p>
<p>1.每期供款额不是一个固定值，呈逐渐减少趋势</p>
<p>2.每期月供本金自始至终都相同；每期月供利息刚开始多，后面逐渐减少</p>
<p>3.在相同贷款金额、年利率、贷款期限条件下，刚开始几期，每期供款额比等额本息的每期供款额要高</p>
<p>等额本息：</p>
<p>1.每期供款额是一个固定值</p>
<p>2.每期月供本金刚开始少，后面逐渐增多；每期月供利息刚开始多，后面逐渐减少</p>
<p>3.在相同贷款金额、年利率、贷款期限条件下，等额本息贷款总利息比等额本金的贷款总利息要高</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404244705431938357" target="_blank" rel="external">等额本息和等额本金</a></p>
</li>
<li><p><a href="http://www.cmbchina.com/CmbWebPubInfo/Cal_Loan_Per.aspx" target="_blank" rel="external">招商个人贷款计算器</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 等额本金 </tag>
            
            <tag> 等额本息 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[离散复利和连续复利]]></title>
      <url>/2018/11/04/discrete-compunding-and-continuous-compunding/</url>
      <content type="html"><![CDATA[<p><img src="/2018/11/04/discrete-compunding-and-continuous-compunding/colin-watts-1169445-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/5IiH_UVYdp0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">rawpixel</a> on <a href="https://unsplash.com/search/photos/loan?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>我们知道银行的定期存款是使用<font color="FFC125"><strong>复利</strong></font>给客户计息，以1万元的定存作为例子来进行复利计算。</p>
<p>目前国内一年定期存款利率大概为3%，也就是说1万元定存一年，年末可以拿到300元利息，我们记一年定存利率R=3%。</p>
<p>在这个金融行为里面，其实隐藏了一个叫“结息周期”的概念，一年后可以拿到300元利息，这是一年结息1次的情况，也是实际生活中真实的情况。如果银行给你一年结息2次，即每半年银行给你付一次利息，同样是3%的定存利率，那么你年末拿到的利息就不是300元，而是302.25元。</p>
<p>半年末，你拿到10,000*3%/2=150元利息。</p>
<p>年末，拿到(10,000+150)*3%/2=152.25元利息。（注意：第二次结息周期开始时，已经将第一期产生的利息加入到本金里面进行计算了，这就叫做复利）</p>
<p>全年共拿到302.25元利息，除以本金，得到实际年利率为3.0225%。</p>
<a id="more"></a>
<h5 id="实际年利率换算公式"><a href="#实际年利率换算公式" class="headerlink" title="实际年利率换算公式"></a>实际年利率换算公式</h5><p>这里有一个快捷、方便进行实际年利率换算的公式：</p>
<blockquote>
<p><strong>EAR=(1+R/t)^t-1</strong></p>
<p>R：名义年利率</p>
<p>t：结息次数</p>
<p>EAR：实际年利率（Effective Annual Rate）</p>
</blockquote>
<p>结息2次，计算实际年利率为：</p>
<p>EAR=(1+3%/2)$^2$-1=3.0225%（二次方在网页上可能展示不出来）</p>
<hr>
<h5 id="CFA教材标准的EAR计算公式"><a href="#CFA教材标准的EAR计算公式" class="headerlink" title="CFA教材标准的EAR计算公式"></a>CFA教材标准的EAR计算公式</h5><p><img src="/2018/11/04/discrete-compunding-and-continuous-compunding/ear-calculation.jpg" alt=""></p>
<hr>
<p>假如一年结息4次，即银行每个季度给你付一次利息，同样是3%的定存利率，那么利息为：</p>
<p>第1个季度末，你拿到10,000*3%/4=75元利息。</p>
<p>第2个季度末，你拿到(10,000+75)*3%/4=75.5625元利息。</p>
<p>第3个季度末，你拿到(10,000+75+75.5625)*3%/4=76.12921875元利息。</p>
<p>第4个季度末，你拿到(10,000+75+75.5625+76.12921875)*3%/4=76.70018789元利息。</p>
<p>……</p>
<p>全年总共拿到303.39190664元利息，即实际的年利率为3.03391907%。</p>
<p>计算实际年利率为：</p>
<p>EAR=(1+3%/4)$^{4}$-1=3.033919%</p>
<hr>
<p>假如一年结息12次，即银行每个月给你付一次利息，同样是3%的定存利率，那么利息为：</p>
<p>第1个月末，你拿到10,000*3%/12=25元利息。</p>
<p>第2个月末，你拿到(10,000+25)*3%/12=25.0625元利息。</p>
<p>第3个月末，你拿到(10,000+25+25.0625)*3%/12=25.12515625元利息。</p>
<p>……</p>
<p>全年总共拿到304.1596元利息，即实际的年利率为3.041596%。</p>
<p>计算实际年利率为：</p>
<p>EAR=(1+3%/12)$^{12}$-1=3.041596%</p>
<hr>
<p>假如一年结息365次，即银行每天给你付一次利息，同样是3%的定存利率，年末你可以拿到304.5326元利息，具体我不去推算了，感兴趣可以自行计算啊。</p>
<p>实际年利率为：</p>
<p>EAR=(1+3%/365)$^{365}$-1=3.045326%</p>
<font color="FFC125"><u><strong><em>可见，在给定相同年利率的情况下，结息次数越多，你拿到的利息越多，实际年利率越高。</em></strong></u></font>

<hr>
<p>假如每小时结息一次，我能拿到多少利息？</p>
<p>假如每分钟结息一次，我能拿到多少利息？</p>
<p>假如每秒钟结息一次，我能拿到多少利息？</p>
<p>……</p>
<h5 id="离散复利和连续复利"><a href="#离散复利和连续复利" class="headerlink" title="离散复利和连续复利"></a>离散复利和连续复利</h5><p>以上，这些以一个固定时间周期进行复利计算的形式，数学家们称之为<strong>离散复利</strong>，即使用一个固定的时间间隔进行复利计算。</p>
<hr>
<p>我们知道银行如此高频率地给客户结息是不可能出现的情况，但我们想知道，无限次结息的情况下，到底可以拿多少利息，我们往极限的方向去推导。</p>
<p>相对于离散复利，计息周期无限缩短，无限进行复利的形式，数学家们称之为<strong>连续复利</strong>，连续复利其实就是求离散复利的极限值。</p>
<h5 id="连续复利计算公式"><a href="#连续复利计算公式" class="headerlink" title="连续复利计算公式"></a>连续复利计算公式</h5><p>连续复利的极限推导公式如下：</p>
<blockquote>
<p><strong>EAR=$\lim_{t \to +\infty} (1 +\frac{R}{t})^t$-1=e$^R$-1</strong></p>
<p>R：名义利率</p>
<p>t：结息次数</p>
<p>e：<a href="https://zh.wikipedia.org/wiki/E_(数学常数" target="_blank" rel="external">自然常数e</a>)</p>
<p>EAR：实际年利率（Effective Annual Rate）</p>
</blockquote>
<p>代入R=3%进行计算，连续复利下得到实际年利率为：</p>
<p>EAR=e$^{3\%}$-1=0.03045453=3.045453%</p>
<p>即在给定3%年利率的前提下，即使银行无时无刻都给你结算利息，你也只能拿到3.045453%这个最大利率，即定存1万块钱一年，你最多只能拿到304.5453元利息。</p>
<hr>
<h5 id="钱存银行发不了财"><a href="#钱存银行发不了财" class="headerlink" title="钱存银行发不了财"></a>钱存银行发不了财</h5><p>假如银行给你R=100%，极限情况下，你也只能拿到EAR=e$^{100\%}$-1=171.828183%这个利率；即年末，最多你能拿到17182.8183元利息。</p>
<p>这是给定100%利率，无限复利的情况，但实际上我们知道银行肯定给不了这么高的利率，也绝对不可能给你这么频繁地结算利息。</p>
<p>于是，我们通过数学计算得出结论，钱存在银行，无论如何你都发不了财。</p>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul>
<li><a href="https://www.guokr.com/article/50264/" target="_blank" rel="external">数学常数e的含义</a></li>
<li><a href="https://baike.baidu.com/item/自然常数/1298918" target="_blank" rel="external">自然常数e</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 离散复利 </tag>
            
            <tag> 连续复利 </tag>
            
            <tag> 钱存银行发不了财 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我所知道的贷款业务]]></title>
      <url>/2018/09/30/personal-loans/</url>
      <content type="html"><![CDATA[<p><img src="/2018/09/30/personal-loans/rawpixel-602154-unsplash.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/5IiH_UVYdp0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">rawpixel</a> on <a href="https://unsplash.com/search/photos/loan?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>5月份被公司安排去上海做建银亚洲新一代UAT测试项目，到现在将近半年了。这个项目做得很累，但收获超值，让我熟悉并掌握了银行贷款产品的设计思想和业务流程，填补了我在银行业务领域很大一块空白。</p>
<p>贷款业务是每一家银行的重中之重，可以说是银行存在的立业之本。去年参与中国银行海外批次授权业务的升级改造，项目结束后，其它几个小组的人陆续被释放，唯独贷款组的人保留了下来，沿用至今，其实可以窥见贷款业务之大与复杂。</p>
<p>趁热打铁，我把学到的这些个贷业务整理出来，当作一个阶段性的总结，这是今天行文的目的所在。</p>
<a id="more"></a>
<hr>
<h3 id="按担保方式分类"><a href="#按担保方式分类" class="headerlink" title="按担保方式分类"></a>按担保方式分类</h3><p><img src="/2018/09/30/personal-loans/mortgage_pledge_guarantor.jpg" alt="抵押质押担保"></p>
<p>如果从担保方式来分，可以大致分为信用贷款、抵押贷款、质押贷款、保证金贷款等几类，可能还有别的类型，但脱离不出这几个范畴。</p>
<h4 id="信用贷款"><a href="#信用贷款" class="headerlink" title="信用贷款"></a>信用贷款</h4><p><font color="FFC125"><strong>信用贷款</strong></font>就是你去银行借钱，它根据本行或人行或第三方机构提供的征信报告，批给你一个授信额度，不需要提供抵押物，直接放款给你。由于是Unsecured Loan，它的利率一般较Secured Loan高，而且金额不会太大。这类贷款可以直接走线上审批，一般来说，特点是贷款金额小，放款速度快。</p>
<h4 id="抵押贷款"><a href="#抵押贷款" class="headerlink" title="抵押贷款"></a>抵押贷款</h4><p><font color="FFC125"><strong>抵押贷款</strong></font>就是你需要提供资产给银行作为抵押，以从银行获取贷款金额。比如房贷需要抵押你的房产证（香港叫楼契）、车贷需要抵押你的车管所电子凭证。有些银行，车贷不需要客户提供抵押品，这时银行需要客户为这笔贷款指定一个担保人，如果你出现违约，银行会找这个担保人来偿还债务。</p>
<p>抵押贷款就是Secured Loan，由于有抵押物存在，它的利率相对Unsecured Loan来讲，会低一些，但不绝对。抵押贷款的借款金额通常比较高，借款期限也可以做得比较长。</p>
<h4 id="质押贷款"><a href="#质押贷款" class="headerlink" title="质押贷款"></a>质押贷款</h4><p><font color="FFC125"><strong>质押贷款</strong></font>，使用无形资产（比如股票、基金、债券、外汇、存单、数字货币(将来可能会有)、结构性理财产品等）进行抵押以获取的贷款。质押和抵押的区别就是一个用无形资产，一个用有形资产，质押物一般多是金融类理财产品，容易变现，银行比较喜欢。</p>
<h4 id="保证金贷款"><a href="#保证金贷款" class="headerlink" title="保证金贷款"></a>保证金贷款</h4><p><font color="FFC125"><strong>保证金贷款</strong></font>则是银行在放款前，要求客户或其担保人先存入一笔资金（比如放款金额的5%）到该客户或担保人在该行的账户里面，作为保证金，这笔资金不能动用，直到贷款结清后，这笔钱再会归还给客户或担保人。一般针对信用评级不太好的客户，银行才需要收取保证金。</p>
<hr>
<h3 id="按还款方式分类"><a href="#按还款方式分类" class="headerlink" title="按还款方式分类"></a>按还款方式分类</h3><p><img src="/2018/09/30/personal-loans/repayment-method.jpeg" alt="还款方式"></p>
<p>如果从还款方式上来讲，可以分为分期贷款（Installment Loan，包含等额本息，等额本金两种)、定期还息到期还本（Bullet Term Loan）、循环贷款（Revolving Loan，一般是授信额度和额度支用双层设计结构，在授信额度范围内申请支用，支用结清后，额度恢复，如此循环往复）、一次性还本付息、预付息（Discount Loan）等。</p>
<h4 id="分期贷款-Installment-Loan"><a href="#分期贷款-Installment-Loan" class="headerlink" title="分期贷款(Installment Loan)"></a>分期贷款(Installment Loan)</h4><p>和我们每个人息息相关的房贷，就是典型的Installment Loan。内地的房贷几乎清一色都使用等额本息这种还款方式。</p>
<p>说到这里，你可能想问什么是等额本息，什么是等额本金？</p>
<p><img src="/2018/09/30/personal-loans/equality-corpus-vs-equality-corpus-&amp;-interest.jpeg" alt="等额本金vs等额本息"></p>
<p>银行会根据贷款金额、贷款利率、借款期限、还款频率、还款方式，计算出每一期账单的分期还款额。</p>
<blockquote>
<p>等额本息：客户每一期偿还的本金加利息是一个固定值，客户刚开始偿还的本金少，利息多；后面每一期本金不断增加，利息不断减少。每一期利息金额使用上一期贷款剩余本金乘以贷款利率计算得出。</p>
<p>等额本金：客户每一期偿还的本金是一个固定值，每一期利息刚开始多，后面每一期不断减少。每一期利息减少的金额是一个固定值，成等差数列形式。每一期利息金额采用78法则摊分计算得出。</p>
</blockquote>
<p>具体看这里：<a href="https://weibo.com/ttarticle/p/show?id=2309404244705431938357" target="_blank" rel="external">等额本息和等额本金</a></p>
<p>等额本息使用<font color="FFC125"><u><strong><em>复利计息</em></strong></u></font>，使用的是Discrete Compound，每一期的利息是使用上一期贷款剩余本金乘以贷款利率计算得出。</p>
<p>等额本金使用<font color="FFC125"><u><strong><em>单利计息</em></strong></u></font>，每一期的利息，使用78法则对利息总金额摊分计算得出。</p>
<h4 id="定期还息到期还本-Bullet-Term-Loan"><a href="#定期还息到期还本-Bullet-Term-Loan" class="headerlink" title="定期还息到期还本(Bullet Term Loan)"></a>定期还息到期还本(Bullet Term Loan)</h4><p>定期还息到期还本，也叫做先息后本。意思是客户在借款期间，只需偿还利息，到贷款终止日期，偿还最后一期利息和贷款本金。</p>
<h4 id="循环贷款-Revolving-Loan"><a href="#循环贷款-Revolving-Loan" class="headerlink" title="循环贷款(Revolving Loan)"></a>循环贷款(Revolving Loan)</h4><p>感觉没什么好说的，银行给客户批复一个Credit Line，在信用额度内支用贷款，支用完还清贷款后，额度自动恢复。有点类似我们日常使用的信用卡，只不过信用卡是透支，Revolving Loan是实打实地从银行贷款拿现金使用。</p>
<h4 id="一次性还本付息-没找到合适的翻译，姑且叫做Lump-Sum-Loan吧"><a href="#一次性还本付息-没找到合适的翻译，姑且叫做Lump-Sum-Loan吧" class="headerlink" title="一次性还本付息(没找到合适的翻译，姑且叫做Lump-Sum Loan吧)"></a>一次性还本付息(没找到合适的翻译，姑且叫做Lump-Sum Loan吧)</h4><p>一次性还本付息是借款期限内，客户一分钱本金和利息都不用还，在贷款到期日那天，一次性将本金和利息还掉。建亚私人银行有一款叫做伦巴复利的产品，它根据贷款本金按日计息，除第一天外，每天都会使用头一天的本利之和进行复利计息，最后到期日要求客户一次性偿还本金和利息。</p>
<h4 id="预付息-Discount-Loan"><a href="#预付息-Discount-Loan" class="headerlink" title="预付息(Discount Loan)"></a>预付息(Discount Loan)</h4><p>银行放款前将这笔贷款产生的利息先行扣除后再放款。比如客户计划贷款100W，年利率6%，借款期限1年。采用预付息贷款的话，实际放款金额为94W，这种产品的实际年利率为6W/94W=6.38%。这里6%就是APR，叫做名义年利率，6.38%就是EAR，叫做实际年利率。这倆兄弟是贷款产品里一个很重要的概念，后面有机会再讲。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来说，银行贷给客户的金额小，通常可以让客户先还利息，后还本金；甚至在借款期限内，可以允许客户不用偿还一分钱，最后一次性还掉本金和利息，这类贷款多见于消费性的贷款；</p>
<p>如果银行贷给客户的钱比较多，通常会要求有相应的抵押物或担保人，以来Secure这一份保险。因为，经营钱就是在经营风险。那么大一笔本金一次性放出去了，可能需要10年、8年才能将本金全部收回来，不要求客户提供抵押品，真的不保险。这类贷款，多见于车贷和房贷，银行要求客户每期偿还一定的本金和一定的利息，直到贷款结束。</p>
<p>通常情况是这样，但不绝对，因为总会有一些特例情况存在。</p>
<p>香港是一个金融市场化程度非常高的城市，金融机构众多，市场竞争激烈，各家银行推出的贷款产品，种类繁多，玩法千奇百样，我们先知道这些基础的类型，后面有空再详细讲述具体的贷款产品，清楚背后的理念和逻辑后，其实你会发现，不管贷款产品怎么变，如何设计，本质都只是一场数字的游戏。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.zhihu.com/question/51134895/answer/292201043" target="_blank" rel="external">等额本息、等额本金、先息后本、一次性还本付息计算年化收益率？</a></li>
<li><a href="https://weibo.com/ttarticle/p/show?id=2309404244705431938357" target="_blank" rel="external">等额本息和等额本金</a></li>
<li><a href="http://www.cmbchina.com/CmbWebPubInfo/Cal_Loan_Per.aspx" target="_blank" rel="external">招商个人贷款计算器</a></li>
<li><a href="https://wiki.mbalib.com/wiki/PMT" target="_blank" rel="external">Excel PMT函数</a></li>
<li><a href="https://en.wikipedia.org/wiki/Loan" target="_blank" rel="external">Wikimedia Loan</a></li>
<li><a href="http://www.asia.ccb.com/hongkong/personal/loans/index.html" target="_blank" rel="external">CCBA Person Loans</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 个贷业务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[真正弄懂md5值是什么]]></title>
      <url>/2018/05/03/python-hashlib-md5/</url>
      <content type="html"><![CDATA[<p>今天写了一个程序，扫描指定目录，遍历这个目录及子目录下全部文件，生成每一个文件的md5值，记录到一个字典变量，然后在这堆记录里面找出重复的文件。</p>
<p>之前看廖雪峰老师博客中<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319556588648dd1fb0047a34d0c945ee33e8f4c90cc000" target="_blank" rel="external"><strong>摘要算法简介</strong></a>这篇文章，他把md5值讲得很透彻，但我理解起来一直有一些朦朦胧胧的疑惑没有解开，把这个程序测试通过后，我感觉才真正搞懂了md5值，于是有了这篇文章。</p>
<a id="more"></a>
<p>首先，介绍一下我写的这个程序。</p>
<p>1、递归遍历给定目录下的全部文件，将文件路径存入到一个列表。</p>
<p>2、利用hashlib.md5函数计算每一个有文件的md5值，将文件路径和md5值，存储到字典变量md5_dict。字典变量的结构是｛<strong>“文件路径”：“文件的md5值”</strong>｝，注意字典里存放的是文件的md5值，不是文件所在路径的md5值。</p>
<p>3、每生成一个文件的md5值出来后，先到字典变量dup_dict里面去匹配，如果md5值匹配成功，说明文件内容存在重复，那么将这个出现重复的记录写入字典变量dup_dict。</p>
<p>生成文件路径的函数dirlist如下。    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirlist</span><span class="params">(path, allfile, shortcutfile)</span>:</span> </div><div class="line">    filelist =  os.listdir(path)  </div><div class="line"></div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filelist:  </div><div class="line">        <span class="comment"># 排除隐藏文件</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> filename.startswith(<span class="string">'.'</span>):</div><div class="line">            filepath = os.path.join(path, filename)  </div><div class="line">            		</div><div class="line">            <span class="keyword">if</span> os.path.isdir(filepath):  </div><div class="line">                <span class="comment"># 如果是folder，调用函数自身</span></div><div class="line">                dirlist(filepath, allfile, shortcutfile)  </div><div class="line">            <span class="keyword">elif</span> os.path.isfile(filepath):   </div><div class="line">                <span class="comment"># 如果是file，将文件路径存入allfile列表</span></div><div class="line">                allfile.append(filepath)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 遍历时如果既不是folder也不是file，那么很可能就是替身变量，</span></div><div class="line">                <span class="comment"># 将文件路径存入shortcutfile列表</span></div><div class="line">                <span class="comment"># macOS里面的替身变量，你可以理解成Windows里面的快捷方式</span></div><div class="line">                shortcutfile.append(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            filepath = os.path.join(path, filename)</div><div class="line">            <span class="keyword">if</span> os.path.isdir(filename):  </div><div class="line">                <span class="keyword">print</span> <span class="string">"%s is a hidden folder"</span> %filepath</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">"%s is a hidden file"</span> %filepath</div><div class="line"></div><div class="line">    <span class="keyword">return</span> allfile, shortcutfile</div></pre></td></tr></table></figure>
<p>计算md5值的函数gen_md5如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_md5</span><span class="params">(file_list)</span>:</span></div><div class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> file_list:</div><div class="line"></div><div class="line">        <span class="comment">#得到文件属性</span></div><div class="line">        statinfo=os.stat(file_path)</div><div class="line">        <span class="comment">#文件大小</span></div><div class="line">        sizefile=statinfo.st_size</div><div class="line">        <span class="comment">#创建时间</span></div><div class="line">        createtime=formattime(statinfo.st_ctime)</div><div class="line">        <span class="comment">#修改时间</span></div><div class="line">        changetime=formattime(statinfo.st_mtime)</div><div class="line">        <span class="comment">#浏览时间</span></div><div class="line">        readtime=formattime(statinfo.st_atime)</div><div class="line"></div><div class="line">        <span class="comment"># 给小于20M的文件生成md5值</span></div><div class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; sizefile &lt;= <span class="number">20000000</span>:</div><div class="line"></div><div class="line">            <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">                md5_value = hashlib.md5(fp.read()).hexdigest()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> md5_value <span class="keyword">in</span> md5_dict.values():</div><div class="line">                dup_dict[file_path] = md5_value</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                md5_dict[file_path] = md5_value</div></pre></td></tr></table></figure>
<p>运行结果出来后，我检查dup_dict字典里的记录发现“365c9bfeb7d89244f2ce01c1de44cb85”这个md5值出现了三次，键值对记录如下。</p>
<blockquote>
<p>‘/Users/jacksonshawn/PythonCodes/pythonlearning/flask2/venv/lib/python2.7/site-packages/setuptools-28.8.0.dist-info/INSTALLER’: ‘<strong>365c9bfeb7d89244f2ce01c1de44cb85</strong>‘ </p>
<p>‘/Users/jacksonshawn/PythonCodes/pythonlearning/flask2/venv/lib/python2.7/site-packages/pip-9.0.1.dist-info/top_level.txt’: ‘<strong>365c9bfeb7d89244f2ce01c1de44cb85</strong>‘ </p>
<p> ‘/Users/jacksonshawn/PythonCodes/pythonlearning/flask2/venv/lib/python2.7/site-packages/wheel-0.29.0.dist-info/INSTALLER’: ‘<strong>365c9bfeb7d89244f2ce01c1de44cb85</strong>‘</p>
</blockquote>
<p>通过文件路径查看每一个文件的内容，结果如下。每一个文件的内容都是一个单词“pip”，文件大小均为4字节。可以看出，不同的文件名，只要内容相同，计算出来的md5值是同一个。</p>
<p><img src="/2018/05/03/python-hashlib-md5/md5_dup_file1.jpg" alt="md5 file1"></p>
<p>（图1）</p>
<p><img src="/2018/05/03/python-hashlib-md5/md5_dup_file2.jpg" alt="md5 file2"></p>
<p>（图2）</p>
<p><img src="/2018/05/03/python-hashlib-md5/md5_dup_file3.jpg" alt="md5 file3"></p>
<p>（图3）</p>
<p>原本到这里就可以愉快地发布这篇文章了，但是，好奇的我，脑子里产生一个问题，“在Python3里面计算这个文件的md5值，结果会一样吗？”</p>
<p>我打开虚拟机，在Win7里面创建一个b.txt文件和一个b.docx文件，各自都只有一行内容，一个单词“pip”，然后使用在Python3.6.4环境下计算着这两个文件的md5值。结果出人意料，TXT文件的md5值是<strong>62ad1c2a46c5298f3e2c95d3babf8d0c</strong>，Word文件的md5值是<strong>a6e0e738b4ee07c39b6d87e91a1569a7</strong>，都不是预期的结果。</p>
<p>于是，我陷入了沉思，那些朦朦胧胧的疑惑再次萦绕脑海。“同样的内容，Python2和Python3计算出来的md5值难道不一样吗？”</p>
<p><img src="/2018/05/03/python-hashlib-md5/md5_dup_file4.jpg" alt="md5 file4"></p>
<p>（图4）</p>
<p>网上搜了一大圈，都找不到答案。在微信群里发帖提问，经一个网友提醒，才发现在Win7里面新建的TXT和Word文件，并不是macOS里面的原文件，它们不是同一个东西。macOS里的原文件大小是4字节，而Win7里面的TXT和Word文件分别是3字节和11056字节。这就是md5值不一样的真正原因，即便它们的内容是相同的。</p>
<p><img src="/2018/05/03/python-hashlib-md5/txt_word_file_attribute.jpg" alt="file attribute"></p>
<p>（图5）</p>
<p>直接将macOS里原文件复制到Win7，得到INSTALLER.txt文件，再计算md5值，这次得到的结果就和预期一致了。</p>
<p><img src="/2018/05/03/python-hashlib-md5/md5_dup_file5.jpg" alt="md5 file5"></p>
<p>（图6）</p>
<p>紧接着，我在macOS里面将图1（你选图1、图2、图3任意一个都可以）里的文件，加上一个换行符，计算它的md5值，也得到一个不同于<strong>365c9bfeb7d89244f2ce01c1de44cb85</strong>的结果，很简单，文件内容变了。这下我才真正理解廖雪峰Python教程hashlib那一节里面那段话的含义。md5值的意义主要在于防篡改，哪怕你只改动了一丁点内容，md5值也会发生变化。</p>
<blockquote>
<p>举个例子，你写了一篇文章，内容是一个字符串<code>&#39;how to use python hashlib - by Michael&#39;</code>，并附上这篇文章的摘要是<code>&#39;2d73d4f15c0db7f5ecb321b6a65e5d6d&#39;</code>。如果有人篡改了你的文章，并发表为<code>&#39;how to use python hashlib - by Bob&#39;</code>，你可以一下子指出Bob篡改了你的文章，因为根据<code>&#39;how to use python hashlib - by Bob&#39;</code>计算出的摘要不同于原始文章的摘要。</p>
</blockquote>
<p><strong>结论：</strong></p>
<p>其实，同一个文件或字符，在任何语言、环境里计算出来的md5值都是相同的，因为全世界的MD5摘要算法都一样。在极特殊条件下，md5值会出现碰撞，但它太特殊我们一般遇不到，可以忽略不计。如果对同一个文件或字符，你计算出来的md5值不同，那么肯定是这个文件或字符发生了变化，如同Win7里那个b.txt文件，内容也是“pip”，但实际上和macOS里的INSTALLER并不是同一个文件。</p>
<p><strong>几点补充：</strong></p>
<p>第一，<strong>md5值</strong>和<strong>哈希值</strong>是两个概念，千万别搞混淆。MD5是最常见的一种摘要算法，它计算出来的结果称为md5值，它是一个32位长度的16进制字符串。哈希值是一个整型数字，它主要用于字典查找时比较字典的key值，对于Python来说，每一个可哈希的对象都有一个哈希值，像int、str、unicode、tuple这些对象，都可以计算它们的哈希值，见图7；像list、dict、set这些对象，则没有哈希值，见图8。</p>
<blockquote>
<p><code>hash</code>(<em>object</em>)</p>
<p>Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p>
</blockquote>
<p>上面是Python里面对哈希值下的定义，出处<a href="https://docs.python.org/2.7/library/functions.html#hash" target="_blank" rel="external">Python hash definition</a>。Java语言里面有一个hashCode类型，和Python里面的哈希值是一个意思，它也是一个整型数字。</p>
<p><img src="/2018/05/03/python-hashlib-md5/python_hash_value.jpg" alt="pytho hash value"></p>
<p>（图7）</p>
<p><img src="/2018/05/03/python-hashlib-md5/python_hash_value_2.jpg" alt="python hash value2"></p>
<p>（图8）</p>
<p>第二，dirlist函数里使用到了递归，从打印结果来看，这个递归调用，实现了类似深度优先的效果。当发现是文件时才收集文件路径，是文件夹则调用本身，遍历下一层，循环往复。因此，文件路径深的会先被扫描到allfile列表里面，文件路径浅的后被扫描到。</p>
<p>第三，dirlist函数里面判断文件类型时又一个else分支，满足else分支的文件路径会被写入shortcutfile列表。这个shortcutfile列表存入的都是“替身变量”，在macOS里叫法是“替身变量”，在Windows里面叫法是快捷方式。我在测试中发现，对于实体文件的“替身变量”，计算出来的md5值和原文件的md5值一样；但对于一些软连接“替身变量”，没法计算md5值。这一点，有待日后进一步观察和研究。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 哈希值 </tag>
            
            <tag> md5值 </tag>
            
            <tag> 替身变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UNIX初学者使用手册]]></title>
      <url>/2018/04/28/unix-tutorial-for-beginners/</url>
      <content type="html"><![CDATA[<p>记得“李笑来”曾经说过一句话，互联网时代，大多数公司的服务都是部署在Linux上面，如果一个大学生，努力学习熟练掌握Linux命令操作，在IT行业肯定能找到一份好工作。</p>
<p>这两天看阮一峰老师的博客，他推荐这本“<a href="http://www.ee.surrey.ac.uk/Teaching/Unix/" target="_blank" rel="external">UNIX Tutorial for Beginners</a>”给不熟悉UNIX或Linux操作的朋友。我读了一下，刷新了很多对UNIX和Liunx命令操作的认知。下面是我为读过的章节写的笔记，都是一些我以前不曾了解或认知有误的地方。欢迎大家指正。</p>
<a id="more"></a>
<h1 id="UNIX-Introduction"><a href="#UNIX-Introduction" class="headerlink" title="UNIX Introduction"></a>UNIX Introduction</h1><p>Everything in UNIX is either a file or a process.</p>
<h1 id="UNIX-Tutorial-One"><a href="#UNIX-Tutorial-One" class="headerlink" title="UNIX Tutorial One"></a>UNIX Tutorial One</h1><h2 id="和-符号"><a href="#和-符号" class="headerlink" title=".和..符号"></a>.和..符号</h2><p>在一个目录下使用mkdir创建一个文件夹，使用“ls -a”命令可以看到该文件夹下面有“.”和“..”。这两个点在UNIX里有约定俗成的含义。</p>
<blockquote>
<p>In UNIX, (<strong>.</strong>) means the current directory while (<strong>..</strong>) means the parent of the current directory.</p>
</blockquote>
<p>UNIX文件系统是一个倒置的树状结构，如下。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/tree.gif" alt="UNIX file orgnization"></p>
<p>如果你在文件系统里面迷失，在Shell终端任何一个位置直接输入cd，即可回到当前用户目录。这之前，我一直使用“cd ~”返回当前用户目录。</p>
<blockquote>
<p>Typing cd with no argument always returns you to your home directory.</p>
</blockquote>
<h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>“pwd”命令用来查找当前目录的绝对路径，有点惭愧，现在才知道这个命令的用法。我在mac OS里经常使用两个手指单击、显示简介、复制位置的方式去获取文件夹所在路径，如果早知道这个命令，能节省多少工作量呀。</p>
<h1 id="UNIX-Tutorial-Two"><a href="#UNIX-Tutorial-Two" class="headerlink" title="UNIX Tutorial Two"></a>UNIX Tutorial Two</h1><h2 id="cat和less命令"><a href="#cat和less命令" class="headerlink" title="cat和less命令"></a>cat和less命令</h2><p>“cat”命令可以直接在终端里查看一个文件的内容。</p>
<blockquote>
<p>The command cat can be used to display the contents of a file on the screen.</p>
</blockquote>
<p>“cat”命令可以查看文件内容，这个我是知道的。但“cat”命令一次性将全部文件内容输出到终端，不具备翻页功能，使用起来挺不方便。</p>
<p>这时，你可以使用“less”命令。</p>
<blockquote>
<p>The command less writes the contents of a file onto the screen a page at a time.</p>
</blockquote>
<p>“less”命令使用空格键进行翻页，使用字母“q”退出。通常情况下，我们优先使用“less”而不是“cat”。</p>
<p>此外，查看文件内容，还有“head”和“tail”命令。Pandas包里面的DataFrame文件有非常常用的两个命令就是“head”和“tail”，说不定就是参考UNIX设计的呢。</p>
<blockquote>
<p>The head command writes the first ten lines of a file to the screen.</p>
<p>The tail command writes the last ten lines of a file to the screen.</p>
</blockquote>
<p>但是，请注意，“cat”、“less”、“head”、“tail”都是用来查看文件内容，不是用来查看文件夹的。</p>
<h2 id="less命令查找功能"><a href="#less命令查找功能" class="headerlink" title="less命令查找功能"></a>less命令查找功能</h2><p>此外，在“less”命令中，还可以使用“/”加你要查找的单词进行查找，匹配到的内容会被高亮显示，使用字母“n”跳转到下一个位置。</p>
<blockquote>
<p>In less (i.e. don’t press [q] to quit), type a forward slash <code>[/]</code> followed by the word to search.</p>
<p>less finds and highlights the keyword. Type <code>[n]</code> to search for the next occurrence of the word.</p>
</blockquote>
<h2 id="grep是utility，不是command"><a href="#grep是utility，不是command" class="headerlink" title="grep是utility，不是command"></a>grep是utility，不是command</h2><p>接下来是一个很重要的功能，<strong>grep</strong>。注意，在UNIX系统里面grep不是command，它是utility，我们就称之为功能吧，grep是一个非常强大的查找工具，可以在指定文本里查找内容。我不是非常确定，但感觉grep可能是用C语言编写的一个封装包。</p>
<p>grep有如下几个参数。</p>
<ul>
<li><p>-v display those lines that do NOT match</p>
</li>
<li><p>-n precede each maching line with the line number</p>
</li>
<li>-c print only the total count of matched lines</li>
<li>-i ignore upper/lower case distinctions</li>
</ul>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/unix-grep-command1.jpg" alt="unix grep command1"></p>
<p>（图1:grep操作1）</p>
<p>图1，在weibo.py这个文件中查找session字符，将匹配到的内容直接打印出来。加上-n参数后，显示出session</p>
<p>字符所在行的行号。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/unix-grep-command2.jpg" alt="unix grep command2"></p>
<p>（图2:grep操作2）</p>
<p>图2，在setup.py这个文件中查找python字符，加上-n参数后，显示出python字符所在行的行号。但是加上-in参数后，显示出有5条记录，我们可以看到，参数-i忽略了大小写。如果再加上参数-c，则直接统计python字符在待查找文本中出现的次数。参数-c的优先级最高。使用-v命令则反向查找，查找不包含python字符的记录。</p>
<p>基本用法就是这些，自己动手操作一遍，很快就能掌握。</p>
<h2 id="wc-utility"><a href="#wc-utility" class="headerlink" title="wc utility"></a>wc utility</h2><p>和grep一样，<strong>wc</strong>（word count）也是一个非常有用的utility，它的作用是统计文件中字符的个数及文件的行数。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/unix-wc-command.jpg" alt="unix wc command"></p>
<h1 id="UNIX-Tutorial-Three"><a href="#UNIX-Tutorial-Three" class="headerlink" title="UNIX Tutorial Three"></a>UNIX Tutorial Three</h1><h2 id="UNIX重定向"><a href="#UNIX重定向" class="headerlink" title="UNIX重定向"></a>UNIX重定向</h2><p>在Shell终端，直接输入“cat”命令，然后回车；输入一些内容，按CTRL+D，终端会返回你输入的内容。这种操作有个专业名词叫做Redirection。</p>
<p>我们可以使用“&gt;”将输出内容重定向到文件，可以使用“&gt;&gt;”将输出内容追加到文件，可以使用“&lt;”从文件接收输入内容。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/unix-cat-command1.jpg" alt="unix cat command1"></p>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>使用“|”（vertical bar）符号，可以将多条命令联合在一起使用，将前一个命令的输出作为后一个命令的输入，这个就是管道干的事情。如下图，将三条命令结合在一起使用，非常形象地演示了管道的作用。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/unix-pipe-command1.jpg" alt="unix pipe command1"></p>
<h1 id="UNIX-Tutorial-Five"><a href="#UNIX-Tutorial-Five" class="headerlink" title="UNIX Tutorial Five"></a><a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unix5.html" target="_blank" rel="external">UNIX Tutorial Five</a></h1><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>使用“ls -l”可以查看文件夹或文件的权限。</p>
<p><img src="/2018/04/28/unix-tutorial-for-beginners/folder-permission.gif" alt="unix folder permission"></p>
<p>第一个字符d表示这是一个目录，即文件夹；如果是一个dash（中划线），表示是一个文件；</p>
<p>第二到第四个字符表示<strong>创建者对这个文件夹或文件所拥有的权限</strong>。“rwx”分别表示read、write、execute。三个连在一起，意思是创建者对file1这个文件夹或文件，拥有读、写（包括修改和删除）、执行全部权限，这是最高级别的权限。</p>
<p>第五到第七个字符表示这个<strong>创建者所属群组对这个文件夹或文件所拥有的权限</strong>。Linux和我们熟悉的Windows不一样，它设计的安全权限标准比Windows高。我们被Windows驯化成习惯一个用户全局操作磁盘上所有文件，初来乍到的Linux新手，很容易被这些复杂的组权限搞蒙。这里“rw-”表示具备读、写权限，不具备执行权限。</p>
<p>第八到第十个字符表示<strong>其它群组对这个文件夹或文件所拥有的权限</strong>。“r–”表示只有读权限，没有写和执行权限。</p>
<p>但是！！！我们一定要注意，UNIX系统中，对待文件和文件夹，“rwx”表示的具体含义是有区别的，如下。</p>
<h3 id="Access-rights-on-files"><a href="#Access-rights-on-files" class="headerlink" title="Access rights on files"></a>Access rights on files</h3><ul>
<li>r (or -), indicates read permission (or otherwise), that is, the presence or absence of permission to read and copy the file </li>
<li>w (or -), indicates write permission (or otherwise), that is, the permission (or otherwise) to change a file </li>
<li>x (or -), indicates execution permission (or otherwise), that is, the permission to execute a file, where appropriate </li>
</ul>
<h3 id="Access-rights-on-directories"><a href="#Access-rights-on-directories" class="headerlink" title="Access rights on directories"></a>Access rights on directories</h3><ul>
<li>r allows users to list files in the directory; </li>
<li>w means that users may delete files from the directory or move files into it; </li>
<li>x means the right to access files in the directory. This implies that you may read files in the directory provided you have read permission on the individual files. </li>
</ul>
<p>“r”权限，对文件来说，就是可以打开或者复制；但对于文件夹来说，它的意思是可以使用“l”命令列出文件夹内容。</p>
<p>“w”权限，对文件来说，是可以写入或删除；对于文件夹来说，是可以删除里面的文件或向里面写入文件。</p>
<p>“x”权限，对文件来说，是可以执行这个文件；对于文件夹来说，是可以进入这个文件夹。</p>
<p>这样直白翻译，效果不大好。大家还是直接看原文吧。</p>
<p>单独搞懂“rwx”里面每一个不难理解，但经常在于文件夹权限和文件夹里面的文件权限存在互斥，这种情况可能就比较绕。</p>
<p>比如，你想读文件夹里面的一个文件，即使这个文件具备“r”权限，但如果它的上层文件夹或之上的任何一层文件夹不具备“x”权限的话，这个文件你仍然打不开。</p>
<p>mac OS处理文件权限会灵活一些，Ubuntu的权限管理则比较死板，不小心使用chmod改错权限，很容易搞出问题。</p>
<h1 id="UNIX-Tutorial-Six"><a href="#UNIX-Tutorial-Six" class="headerlink" title="UNIX Tutorial Six"></a>UNIX Tutorial Six</h1><h2 id="df命令查看磁盘空间"><a href="#df命令查看磁盘空间" class="headerlink" title="df命令查看磁盘空间"></a>df命令查看磁盘空间</h2><blockquote>
<p>The df command reports on the space left on the file system.</p>
</blockquote>
<p>使用“df .”和“df -h”都可以查看磁盘空间，但后者可读性更强。</p>
<h2 id="du命令查看当前目录空间"><a href="#du命令查看当前目录空间" class="headerlink" title="du命令查看当前目录空间"></a>du命令查看当前目录空间</h2><blockquote>
<p>The du command outputs the number of kilobyes used by each subdirectory.</p>
</blockquote>
<p>“du -d 1 -h”命令查看当前目录下所有文件夹的大小，-d指深度，后面必须加一个数值，－h表示适合人类阅读的。</p>
<h2 id="gzip压缩文件为-gz格式"><a href="#gzip压缩文件为-gz格式" class="headerlink" title="gzip压缩文件为.gz格式"></a>gzip压缩文件为.gz格式</h2><h2 id="gunzip将-gz文件解压缩"><a href="#gunzip将-gz文件解压缩" class="headerlink" title="gunzip将.gz文件解压缩"></a>gunzip将.gz文件解压缩</h2><h2 id="history命令查看终端操作历史记录"><a href="#history命令查看终端操作历史记录" class="headerlink" title="history命令查看终端操作历史记录"></a>history命令查看终端操作历史记录</h2><p>在C shell终端，使用“!”符号加参数，可以直接调用对应历史命令。</p>
<blockquote>
<p>If you are using the C shell, you can use the exclamation character (!) to recall commands easily.</p>
<p>% !! (recall last command)</p>
<p>% !-3 (recall third most recent command) </p>
<p>% !5 (recall 5th command in list) </p>
<p>% !grep (recall last command starting with grep)</p>
</blockquote>
<p>（未完待续）</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UNIX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04安装Hadoop3.1.0]]></title>
      <url>/2018/04/24/hadoop-install/</url>
      <content type="html"><![CDATA[<p>Ubuntu系统稳定性有点差，今天清理空间后，重新启动无法进入图形界面。考虑到稳定性还有我的MBP磁盘空间不够大，决定在本机搭建Hadoop3.1.0环境。</p>
<p>由于网上，同类型的安装教程很多，我就不去东施效颦，我只把我安装过程中参考的帖子和遇到的异常问题记录下来，以下是全部内容。</p>
<p>Hadoop官方在3.0.0及以后的版本里将一些默认的端口号进行了修改。Issue见<a href="https://issues.apache.org/jira/browse/HDFS-9427" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>Namenode ports: 50470 –&gt; 9871, 50070 –&gt; 9870, 8020 –&gt; 9820<br>Secondary NN ports: 50091 –&gt; 9869, 50090 –&gt; 9868<br>Datanode ports: 50020 –&gt; 9867, 50010 –&gt; 9866, 50475 –&gt; 9865, 50075 –&gt; 9864</p>
</blockquote>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="https://www.jianshu.com/p/0e7f16469d87" target="_blank" rel="external">Mac OS X EI Captain 安装 Hadoop 3.0.0-alpha2</a></p>
</li>
<li><p><a href="https://blog.csdn.net/chenxun_2010/article/details/78238251" target="_blank" rel="external">mac下hadoop环境的搭建以及碰到的坑点</a></p>
</li>
<li><p><a href="https://blog.csdn.net/yechaodechuntian/article/details/44312343" target="_blank" rel="external">Mac OS X Yosemite安装Hadoop 2.6记录</a></p>
</li>
</ul>
<hr>
<p>这两天因工作需要，需要搭建一套Hadoop集群环境。</p>
<p>参照各种帖子，折腾2天，算把Hadoop环境配置起来。中间踩了无数坑，单机模式和伪分布模式（不开启Yarn服务）下WordCount测试都能够成功；集群环境暂时还没配好，随后开始布置。</p>
<p>在这个学习过程中，看到几篇写得不错的技术帖，统一收集整理在此。</p>
<p>PS：Ubuntu16.04下面发现阿里云的源有好几个网址存在问题，换用<a href="https://mirrors.ustc.edu.cn/repogen/" target="_blank" rel="external">中科大的源</a>，明显感觉稳定很多。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://www.cnblogs.com/heavyhe/p/4546880.html" target="_blank" rel="external">Hadoop部署 Ubuntu14.04</a></p>
</li>
<li><p><a href="http://www.powerxing.com/install-hadoop/" target="_blank" rel="external">Hadoop安装教程单机/伪分布式配置Hadoop2.6.0/Ubuntu14.04</a></p>
</li>
<li><p><a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external">Hadoop: Setting up a Single Node Cluster</a></p>
</li>
<li><p><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html" target="_blank" rel="external">史上最详细的Hadoop环境搭建</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/19795366" target="_blank" rel="external">零基础学习 Hadoop 该如何下手？</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/04/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Git命令更改文件夹名称]]></title>
      <url>/2018/04/12/git-rename-file-folder/</url>
      <content type="html"><![CDATA[<p>最近遇到一个问题，在我的博客上点击“DataFrame”标签，程序跳转到“腾讯公益失踪儿童”页面，而不是预期的文章列表页面。</p>
<p><img src="/2018/04/12/git-rename-file-folder/tencent_lost_child_404.jpg" alt="Tencent lost child page"></p>
<p>起初以为这是一个个例，但一番检查之后，发现一共有8个标签（下图红色方框标出）存在这个问题。</p>
<a id="more"></a>
<p><img src="/2018/04/12/git-rename-file-folder/blog_tags_all_404.jpg" alt="all 404 blog tags"></p>
<p>我知道原因是，修改文章时更改标签所致。最近意识到“<strong>很多软件从业者连编程术语中的专业英文名词都写不对</strong>”这件事的严重性之后，我将所有文章中使用的错误标签都做了调整，比如将“Github”修改为“GitHub”、将“SQLALchemy”修改为“SQLAlchemy”、将“Mysql”修改为“MySQL”。它们前者都是错误写法，后者才是官方发布的正确写法。</p>
<p>使用之前错误的标签，比如在tags后面直接输入“Dataframe”，能够返回预期结果。</p>
<p><img src="/2018/04/12/git-rename-file-folder/blog_tags_Dataframe.jpg" alt="correct tag"></p>
<p>定位问题根源，盖因GitHub Repository里面文件夹名称不对，导致无法返回正确结果，这出问题的8个标签，都是同一个情况。</p>
<p><img src="/2018/04/12/git-rename-file-folder/github_blog_tags_Dataframe.jpg" alt="GitHub page blog tags"></p>
<p>一番搜索，发现可以使用<code>git mv oldfolder newfolder</code>操作来修改文件夹名称。由于Mac默认是大小写不敏感（大小写敏感意思是大写字母和小写字母代表不同内容），我们需要使用临时文件名来做转换，得使用<code>git mv foldername tmp &amp;&amp; git mv tmp folderName</code>这种类型操作来修改文件夹名称。</p>
<p>如下图所示，依次对有问题的8个标签进行“git mv”处理。</p>
<p><img src="/2018/04/12/git-rename-file-folder/git_mv_foldername.jpg" alt="Git mv command"></p>
<p>然后，使用“git add”命令，对修改名称之后的文件夹一一更新索引；再然后，使用“git commit”进行提交。</p>
<p><img src="/2018/04/12/git-rename-file-folder/git_add_command.jpg" alt="Git add command"></p>
<p>最后，使用“git push -u origin master”推送到远程仓库。</p>
<p>这样，就解决了GitHub Repository里面文件夹名称不对的问题。</p>
<hr>
<p><strong>2018/04/13补充：</strong></p>
<p>按照上面这样做之后，确实解决了“标签找不到”问题。但第二天使用“Hexo Deploy”后，“标签找不到”问题再次重现。一番排查后，发现根源在于“git默认忽略文件名大小写，文件夹名称大小写变更，git是检测不到的”。参照<a href="http://1mhz.me/2015/hexo-deploy-case-sensitive/" target="_blank" rel="external"><strong>Hexo 部署到 Github Pages 文件夹大小写问题</strong></a>将博客项目下面“.deploy_git/.git/config”这个配置文件里的“ignorecase”值由“true”改为“false”，问题得到彻底解决。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://www.patrick-wied.at/blog/rename-files-and-folders-with-git" target="_blank" rel="external">Rename files and folders with git</a></li>
<li><a href="https://stackoverflow.com/questions/11183788/in-a-git-repository-how-to-properly-rename-a-directory" target="_blank" rel="external">In a Git repository, how to properly rename a directory?</a></li>
<li><a href="https://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git" target="_blank" rel="external">How do I commit case-sensitive only filename changes in Git?</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac MongoDB启动关闭命令]]></title>
      <url>/2018/04/09/mongodb/</url>
      <content type="html"><![CDATA[<p>半年前写过一个爬虫程序，用MongoDB作为持久化工具。今天把之前的爬虫程序整理一番，发现对MongoDB的操作有点生疏，在此做一个整理。</p>
<p>本文只讲解macOS系统下MongoDB的使用方式，版本号是v4.2.8，不涉及Windows或Linux系统，如果存在偏差，请自行查阅相关文档。</p>
<h3 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h3><p>我们知道，mongodb启动的命令是<code>mongod</code>，它有两种方式启动，一是命令行带参数，二是配置文件方式。用命令行带参数启动方式比较简单省事，甚至你直接在终端里输入<code>mongod</code>就可以启动MongoDB服务（注意，这种方式启动成功的前提是已经创建好<code>/data/db</code>目录，并且设置成功相应的权限，<code>/data/db</code>目录是MongoDB默认存放数据的地方，就和MySQL一样数据库里每一条记录最终会存储在硬盘的某一个文件夹下面一样（在MySQL shell里输入<code>show variables like &#39;%datadir%&#39;</code>即可查看数据库对应文件夹的位置）；只不过MongoDB需要自己先定义好）。</p>
<p>一般情况下，都应该使用指定配置文件方式启动。</p>
<ul>
<li><p>命令行方式启动<br>这种方式就是启动的时候不用配置文件，配置文件里的配置项都直接写在命令行上。</p>
<p><code>mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/log/mongodb.log</code></p>
<p>命令行方式比较繁琐，而且需要手动敲一长串参数文件，不常用。</p>
</li>
</ul>
<ul>
<li><p>配置文件方式启动</p>
<p>将默认启动参数以yaml文件格式写到一个配置文件里。使用<code>mongod -f /XXX/mongod.conf</code>方式启动。</p>
</li>
</ul>
<p>下面便是我使用的配置文件，路径我选择使用<code>/usr/local/mongodb/etc/mongod.conf</code>。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># for documentation of all options, see:</span></div><div class="line"><span class="meta">#   http:<span class="comment">//docs.mongodb.org/manual/reference/configuration-options/</span></span></div><div class="line"></div><div class="line"><span class="meta"># where to write logging data.</span></div><div class="line"><span class="symbol"> systemLog:</span></div><div class="line"><span class="symbol">    destination:</span> file</div><div class="line"><span class="symbol">    logAppend:</span> true</div><div class="line"><span class="symbol">    path:</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/mongodb/</span>log/mongodb.log</div><div class="line"></div><div class="line"><span class="meta"># Where and how to store data.</span></div><div class="line"><span class="symbol"> storage:</span></div><div class="line"><span class="symbol">    dbPath:</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/mongodb/</span>data/</div><div class="line"><span class="symbol">    journal:</span></div><div class="line"><span class="symbol">        enabled:</span> true</div><div class="line"></div><div class="line"><span class="meta"># how the process runs</span></div><div class="line"><span class="symbol"> processManagement:</span></div><div class="line"><span class="symbol">    fork:</span> true  <span class="meta"># fork and run in background</span></div><div class="line"><span class="symbol">    pidFilePath:</span> <span class="meta-keyword">/var/</span>run<span class="meta-keyword">/mongodb/</span>mongod.pid  <span class="meta"># location of pidfile</span></div><div class="line"></div><div class="line"><span class="meta"># network interfaces</span></div><div class="line"><span class="symbol"> net:</span></div><div class="line"><span class="symbol">    port:</span> <span class="number">27017</span></div><div class="line"><span class="symbol">    bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  </div><div class="line"></div><div class="line"><span class="symbol"> security:</span></div><div class="line"><span class="symbol">    authorization:</span> enabled</div></pre></td></tr></table></figure>
<p>启动命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -f <span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>etc<span class="regexp">/mongodb.conf</span></div></pre></td></tr></table></figure>
<p>如果启动成功，在浏览器打开<a href="http://localhost:27017" target="_blank" rel="external">http://localhost:27017</a> ，能看到以下提示信息。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">It looks like you are trying <span class="keyword">to</span> access MongoDB <span class="keyword">over</span> HTTP <span class="keyword">on</span> <span class="keyword">the</span> native driver port.</div></pre></td></tr></table></figure>
<h3 id="ReplicaSet模式"><a href="#ReplicaSet模式" class="headerlink" title="ReplicaSet模式"></a>ReplicaSet模式</h3><p>上面使用<strong>单机（Standalone）</strong>模式启动MongoDB，实际生产环境中，单机模式面临着很大的风险，一旦数据库服务出现问题，就会导致线上服务出现异常甚至崩溃，我们需要对MongoDB做相应的主备处理，提高数据库服务的可用性。这就是<strong>复制集（Replica Set）</strong>模式。</p>
<p>Replica Set是一堆mongod实例集合，它们有着同样的数据内容，包含三类角色：</p>
<ol>
<li>主节点（Primary）：接收所有的写请求，然后把修改同步到所有Secondary。一个Replica Set只能有一个Primary节点，当Primary挂掉后，其他Secondary或者Arbiter节点会重新选举出来一个主节点。默认读请求也是发到Primary节点处理的，如需要转发到Secondary需要客户端修改一下连接配置。</li>
<li>副本节点（Secondary）：与主节点保持同样的数据集。当主节点挂掉的时候，参与选举。</li>
<li>仲裁者（Arbiter）：不保存数据，不参与竞选，只参与投票。使用Arbiter可以减轻数据存储的硬件需求，运行Arbiter的机器不需要过高的资源需求，它的作用是当两个Secondary节点投票结果一致时，可以决定哪一个节点胜出升级为Primay节点；很重要的一点是，在生产环境下它和其他数据节点不要部署在同一台机器上。</li>
</ol>
<p>注意，一个自动failover的Replica Set节点数必须为奇数，目的是选举投票的时候要有一个大多数才能进行选主决策。</p>
<p>贴两张图展示一下复制集模式，详细介绍请自行搜索查阅。</p>
<p><img src="/2018/04/09/mongodb/replicaset_1.png" alt=""></p>
<p><img src="/2018/04/09/mongodb/replicaset_2.png" alt=""></p>
<p>复制集模式，需要分别启动3个独立的<code>mongod</code>服务，我创建了一个新文件夹replicaset用于存放3个节点的数据，如下所示。</p>
<p><img src="/2018/04/09/mongodb/replicaset_conf.jpg" style="zoom:50%;"></p>
<p>在<code>/var/run</code>目录下创建replicaset文件夹，在里面存放3个节点各自对应的PID文件。</p>
<p><img src="/2018/04/09/mongodb/replicaset_pid.jpg" style="zoom:50%;"></p>
<p>下面列出其中一个节点rs0的配置文件信息，rs1和rs2参照rs0配置即可，端口号依次用27017、27018、27019。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># where to write logging data.</span></div><div class="line"><span class="symbol"> systemLog:</span></div><div class="line"><span class="symbol">    destination:</span> file</div><div class="line"><span class="symbol">    logAppend:</span> true</div><div class="line"><span class="symbol">    path:</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/mongodb/</span>replicaset<span class="meta-keyword">/rs0/</span>log/mongodb.log</div><div class="line"></div><div class="line"><span class="meta"># Where and how to store data.</span></div><div class="line"><span class="symbol"> storage:</span></div><div class="line"><span class="symbol">    dbPath:</span> <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/mongodb/</span>replicaset<span class="meta-keyword">/rs0/</span>data/</div><div class="line"><span class="symbol">    journal:</span></div><div class="line"><span class="symbol">        enabled:</span> true</div><div class="line"></div><div class="line"><span class="meta"># how the process runs</span></div><div class="line"><span class="symbol"> processManagement:</span></div><div class="line"><span class="symbol">    fork:</span> true  <span class="meta"># fork and run in background</span></div><div class="line"><span class="symbol">    pidFilePath:</span> <span class="meta-keyword">/var/</span>run<span class="meta-keyword">/mongodb/</span>replicaset<span class="meta-keyword">/rs0/</span>mongod.pid  <span class="meta"># location of pidfile</span></div><div class="line"></div><div class="line"><span class="meta"># network interfaces</span></div><div class="line"><span class="symbol"> net:</span></div><div class="line"><span class="symbol">    port:</span> <span class="number">27017</span></div><div class="line"><span class="symbol">    bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"></div><div class="line"><span class="symbol"> security:</span></div><div class="line"><span class="symbol">    authorization:</span> disabled</div><div class="line"></div><div class="line"><span class="symbol"> replication:</span></div><div class="line"><span class="symbol">   oplogSizeMB:</span> <span class="number">64</span></div><div class="line"><span class="symbol">   replSetName:</span> rstest</div></pre></td></tr></table></figure>
<p>打开终端，依次执行下面3条命令，即启动了3个mongod后台服务。</p>
<p><code>mongod -f /usr/local/mongodb/replicaset/rs0/etc/mongod.conf</code></p>
<p><code>mongod -f /usr/local/mongodb/replicaset/rs1/etc/mongod.conf</code></p>
<p><code>mongod -f /usr/local/mongodb/replicaset/rs2/etc/mongod.conf</code></p>
<h4 id="1-ReplicaSet初始化"><a href="#1-ReplicaSet初始化" class="headerlink" title="1. ReplicaSet初始化"></a>1. ReplicaSet初始化</h4><p>在终端输入mongo（不指定节点IP地址和端口号，默认等同于输入mongo 127.0.0.1:27017），输入<code>rs.status()</code>命令，可以看到replset当前没有初始化。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> rs.status()</span></div><div class="line">&#123;</div><div class="line">	"ok" : 0,</div><div class="line">	"errmsg" : "no replset config has been received",</div><div class="line">	"code" : 94,</div><div class="line">	"codeName" : "NotYetInitialized"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整理如下replset配置信息，执行<code>rs.initiate(conf)</code>命令，返回<code>{ &quot;ok&quot; : 1 }</code>表示节点部署成功。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">conf = &#123;</div><div class="line">    <span class="string">"_id"</span> : <span class="string">"rstest"</span>,</div><div class="line">    <span class="string">"members"</span> : [</div><div class="line">        &#123; <span class="string">"_id"</span> : <span class="number">0</span>,  <span class="string">"host"</span> : <span class="string">"127.0.0.1:27017"</span> &#125;,</div><div class="line">        &#123; <span class="string">"_id"</span> : <span class="number">1</span>,  <span class="string">"host"</span> : <span class="string">"127.0.0.1:27018"</span> &#125;,</div><div class="line">        &#123; <span class="string">"_id"</span> : <span class="number">2</span>,  <span class="string">"host"</span> : <span class="string">"127.0.0.1:27019"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>部署成功后，会自动选举一个Primay节点。</p>
<p>输入<code>rs.status()</code>查看状态（我用<code>......</code>省略掉无效内容），可以看到members数组里有三个成员，<code>stateStr</code>代表节点的类型；<code>health</code>代表节点的状态，1表示健康；注意看27018和27019两个节点里有<code>syncingTo</code>这个参数，表示它们与27017保持同步。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"set"</span> : <span class="string">"rstest"</span>,</div><div class="line">	<span class="string">"date"</span> : ISODate(<span class="string">"2020-07-08T14:37:09.527Z"</span>),</div><div class="line">	<span class="string">"myState"</span> : <span class="number">1</span>,</div><div class="line">	......</div><div class="line"><span class="string">"members"</span> : [</div><div class="line">		&#123;</div><div class="line">			<span class="string">"_id"</span> : <span class="number">0</span>,</div><div class="line">			<span class="string">"name"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"health"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"state"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"stateStr"</span> : <span class="string">"PRIMARY"</span>,</div><div class="line">			<span class="string">"uptime"</span> : <span class="number">100</span>,</div><div class="line">			<span class="string">"optime"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594259842</span>, <span class="number">1</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-09T01:57:22Z"</span>),</div><div class="line">			<span class="string">"syncingTo"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncSourceId"</span> : <span class="number">-1</span>,</div><div class="line">			<span class="string">"infoMessage"</span> : <span class="string">"could not find member to sync from"</span>,</div><div class="line">			<span class="string">"electionTime"</span> : Timestamp(<span class="number">1594259802</span>, <span class="number">1</span>),</div><div class="line">			<span class="string">"electionDate"</span> : ISODate(<span class="string">"2020-07-09T01:56:42Z"</span>),</div><div class="line">			<span class="string">"configVersion"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"self"</span> : <span class="literal">true</span>,</div><div class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="string">"_id"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"name"</span> : <span class="string">"127.0.0.1:27018"</span>,</div><div class="line">			<span class="string">"health"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"state"</span> : <span class="number">2</span>,</div><div class="line">			<span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</div><div class="line">			<span class="string">"uptime"</span> : <span class="number">55</span>,</div><div class="line">			<span class="string">"optime"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594259842</span>, <span class="number">1</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDurable"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594259842</span>, <span class="number">1</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-09T01:57:22Z"</span>),</div><div class="line">			<span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-09T01:57:22Z"</span>),</div><div class="line">			<span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-09T01:57:24.583Z"</span>),</div><div class="line">			<span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-09T01:57:25.341Z"</span>),</div><div class="line">			<span class="string">"pingMs"</span> : NumberLong(<span class="number">0</span>),</div><div class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncingTo"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"syncSourceId"</span> : <span class="number">0</span>,</div><div class="line">			<span class="string">"infoMessage"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"configVersion"</span> : <span class="number">1</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="string">"_id"</span> : <span class="number">2</span>,</div><div class="line">			<span class="string">"name"</span> : <span class="string">"127.0.0.1:27019"</span>,</div><div class="line">			<span class="string">"health"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"state"</span> : <span class="number">2</span>,</div><div class="line">			<span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</div><div class="line">			<span class="string">"uptime"</span> : <span class="number">55</span>,</div><div class="line">			<span class="string">"optime"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594259842</span>, <span class="number">1</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDurable"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594259842</span>, <span class="number">1</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-09T01:57:22Z"</span>),</div><div class="line">			<span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-09T01:57:22Z"</span>),</div><div class="line">			<span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-09T01:57:24.583Z"</span>),</div><div class="line">			<span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-09T01:57:25.340Z"</span>),</div><div class="line">			<span class="string">"pingMs"</span> : NumberLong(<span class="number">0</span>),</div><div class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncingTo"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"syncSourceId"</span> : <span class="number">0</span>,</div><div class="line">			<span class="string">"infoMessage"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"configVersion"</span> : <span class="number">1</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li><p>如果以上部署不成功，将3个节点<code>dbPath</code>文件夹下面的内容清空重新部署即可。</p>
</li>
<li><p>上述操作都在27017这个节点的<code>mongo</code>这个shell里完成。</p>
</li>
</ol>
<p>如果第一次只部署一个节点，第一个节点会默认设置为Primary节点；后续再添加的节点，会自动成为Secondary节点。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">conf = &#123;</div><div class="line">    <span class="string">"_id"</span> : <span class="string">"rstest"</span>,</div><div class="line">    <span class="string">"members"</span> : [</div><div class="line">        &#123; <span class="string">"_id"</span> : 0,  <span class="string">"host"</span> : <span class="string">"127.0.0.1:27017"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>登录一个<code>mongo终端</code>（默认使用27017），执行<code>rs.initiate(conf)</code>成功后。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"set"</span> : <span class="string">"rstest"</span>,</div><div class="line">	<span class="string">"date"</span> : ISODate(<span class="string">"2020-07-09T02:13:29.964Z"</span>),</div><div class="line">	<span class="string">"myState"</span> : <span class="number">1</span>,</div><div class="line">	<span class="string">"term"</span> : NumberLong(<span class="number">1</span>),</div><div class="line">	<span class="string">"syncingTo"</span> : <span class="string">""</span>,</div><div class="line">	<span class="string">"syncSourceHost"</span> : <span class="string">""</span>,</div><div class="line">	<span class="string">"syncSourceId"</span> : <span class="number">-1</span>,</div><div class="line">	......</div><div class="line">	<span class="string">"members"</span> : [</div><div class="line">		&#123;</div><div class="line">			<span class="string">"_id"</span> : <span class="number">0</span>,</div><div class="line">			<span class="string">"name"</span> : <span class="string">"127.0.0.1:27017"</span>,</div><div class="line">			<span class="string">"health"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"state"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"stateStr"</span> : <span class="string">"PRIMARY"</span>,</div><div class="line">			<span class="string">"uptime"</span> : <span class="number">327</span>,</div><div class="line">			<span class="string">"optime"</span> : &#123;</div><div class="line">				<span class="string">"ts"</span> : Timestamp(<span class="number">1594260802</span>, <span class="number">7</span>),</div><div class="line">				<span class="string">"t"</span> : NumberLong(<span class="number">1</span>)</div><div class="line">			&#125;,</div><div class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-09T02:13:22Z"</span>),</div><div class="line">			<span class="string">"syncingTo"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">""</span>,</div><div class="line">			<span class="string">"syncSourceId"</span> : <span class="number">-1</span>,</div><div class="line">			<span class="string">"infoMessage"</span> : <span class="string">"could not find member to sync from"</span>,</div><div class="line">			<span class="string">"electionTime"</span> : Timestamp(<span class="number">1594260802</span>, <span class="number">2</span>),</div><div class="line">			<span class="string">"electionDate"</span> : ISODate(<span class="string">"2020-07-09T02:13:22Z"</span>),</div><div class="line">			<span class="string">"configVersion"</span> : <span class="number">1</span>,</div><div class="line">			<span class="string">"self"</span> : <span class="literal">true</span>,</div><div class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再依次执行<code>rs.add(&quot;127.0.0.1:27018&quot;)</code>和<code>rs.add(&quot;127.0.0.1:27019&quot;)</code>将另外两个节点加入<code>rstest</code>这个复制集，也可以得到和上面相同的结果。</p>
<h4 id="2-验证ReplicaSet部署结果"><a href="#2-验证ReplicaSet部署结果" class="headerlink" title="2. 验证ReplicaSet部署结果"></a>2. 验证ReplicaSet部署结果</h4><p>进入Primary节点，写入数据：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rstest:PRIMARY&gt; use test</div><div class="line">switched to db test</div><div class="line">rstest:PRIMARY&gt; show collections</div><div class="line">rstest:PRIMARY&gt; db.test.insert(&#123;'name': 'jackson'&#125;)</div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line">rstest:PRIMARY&gt; show collections</div><div class="line">test</div><div class="line">rstest:PRIMARY&gt; db.test.find()</div><div class="line">&#123; "_id" : ObjectId("5f06e0a7051a1b4f12f407bb"), "name" : "jackson" &#125;</div></pre></td></tr></table></figure>
<p>进入Secondary节点，查看数据：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rstest:SECONDARY&gt; rs.slaveOk()</div><div class="line">rstest:SECONDARY&gt; use test</div><div class="line">switched to db test</div><div class="line">rstest:SECONDARY&gt; show collections</div><div class="line">test</div><div class="line">rstest:SECONDARY&gt; db.test.find()</div><div class="line">&#123; "_id" : ObjectId("5f06e0a7051a1b4f12f407bb"), "name" : "jackson" &#125;</div></pre></td></tr></table></figure>
<h4 id="3-ReplicaSet-pymongo连接测试"><a href="#3-ReplicaSet-pymongo连接测试" class="headerlink" title="3. ReplicaSet pymongo连接测试"></a>3. ReplicaSet pymongo连接测试</h4><p>MongoDB连接字符串：</p>
<p>对于单机模式下的数据库连接，使用<code>mongo://127.0.0.1:27017/test</code>进行连接；</p>
<p>对于复制集模式，除了上面的方式外，也可以使用</p>
<p><code>mongodb://127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019/test?replicaSet=rstest</code>进行连接。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb://[<span class="string">username:password@</span>]host1[<span class="string">:port1</span>][<span class="symbol">,host2[:port2</span>],...[<span class="string">,hostN[:portN</span>]]][<span class="string">/[database</span>][<span class="symbol">?options</span>]]</div></pre></td></tr></table></figure>
<p>测试代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">测试读取replicaset数据</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="comment"># client = pymongo.MongoClient('localhost',27019)</span></div><div class="line">client = pymongo.MongoClient(<span class="string">'mongodb://127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019/test?replicaSet=rstest'</span>)</div><div class="line"></div><div class="line">db = client[<span class="string">'test'</span>]</div><div class="line">table = db[<span class="string">'test'</span>]</div><div class="line"></div><div class="line">content = [item <span class="keyword">for</span> item <span class="keyword">in</span> table.find()]</div><div class="line">print(<span class="string">'content:'</span>, content)</div></pre></td></tr></table></figure>
<h4 id="4-关闭方法"><a href="#4-关闭方法" class="headerlink" title="4. 关闭方法"></a>4. 关闭方法</h4><p>关闭方法：</p>
<ol>
<li><p>使用./mongo进入shell控制台，输入use admin，然后输入db.shutdownServer()关闭服务。</p>
</li>
<li><p>直接kill进程号</p>
</li>
</ol>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/u010311313/article/details/46948995" target="_blank" rel="external">MongoDB安装、配置、启动（MAC）</a></li>
<li><a href="http://www.imooc.com/article/22733" target="_blank" rel="external">Mac环境下安装和配置MongoDB</a></li>
<li><a href="http://api.mongodb.com/python/current/tutorial.html" target="_blank" rel="external">MongoDB Tutorial</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将Numpy datetime64类型日期进行格式转换]]></title>
      <url>/2018/04/06/convert-pandas-dataframe-type/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/06/convert-pandas-dataframe-type/goran-ivos-343495-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/photos/_yBEyYR8wps?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Goran Ivos</a> on <a href="https://unsplash.com/search/photos/code?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>今天使用Tushare获取个股的bar数据时，遇到这样一个问题。获取数据写入MySQL后，表里面date字段显示带有“00:00:00”格式，而且字段类型为datetime，如下图所示。 </p>
<p><img src="/2018/04/06/convert-pandas-dataframe-type/mysql_bar.jpg" alt=""></p>
<p>这或许没有什么问题，但和我预期的结果有差异，我预期date字段的数据类型是date，不希望它是datetime。并且，我不想date字段的值里面带有“00:00:00”这些内容。</p>
<p>排查原因，最后发现是Tushare包里面bar函数，获取到数据后，通过Pandas.to_datetime函数，将日期字段转换为带“00:00:00”格式的日期值。</p>
<p>见trading.py程序里面第861行，如下所示。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data[<span class="string">'datetime'</span>] = pd.to_datetime(data[<span class="string">'datetime'</span>])</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>起初想直接修改这行代码，让它不返回带“00:00:00”格式的数据，有点遗憾，试过几个方法，都没能成功。在数据源头下手，其实是最好的方法，但目前功力不够，只能采用其它方法。</p>
<p>生成bar数据的原始代码如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_bar</span><span class="params">(code,</span></span></div><div class="line"><span class="function"><span class="params">              start_date=None,</span></span></div><div class="line"><span class="function"><span class="params">              end_date=None)</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    store_bar:获取指定个股成交明细数据</span></div><div class="line"><span class="string">    """</span>    </div><div class="line">    </div><div class="line">    df_bar = bar(code,</div><div class="line">                 start_date=start_date,</div><div class="line">                 end_date=end_date)</div><div class="line"></div><div class="line">    df_bar = df_bar.loc[:,[</div><div class="line">                        <span class="string">'code'</span>,</div><div class="line">                        <span class="string">'open'</span>,</div><div class="line">                        <span class="string">'close'</span>,</div><div class="line">                        <span class="string">'high'</span>,</div><div class="line">                        <span class="string">'low'</span>,</div><div class="line">                        <span class="string">'vol'</span>,</div><div class="line">                        <span class="string">'amount'</span>,</div><div class="line">                        <span class="string">'tor'</span>,</div><div class="line">                        <span class="string">'vr'</span>,</div><div class="line">                        <span class="string">'ma5'</span>,</div><div class="line">                        <span class="string">'ma10'</span>,</div><div class="line">                        <span class="string">'ma20'</span>,</div><div class="line">                        <span class="string">'ma60'</span></div><div class="line">                        ]]</div><div class="line">                                </div><div class="line">    <span class="comment"># 将DataFrame的index转换成列'date'</span></div><div class="line">    df_bar[<span class="string">'date'</span>] = df_bar.index</div><div class="line">    </div><div class="line">    <span class="comment"># 设置索引值  </span></div><div class="line">    df_bar = df_bar.set_index([<span class="string">'date'</span>,<span class="string">'code'</span>], </div><div class="line">                              drop=<span class="keyword">True</span>,</div><div class="line">                              verify_integrity=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    dict_bar =&#123;</div><div class="line">                <span class="string">'code'</span>: VARCHAR(df_bar.index.</div><div class="line">                               get_level_values(<span class="string">'code'</span>).str.len().max())</div><div class="line">              &#125;</div><div class="line">    </div><div class="line">    write_records_into_mysql(df_bar, </div><div class="line">                             <span class="string">'bar'</span>,</div><div class="line">                             dtype=dict_bar)</div><div class="line"></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="comment">#--------------- 存储bar数据到数据库 -----------------------       </span></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM begin"</span></div><div class="line">    store_bar(<span class="string">'300223'</span>)  </div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM end"</span></div></pre></td></tr></table></figure>
<p>其它方法，就只能是，生成带“00:00:00”格式的数据后，将其进行类型转换或数据拆分。</p>
<p>方法一，进行类型转换。</p>
<p>我们知道数据库里面“2018-04-04 00:00:00”这种格式的数据，属于Numpy的datetime64类型。因此我们的思路是先将其转换为Python自带的datetime类型，然后提取YY-MM-DD部分。以下是采取方法一后的程序代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_bar</span><span class="params">(code,</span></span></div><div class="line"><span class="function"><span class="params">              start_date=None,</span></span></div><div class="line"><span class="function"><span class="params">              end_date=None)</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    store_bar:获取指定个股成交明细数据</span></div><div class="line"><span class="string">    """</span>    </div><div class="line">    </div><div class="line">    df_bar = bar(code,</div><div class="line">                 start_date=start_date,</div><div class="line">                 end_date=end_date)</div><div class="line"></div><div class="line">    df_bar = df_bar.loc[:,[</div><div class="line">                        <span class="string">'code'</span>,</div><div class="line">                        <span class="string">'open'</span>,</div><div class="line">                        <span class="string">'close'</span>,</div><div class="line">                        <span class="string">'high'</span>,</div><div class="line">                        <span class="string">'low'</span>,</div><div class="line">                        <span class="string">'vol'</span>,</div><div class="line">                        <span class="string">'amount'</span>,</div><div class="line">                        <span class="string">'tor'</span>,</div><div class="line">                        <span class="string">'vr'</span>,</div><div class="line">                        <span class="string">'ma5'</span>,</div><div class="line">                        <span class="string">'ma10'</span>,</div><div class="line">                        <span class="string">'ma20'</span>,</div><div class="line">                        <span class="string">'ma60'</span></div><div class="line">                        ]]</div><div class="line">                                </div><div class="line">    <span class="comment"># 将DataFrame的index转换成列'date'</span></div><div class="line">    df_bar[<span class="string">'date'</span>] = df_bar.index</div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    to_pydatetime函数将DatetimeIndex类型转换为array类型，把DataFrame的dtype从</span></div><div class="line"><span class="string">    datetime64转换为了object，然后使用apply函数只获取'%Y-%m-%d'格式，即将index字段</span></div><div class="line"><span class="string">    里面的时间参数去掉了。</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    转换前:</span></div><div class="line"><span class="string">    DatetimeIndex(['2018-04-04', '2018-04-03', '2018-04-02', '2018-03-30',</span></div><div class="line"><span class="string">               '2018-03-29', '2018-03-28', '2018-03-27', '2018-03-26',</span></div><div class="line"><span class="string">               '2018-03-23', '2018-03-22',</span></div><div class="line"><span class="string">               ...</span></div><div class="line"><span class="string">               '2011-06-14', '2011-06-13', '2011-06-10', '2011-06-09',</span></div><div class="line"><span class="string">               '2011-06-08', '2011-06-07', '2011-06-03', '2011-06-02',</span></div><div class="line"><span class="string">               '2011-06-01', '2011-05-31'],</span></div><div class="line"><span class="string">              dtype='datetime64[ns]', name=u'datetime', length=1441, freq=None)</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    转换后:</span></div><div class="line"><span class="string">    array([datetime.datetime(2018, 4, 4, 0, 0),</span></div><div class="line"><span class="string">       datetime.datetime(2018, 4, 3, 0, 0),</span></div><div class="line"><span class="string">       datetime.datetime(2018, 4, 2, 0, 0), ...,</span></div><div class="line"><span class="string">       datetime.datetime(2011, 6, 2, 0, 0),</span></div><div class="line"><span class="string">       datetime.datetime(2011, 6, 1, 0, 0),</span></div><div class="line"><span class="string">       datetime.datetime(2011, 5, 31, 0, 0)], dtype=object)</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    参考：</span></div><div class="line"><span class="string">    https://blog.csdn.net/dm_vincent/article/details/48696857</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    """</span></div><div class="line">    </div><div class="line">    <span class="comment"># 第一种方法，将Numpy的datetime64类型先转换为Python里面的datetime类型，</span></div><div class="line">    <span class="comment"># 再使用函数进行格式化，只提取我们需要的YY:MM:DD部分</span></div><div class="line">    df_bar[<span class="string">'date'</span>] = df_bar.index.to_pydatetime()</div><div class="line">    </div><div class="line">    <span class="comment"># 提取YY-MM-DD部分</span></div><div class="line">    df_bar[<span class="string">'date'</span>] = df_bar[<span class="string">'date'</span>].apply(<span class="keyword">lambda</span> x: x.strftime(<span class="string">'%Y-%m-%d'</span>))</div><div class="line">   </div><div class="line">    df_bar = df_bar.set_index([<span class="string">'date'</span>,<span class="string">'code'</span>], </div><div class="line">                              drop=<span class="keyword">True</span>,</div><div class="line">                              verify_integrity=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    dict_bar =&#123;</div><div class="line">                <span class="comment"># 方法一，需要添加date字段</span></div><div class="line">                <span class="comment"># 将'date'字段转换为str类型后，必须指定其长度，否则报1170错误，转换后'date'字段</span></div><div class="line">                <span class="comment"># 变成一个VARCHAR类型，不再是date类型</span></div><div class="line">                <span class="string">'date'</span>:VARCHAR(df_bar.index.</div><div class="line">                               get_level_values(<span class="string">'date'</span>).str.len().max()),</div><div class="line">                <span class="string">'code'</span>: VARCHAR(df_bar.index.</div><div class="line">                               get_level_values(<span class="string">'code'</span>).str.len().max())</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">    write_records_into_mysql(df_bar, </div><div class="line">                             <span class="string">'bar'</span>,</div><div class="line">                             dtype=dict_bar)</div><div class="line"></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="comment">#--------------- 存储bar数据到数据库 -----------------------       </span></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM begin"</span></div><div class="line">    store_bar(<span class="string">'300223'</span>)  </div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM end"</span></div></pre></td></tr></table></figure>
<p>采用这种方法，能够解决问题，但生成出来的数据如下图所示，date字段它的类型变成了VARCHAR。并且，对DataFrame的index使用to_pydatetime进行类型转换，以及将date转换为VARCHAR类型，两步操作都挺影响性能。</p>
<p><img src="/2018/04/06/convert-pandas-dataframe-type/mysql_bar_right_1.jpg" alt=""></p>
<p>方法二，进行数据拆分。</p>
<p>将Numpy的datetime64拆分为两个列date和time，date字段存放日期，time字段存放时间。以下是采取方法二后的程序代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_bar</span><span class="params">(code,</span></span></div><div class="line"><span class="function"><span class="params">              start_date=None,</span></span></div><div class="line"><span class="function"><span class="params">              end_date=None)</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    store_bar:获取指定个股成交明细数据</span></div><div class="line"><span class="string">    """</span>    </div><div class="line">    </div><div class="line">    df_bar = bar(code,</div><div class="line">                 start_date=start_date,</div><div class="line">                 end_date=end_date)</div><div class="line"></div><div class="line">    df_bar = df_bar.loc[:,[</div><div class="line">                        <span class="string">'code'</span>,</div><div class="line">                        <span class="string">'open'</span>,</div><div class="line">                        <span class="string">'close'</span>,</div><div class="line">                        <span class="string">'high'</span>,</div><div class="line">                        <span class="string">'low'</span>,</div><div class="line">                        <span class="string">'vol'</span>,</div><div class="line">                        <span class="string">'amount'</span>,</div><div class="line">                        <span class="string">'tor'</span>,</div><div class="line">                        <span class="string">'vr'</span>,</div><div class="line">                        <span class="string">'ma5'</span>,</div><div class="line">                        <span class="string">'ma10'</span>,</div><div class="line">                        <span class="string">'ma20'</span>,</div><div class="line">                        <span class="string">'ma60'</span></div><div class="line">                        ]]</div><div class="line">                                </div><div class="line">    <span class="comment"># 将DataFrame的index转换成列'date'</span></div><div class="line">    df_bar[<span class="string">'date'</span>] = df_bar.index</div><div class="line">    </div><div class="line">    <span class="comment"># 第二种方法，使用split将Numpy的datetime64类型拆分为date和time两个字段，这样存入MySQL里面的</span></div><div class="line">    <span class="comment"># HH:MM:SS就会剥离到time字段了</span></div><div class="line">    df_bar[[<span class="string">'date'</span>,<span class="string">'time'</span>]] = df_bar[<span class="string">'date'</span>].apply(</div><div class="line">            <span class="keyword">lambda</span> x: pd.Series([i <span class="keyword">for</span> i <span class="keyword">in</span> str(x).split(<span class="string">" "</span>)]))</div><div class="line">          </div><div class="line">    df_bar = df_bar.set_index([<span class="string">'date'</span>,<span class="string">'code'</span>], </div><div class="line">                              drop=<span class="keyword">True</span>,</div><div class="line">                              verify_integrity=<span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    dict_bar =&#123;</div><div class="line">               </div><div class="line">                <span class="string">'code'</span>: VARCHAR(df_bar.index.</div><div class="line">                               get_level_values(<span class="string">'code'</span>).str.len().max()),</div><div class="line">                <span class="comment"># 方法二，需要设置date和time类型</span></div><div class="line">                <span class="string">'date'</span>: Date,</div><div class="line">                <span class="string">'time'</span>: Time</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">    write_records_into_mysql(df_bar, </div><div class="line">                             <span class="string">'bar'</span>,</div><div class="line">                             dtype=dict_bar)</div><div class="line"></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="comment">#------------------- 存储bar数据到数据库 ---------------------       </span></div><div class="line"><span class="comment">#----------------------------------------------------------        </span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM begin"</span></div><div class="line">    store_bar(<span class="string">'300223'</span>)  </div><div class="line">    <span class="keyword">print</span> <span class="string">"PGM end"</span></div></pre></td></tr></table></figure>
<p>方法二生成结果如下图所示，效果比方法一要好，生成出来的date字段是预期的date类型，额外多出来的time字段，完全可以删除。</p>
<p><img src="/2018/04/06/convert-pandas-dataframe-type/mysql_bar_right_2.jpg" alt=""></p>
<p>这个问题可能根本不是一个问题，因为date字段包含“00:00:00”格式，并没有导致程序出错；也不是说date字段包含“00:00:00”格式，数据就无法使用，只是我单纯觉得datetime类型没有date类型好、包含“00:00:00”格式的内容不易于理解，这两点不符合我预期才做出的修改。</p>
<p>如果从源头出发，可能会有更好的解决办法，以后找到方法再做补充。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://www.jianshu.com/p/4ece5843d383" target="_blank" rel="external">Pandas 将“字符类型的日期列”转化成“时间戳索引（DatetimeIndex）”</a></li>
<li><a href="https://blog.csdn.net/dm_vincent/article/details/48696857" target="_blank" rel="external">[Pandas] 转换DatetimeIndex为一个日期字符串的Series</a></li>
<li><a href="https://stackoverflow.com/questions/13703720/converting-between-datetime-timestamp-and-datetime64" target="_blank" rel="external">Converting between datetime, Timestamp and datetime64</a></li>
<li><a href="https://docs.scipy.org/doc/Numpy/reference/arrays.datetime.html" target="_blank" rel="external">Datetimes and Timedeltas</a></li>
<li><a href="https://blog.csdn.net/qimiejia5584/article/details/78565953" target="_blank" rel="external">编码格式处理、文件或dataFrame的操作</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Tushare </tag>
            
            <tag> Numpy </tag>
            
            <tag> MySQL </tag>
            
            <tag> DataFrame </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[成功解决pandas.DataFrame.to_sql写入MySQL报错1170问题!]]></title>
      <url>/2018/04/02/to-sql-error-fixed/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/02/to-sql-error-fixed/nghia-le-57365-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/photos/V3DokM1NQcs?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Nghia Le</a> on <a href="https://unsplash.com/search/photos/victory?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>上周五遇到pandas.DataFrame.to_sql写入Mysql数据库报错1170问题（详见：<a href="/2018/03/30/pandas-dataframe-to-sql-error/">pandas.DataFrame.to_sql写入MySQL报错1170</a>），卡了我一整天；周六联系<a href="https://github.com/jimmysoa" target="_blank" rel="external">Tushare作者米哥</a>，在用户交流群里，发帖求助，米哥给了一些建议，我尝试了一下，报错依然存在；周日查<a href="http://docs.sqlalchemy.org/en/latest/" target="_blank" rel="external">SQLAlchemy Reference</a>，在想是不是哪个参数没用对，看得要吐血了还是没有眉目；晚上和一个朋友聊天，他说他现在只用PostgreSQL，完全不用MySQL……</p>
<p>这句话给了我灵感，我把数据库换成PostgreSQL，结果会怎样？</p>
<p>上午来公司，安装PostgreSQL，熟悉语法，配置完后，拿原来代码直接一跑，我靠，直接成功。PostgreSQL没有像MySQL那样，创建索引时要求TEXT类型必须指定长度，我心里暗爽，即使MySQL报错1170问题无法解决，我可以用PostgreSQL继续完成我的股票分析大业啊。</p>
<a id="more"></a>
<p>接着进行后面的测试，在测试to_sql的if_exists参数时，发现了问题。这是之前的“write_records_into_mysql”函数，出错的版本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_records_into_mysql</span><span class="params">(df,</span></span></div><div class="line"><span class="function"><span class="params">                             table_name,</span></span></div><div class="line"><span class="function"><span class="params">                             conn=engine,</span></span></div><div class="line"><span class="function"><span class="params">                             if_exists=<span class="string">'replace'</span>,</span></span></div><div class="line"><span class="function"><span class="params">                             dtype=None)</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** write_records_into_mysql参数if_exists是 ***:"</span>,if_exists</div><div class="line">        df.to_sql(table_name,</div><div class="line">                  conn,</div><div class="line">                  if_exists=<span class="string">'replace'</span>,</div><div class="line">                  dtype=<span class="keyword">None</span></div><div class="line">                  )</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'error'</span>,</div><div class="line">                  e)    </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'success'</span>)</div></pre></td></tr></table></figure>
<p>（封装了to_sql的write_records_into_mysql函数）</p>
<p>下面是调用“write_records_into_mysql”函数的主程序。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dict_k_data =&#123;</div><div class="line">        <span class="string">'code'</span>:VARCHAR(k_data_by_code.index.</div><div class="line">                       get_level_values(<span class="string">'code'</span>).str.len().max())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">write_records_into_mysql(k_data_by_code, </div><div class="line">                         <span class="string">'k_data'</span>,</div><div class="line">                         if_exists=<span class="string">'append'</span>,</div><div class="line">                         dtype=dict_k_data</div><div class="line">                         )</div></pre></td></tr></table></figure>
<p>（调用write_records_into_mysql函数的主程序）</p>
<p>测试中发现，在主程序中调用“write_records_into_mysql”函数时，当设置默认参数if_exists为‘append’时，写入到PostgreSQL里的数据并没有“追加”到原来的数据后面。</p>
<p><img src="/2018/04/02/to-sql-error-fixed/Jietu20180402-155827.jpg" alt="to_sql参数"></p>
<p>（panda.DataFrame.to_sql参数说明）</p>
<p>回头检查时，猛然发现to_sql用到的if_exists参数，不管调用时怎么给它赋值，执行时使用的永远是‘replace’，‘replace’的意思是如果库表存在，直接删除，重新创建，然后写入数据。</p>
<p>原来to_sql用到的dtype参数，在函数执行时，它的值一直是None，主调程序里指定dtype=dict_k_data完全没起作用。这导致MySQL引擎在给‘code’字段创建索引时，没有使用指定长度的VARCHAR类型，仍然使用变长的TEXT类型，这便是MySQL报错1170 “BLOB/TEXT column ‘code’ used in key specification without a key length”的原因。</p>
<p>将to_sql里if_exists和dtype两个默认参数，改为用变量来赋值，就没问题了，见下面正确代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_records_into_mysql</span><span class="params">(df,</span></span></div><div class="line"><span class="function"><span class="params">                             table_name,</span></span></div><div class="line"><span class="function"><span class="params">                             conn=engine,</span></span></div><div class="line"><span class="function"><span class="params">                             if_exists=<span class="string">'replace'</span>,</span></span></div><div class="line"><span class="function"><span class="params">                             dtype=None</span></span></div><div class="line"><span class="function"><span class="params">                             )</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** write_records_into_mysql参数if_exists是 ***:"</span>,if_exists</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** write_records_into_mysql参数dtype是 ***:"</span>,dtype</div><div class="line">        </div><div class="line">        df.to_sql(table_name,</div><div class="line">                  conn,</div><div class="line">                  if_exists=if_exists,</div><div class="line">                  dtype=dtype,</div><div class="line">                  )</div><div class="line">        </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'error'</span>,</div><div class="line">                  e)    </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'success'</span>)</div></pre></td></tr></table></figure>
<p>（正确的write_records_into_mysql函数版本）</p>
<p>被搅得心神不宁的问题，终于得到解决。我长输一口气。</p>
<p>为什么同样的代码，半年前没有问题，现在执行不成功呢？出错的根源是，使用“write_records_into_mysql”函数对to_sql封装后，进行函数调用时，参数指定得不对。</p>
<p>希望以后再也不要犯这个错误。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Tushare </tag>
            
            <tag> MySQL </tag>
            
            <tag> DataFrame </tag>
            
            <tag> to_sql </tag>
            
            <tag> SQLAlchemy </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pandas.DataFrame.to_sql写入MySQL报错1170]]></title>
      <url>/2018/03/30/pandas-dataframe-to-sql-error/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/30/pandas-dataframe-to-sql-error/fredrick-kearney-jr-220626-unsplash.jpg" alt=""></p>
<p>（Photo by <a href="https://unsplash.com/photos/7F_FcLhrsds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Fredrick Kearney Jr</a> on <a href="https://unsplash.com/search/photos/error?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>今天在使用pandas.DataFrame.to_sql这个接口，将Tushare获取的一个DataFrame写入MySQL时，出现如下报错。</p>
<blockquote>
<p>PGM:writedb:write_records_into_mysql:error: (_mysql_exceptions.OperationalError) (1170, “BLOB/TEXT column ‘code’ used in key specification without a key length”) [SQL: u’CREATE INDEX ix_k_data_code ON k_data (code)’] (Background on this error at: <a href="http://sqlalche.me/e/e3q8" target="_blank" rel="external">http://sqlalche.me/e/e3q8</a>)</p>
</blockquote>
<p>这个错误在创建MySQL表时很常见，当键值字段是变长的BLOB或TEXT类型，MySQL引擎无法生成索引。</p>
<p>很遗憾，尽管知道原因，也尝试过几乎所有可行的办法，但就是没法解决。很无奈，编程工作就是如此，半年前的代码，核心程序不变，搁现在重构一下，就跑不通了。</p>
<p>心情灰暗了一整个上午，下面是报错详细内容。</p>
<p>最近在将半年前写的Python股票分析程序重构，打算写一个标准的Python包出来。write_records_into_mysql是所有程序写入MySQL的接口，它有两个必输参数，分别是df和table_name；三个默认参数，分别是conn、if_exists、dtype。</p>
<p>其它细节不贴，一眼就能看明白，这个函数主要作用是调用pandas.DataFrame.to_sql接口，将df写入数据库。to_sql接收的参数和write_records_into_mysql接收的参数其实是一样的，乍一看这里好像存在重复封装，为什么不直接调用to_sql写数据库，而要采用调用write_records_into_mysql的方式？这是一个好问题。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_records_into_mysql</span><span class="params">(df,</span></span></div><div class="line"><span class="function"><span class="params">                             table_name,</span></span></div><div class="line"><span class="function"><span class="params">                             conn=engine,</span></span></div><div class="line"><span class="function"><span class="params">                             if_exists=<span class="string">'replace'</span>,</span></span></div><div class="line"><span class="function"><span class="params">                             dtype=None)</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** write_records_into_mysql参数if_exists是 ***:"</span>,if_exists</div><div class="line">        df.to_sql(table_name,</div><div class="line">                  conn,</div><div class="line">                  if_exists=<span class="string">'replace'</span>,</div><div class="line">                  dtype=<span class="keyword">None</span></div><div class="line">                  )</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'error'</span>,</div><div class="line">                  e)    </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  write_records_into_mysql.func_name,</div><div class="line">                  <span class="string">'success'</span>)</div></pre></td></tr></table></figure>
<p>主调函数里面核心代码块是这样的，在一个循环体里面，传入stock_code和issue_date两个参数，调用Tushare的API（<strong>get_k_data</strong>函数）获取个股日K线数据。</p>
<p>如果获取成功，将返回的df存入MySQL；如果获取失败，使用continue语句跳出本次循环，处理下一只股票。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用股票代码和发型日期作为参数获取日K线数据</span></div><div class="line">k_data_by_code = get_k_data_from_tushare(stock_code, issue_date)</div><div class="line"></div><div class="line"><span class="comment"># 如果没有获取到K线数据，k_data_by_code返回值会是None，使用</span></div><div class="line"><span class="comment"># continue跳出本次循环，继续处理下一只股票</span></div><div class="line"><span class="keyword">if</span> k_data_by_code <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"AAA k_data_by_code.head(1):"</span>,k_data_by_code.head(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"AAA k_data_by_code.index:"</span>,k_data_by_code.index</div><div class="line"></div><div class="line"><span class="comment"># 将dataframe的index转换成列'seq'</span></div><div class="line">k_data_by_code[<span class="string">'seq'</span>] = k_data_by_code.index</div><div class="line"><span class="keyword">print</span> <span class="string">"BBB k_data_by_code.head(1):"</span>,k_data_by_code.head(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"BBB k_data_by_code.index:"</span>,k_data_by_code.index</div><div class="line"></div><div class="line"><span class="comment"># 将dataframe的列'seq'+'code'转换成index</span></div><div class="line"><span class="comment"># drop=True表示将这两列从column中删掉</span></div><div class="line"><span class="comment"># verify_integrity=True表示检查新索引是否存在重复</span></div><div class="line">k_data_by_code = k_data_by_code.set_index([<span class="string">'seq'</span>,<span class="string">'code'</span>], </div><div class="line">                                          drop=<span class="keyword">True</span>,</div><div class="line">                                          verify_integrity=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"CCC k_data_by_code.head(1):"</span>,k_data_by_code.head(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"CCC k_data_by_code.index:"</span>,k_data_by_code.index</div><div class="line"></div><div class="line"><span class="comment"># 将参数stock_name插入到第一列，列名定义为'name'</span></div><div class="line">k_data_by_code.insert(<span class="number">0</span>,<span class="string">'name'</span>,stock_name)</div><div class="line"><span class="keyword">print</span> <span class="string">"DDD k_data_by_code.head(1):"</span>,k_data_by_code.head(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"DDD k_data_by_code.index:"</span>,k_data_by_code.index</div><div class="line"></div><div class="line"><span class="comment"># dict_k_data是以sqlalchemy格式定义的一个字典</span></div><div class="line">dict_k_data =&#123;</div><div class="line">     <span class="string">'seq'</span>:Float,</div><div class="line">    <span class="string">'code'</span>:String(<span class="number">06</span>),</div><div class="line">    <span class="string">'name'</span>:String(<span class="number">32</span>),</div><div class="line">    <span class="string">'open'</span>:Float,</div><div class="line">   <span class="string">'close'</span>:Float,</div><div class="line">    <span class="string">'high'</span>:Float,</div><div class="line">     <span class="string">'low'</span>:Float,</div><div class="line">  <span class="string">'volume'</span>:Float,</div><div class="line">    <span class="string">'date'</span>:Date</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">write_records_into_mysql(k_data_by_code, <span class="string">'k_data'</span>, dtype=dict_k_data)</div></pre></td></tr></table></figure>
<p>如果你们不熟悉Pandas和DataFrame，这里我先举一个例子，帮助大家理解。</p>
<blockquote>
<p>在REPL里面引入Tushare包。</p>
<p>in[2]获取个股”002930”日K线数据。</p>
<p>out[3]输出df1的内容，我只输出了第一行。</p>
<p>out[4]可以看到df1的索引，索引其实就是这条记录的键值，但在DataFrame里面，它叫index，不叫key。</p>
<p>out[5]可以看到df1有哪些栏位。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> In [1]: import tushare as ts</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> In [2]: df1 = ts.get_k_data(<span class="string">'002930'</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> In [3]: df1.head(1)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> Out[3]: </span></div><div class="line"><span class="meta">&gt;</span><span class="bash">          date   open  close   high    low  volume    code</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> 0  2018-03-28  10.24  12.28  12.28  10.24   426.0  002930</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> In [4]: df1.index</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> Out[4]: RangeIndex(start=0, stop=3, step=1)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> In [5]: df1.columns</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> Out[5]: Index([u<span class="string">'date'</span>, u<span class="string">'open'</span>, u<span class="string">'close'</span>, u<span class="string">'high'</span>, u<span class="string">'low'</span>, u<span class="string">'volume'</span>, u<span class="string">'code'</span>], dtype=<span class="string">'object'</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<p>好了，我们回归正题。</p>
<p>上面的程序，我取到k_data_by_code数据后，做了如下几步操作。</p>
<ol>
<li><p>将这个df的索引转换成当前df里面的一个列‘seq’。AAA显示这个df修改前的格式。</p>
<blockquote>
<p>AAA k_data_by_code.head(1):          date   open  close   high    low  volume    code<br>0  2018-03-28  10.24  12.28  12.28  10.24   426.0  002930<br>AAA k_data_by_code.index: RangeIndex(start=0, stop=3, step=1)</p>
</blockquote>
<p>BBB显示将index转换为‘seq’列后的格式。</p>
<blockquote>
<p>BBB k_data_by_code.head(1):          date   open  close   high    low  volume    code  seq<br>0  2018-03-28  10.24  12.28  12.28  10.24   426.0  002930    0<br>BBB k_data_by_code.index: RangeIndex(start=0, stop=3, step=1)</p>
</blockquote>
</li>
<li><p>使用set_index函数，给这个df设置新的索引，在原来索引的基础上增加了列‘code’。CCC显示将‘seq’和‘code’联合设置为索引后的格式。</p>
<blockquote>
<p>CCC k_data_by_code.head(1):                   date   open  close   high    low  volume<br>seq code<br>0   002930  2018-03-28  10.24  12.28  12.28  10.24   426.0<br>CCC k_data_by_code.index: MultiIndex(levels=[[0, 1, 2], [u‘002930’]],labels=[[0, 1, 2], [0, 0, 0]],names=[u‘seq’, u‘code’])</p>
</blockquote>
</li>
<li><p>接着将stock_name插入到df里面，插入位置是第一列。DDD显示插入新列‘name’后的格式。</p>
<blockquote>
<p>DDD k_data_by_code.head(1):             name        date   open  close   high    low  volume<br>seq code<br>0   002930  宏川智慧  2018-03-28  10.24  12.28  12.28  10.24   426.0<br>DDD k_data_by_code.index: MultiIndex(levels=[[0, 1, 2], [u‘002930’]],labels=[[0, 1, 2], [0, 0, 0]],names=[u‘seq’, u‘code’])</p>
</blockquote>
</li>
<li><p>定义字典变量dict_k_data，当MySQL引擎创建表时，会用它生成表的属性。</p>
</li>
<li><p>最后调用write_records_into_mysql函数，把这个df和表名‘k_data’作为参数传进去，将df里的内容写入MySQL。</p>
</li>
</ol>
<p>print语句显示上面这几步操作都执行成功。数据库表‘k_data’也生成成功，表结构如下，但奇怪的是‘code’那一列的类型为TEXT，并不是预期的VARCHAR(06)。</p>
<p><img src="/2018/03/30/pandas-dataframe-to-sql-error/k_data_properties.jpg" alt="k_data_properties"></p>
<p>以上便是，整个操作报错的全过程。</p>
<p>查StackOverflow，参考<a href="https://stackoverflow.com/questions/38522513/can-pandas-with-mysql-support-text-indexes" target="_blank" rel="external">Can pandas with MySQL support text indexes?</a>这篇文章提到的方法，使用dtype={‘code’:VARCHAR(k_data_by_code.index.get_level_values(‘code’).str.len().max())}调用write_records_into_mysql函数，依然报同样的错。</p>
<p>这篇文章里全部代码，逻辑和半年前一模一样，为什么当时可以成功，现在就不行呢，我想不明白原因，哪位大神可以指点一下迷津？</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/zhangjpn/p/6133793.html" target="_blank" rel="external">pandas对象保存到mysql出错提示“BLOB/TEXT column used in key specification without a key length”解决办法</a></li>
<li><a href="https://stackoverflow.com/questions/38522513/can-pandas-with-mysql-support-text-indexes" target="_blank" rel="external">Can pandas with MySQL support text indexes?</a></li>
<li><a href="https://stackoverflow.com/questions/1827063/mysql-error-key-specification-without-a-key-length" target="_blank" rel="external">MySQL error: key specification without a key length</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Tushare </tag>
            
            <tag> MySQL </tag>
            
            <tag> DataFrame </tag>
            
            <tag> to_sql </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis初体验]]></title>
      <url>/2018/03/27/redis/</url>
      <content type="html"><![CDATA[<p>前两天整理<a href="/2018/03/21/python-crawler/">使用Python爬虫下载电子书</a>一文时，提过要给爬虫程序增加缓存处理。后面花了2天时间把Redis用法摸熟，然后在Mac上配置好了Redis环境。搭好环境后，发现那个爬虫程序其实非常简单，使出Redis有点大材小用，于是把Redis用在缓存股票数据上面，结果效果非常好。</p>
<p>关于Redis的缓存处理，我参考了陈皓老师<a href="https://coolshell.cn/articles/17416.html" target="_blank" rel="external">缓存更新的套路</a>文中提到的“Cache Aside Pattern”模式，来进行缓存设计，下面直接引用他博客里面的内容，非常受启发。</p>
<blockquote>
<ul>
<li><strong>失效</strong>：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
</ul>
<ul>
<li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li>
</ul>
<ul>
<li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li>
</ul>
</blockquote>
<p><img src="/2018/03/27/redis/Cache-Aside-Design-Pattern.png" alt="Fetch data from Redis"></p>
<p><img src="/2018/03/27/redis/Updating-Data-within-Cache-Aside-Pattern.png" alt="Update data in db"></p>
<a id="more"></a>
<p>参考上面的两张图，在写数据库操作后面，增加写入Redis处理，代码块就不贴了；读取数据操作变成“先读Redis再读数据库”这种模式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_df_from_redis_then_db</span><span class="params">(table_name)</span>:</span>  </div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    get_df_from_redis_then_db:</span></div><div class="line"><span class="string">    获取指定df数据。先读缓存，如果找到，直接返回缓存；如果缓存没有，</span></div><div class="line"><span class="string">    从数据库读取数据，读取成功后，将数据库数据写入缓存。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Parameters</span></div><div class="line"><span class="string">    ----------</span></div><div class="line"><span class="string">    table_name:表名</span></div><div class="line"><span class="string">       </span></div><div class="line"><span class="string">    Return</span></div><div class="line"><span class="string">    ------</span></div><div class="line"><span class="string">    dataframe:返回表名对应的df</span></div><div class="line"><span class="string">    """</span></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:      </div><div class="line">        df_from_redis = get_df_from_redis(table_name)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            df_from_db = fetch_table_from_db(table_name)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print_msg(PGMname, </div><div class="line">                      fetch_table_from_db.func_name,</div><div class="line">                      <span class="string">'error'</span>,</div><div class="line">                      e)    </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print_msg(PGMname, </div><div class="line">                      fetch_table_from_db.func_name,</div><div class="line">                      <span class="string">'success'</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                set_df_to_redis(df_from_db, table_name)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print_msg(PGMname, </div><div class="line">                          set_df_to_redis.func_name,</div><div class="line">                          <span class="string">'error'</span>,</div><div class="line">                          e)    </div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print_msg(PGMname, </div><div class="line">                          set_df_to_redis.func_name,</div><div class="line">                          <span class="string">'success'</span>)</div><div class="line">            <span class="keyword">return</span> df_from_db</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print_msg(PGMname, </div><div class="line">                  get_df_from_redis_then_db.func_name,</div><div class="line">                  <span class="string">'success'</span>)</div><div class="line">        <span class="keyword">return</span> df_from_redis</div></pre></td></tr></table></figure>
<p>程序跑完后，查看写进Redis里面的记录，总共有91条。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:bin jacksonshawn$ ./redis-cli</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line"> 1) <span class="string">"fund_holdings2016q1"</span></div><div class="line"> 2) <span class="string">"debtpaying_data2016q3"</span></div><div class="line"> 3) <span class="string">"report_data2017q3"</span></div><div class="line"> 4) <span class="string">"k_data"</span></div><div class="line"> 5) <span class="string">"growth_data2015"</span></div><div class="line"> 6) <span class="string">"profit_data2017q3"</span></div><div class="line"> 7) <span class="string">"fund_holdings2015q4"</span></div><div class="line"> 8) <span class="string">"operation_data2015q1"</span></div><div class="line"> 9) <span class="string">"debtpaying_data2015"</span></div><div class="line">10) <span class="string">"operation_data2016q1"</span></div><div class="line">11) <span class="string">"xsg_data"</span></div><div class="line">12) <span class="string">"profit_data2016q4"</span></div><div class="line">13) <span class="string">"report_data2015q4"</span></div><div class="line">14) <span class="string">"growth_data2016q1"</span></div><div class="line">15) <span class="string">"debtpaying_data2017"</span></div><div class="line">16) <span class="string">"growth_data2017q4"</span></div><div class="line">17) <span class="string">"today_all"</span></div><div class="line">18) <span class="string">"debtpaying_data2017q2"</span></div><div class="line">19) <span class="string">"growth_data2015q2"</span></div><div class="line">20) <span class="string">"operation_data2016q2"</span></div><div class="line">21) <span class="string">"report_data2016q3"</span></div><div class="line">22) <span class="string">"st_classified"</span></div><div class="line">23) <span class="string">"profit_data2017q2"</span></div><div class="line">24) <span class="string">"profit_data2017q4"</span></div><div class="line">25) <span class="string">"debtpaying_data2016"</span></div><div class="line">26) <span class="string">"growth_data2017q3"</span></div><div class="line">27) <span class="string">"profit_data2017q1"</span></div><div class="line">28) <span class="string">"report_data2017"</span></div><div class="line">29) <span class="string">"report_data2015q2"</span></div><div class="line">30) <span class="string">"growth_data2017"</span></div><div class="line">31) <span class="string">"report_data2017q4"</span></div><div class="line">32) <span class="string">"debtpaying_data2017q3"</span></div><div class="line">33) <span class="string">"debtpaying_data2015q4"</span></div><div class="line">34) <span class="string">"operation_data2015q3"</span></div><div class="line">35) <span class="string">"fund_holdings2016q4"</span></div><div class="line">36) <span class="string">"debtpaying_data2017q4"</span></div><div class="line">37) <span class="string">"report_data2015q1"</span></div><div class="line">38) <span class="string">"fund_holdings2015q1"</span></div><div class="line">39) <span class="string">"profit_data2015q3"</span></div><div class="line">40) <span class="string">"new_stocks"</span></div><div class="line">41) <span class="string">"profit_data2016"</span></div><div class="line">42) <span class="string">"profit_data2017"</span></div><div class="line">43) <span class="string">"day_all"</span></div><div class="line">44) <span class="string">"report_data2015"</span></div><div class="line">45) <span class="string">"growth_data2015q4"</span></div><div class="line">46) <span class="string">"debtpaying_data2015q3"</span></div><div class="line">47) <span class="string">"fund_holdings2017q2"</span></div><div class="line">48) <span class="string">"operation_data2016q4"</span></div><div class="line">49) <span class="string">"report_data2017q2"</span></div><div class="line">50) <span class="string">"fund_holdings2015q2"</span></div><div class="line">51) <span class="string">"growth_data2015q1"</span></div><div class="line">52) <span class="string">"fund_holdings2016q2"</span></div><div class="line">53) <span class="string">"growth_data2017q2"</span></div><div class="line">54) <span class="string">"report_data2016q2"</span></div><div class="line">55) <span class="string">"fund_holdings2017q1"</span></div><div class="line">56) <span class="string">"fund_holdings2017q4"</span></div><div class="line">57) <span class="string">"growth_data2016q3"</span></div><div class="line">58) <span class="string">"fund_holdings2015q3"</span></div><div class="line">59) <span class="string">"report_data2016"</span></div><div class="line">60) <span class="string">"report_data2017q1"</span></div><div class="line">61) <span class="string">"profit_data2016q1"</span></div><div class="line">62) <span class="string">"profit_data2015q4"</span></div><div class="line">63) <span class="string">"debtpaying_data2017q1"</span></div><div class="line">64) <span class="string">"debtpaying_data2016q4"</span></div><div class="line">65) <span class="string">"industry_classified"</span></div><div class="line">66) <span class="string">"report_data2016q1"</span></div><div class="line">67) <span class="string">"debtpaying_data2016q2"</span></div><div class="line">68) <span class="string">"profit_data2015q1"</span></div><div class="line">69) <span class="string">"profit_data2016q2"</span></div><div class="line">70) <span class="string">"report_data2016q4"</span></div><div class="line">71) <span class="string">"fund_holdings2017q3"</span></div><div class="line">72) <span class="string">"debtpaying_data2015q1"</span></div><div class="line">73) <span class="string">"debtpaying_data2015q2"</span></div><div class="line">74) <span class="string">"operation_data2016q3"</span></div><div class="line">75) <span class="string">"operation_data2015q2"</span></div><div class="line">76) <span class="string">"Stockxsg"</span></div><div class="line">77) <span class="string">"operation_data2016"</span></div><div class="line">78) <span class="string">"fund_holdings2016q3"</span></div><div class="line">79) <span class="string">"growth_data2016"</span></div><div class="line">80) <span class="string">"debtpaying_data2016q1"</span></div><div class="line">81) <span class="string">"stock_basics"</span></div><div class="line">82) <span class="string">"profit_data2015"</span></div><div class="line">83) <span class="string">"profit_data2015q2"</span></div><div class="line">84) <span class="string">"growth_data2016q4"</span></div><div class="line">85) <span class="string">"operation_data2015q4"</span></div><div class="line">86) <span class="string">"growth_data2016q2"</span></div><div class="line">87) <span class="string">"operation_data2015"</span></div><div class="line">88) <span class="string">"growth_data2017q1"</span></div><div class="line">89) <span class="string">"report_data2015q3"</span></div><div class="line">90) <span class="string">"profit_data2016q3"</span></div><div class="line">91) <span class="string">"growth_data2015q3"</span></div></pre></td></tr></table></figure>
<p>查看Redis消耗的内存空间，目前总共102.76M。相比MBP 8G的内存，这点消耗还算好，如果哪天到了500M，可能就要采用LRU策略来对这些key-value数据进行处理了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Memory</span></div><div class="line">used_memory:107750736</div><div class="line">used_memory_human:102.76M</div></pre></td></tr></table></figure>
<p>另外，使用Redis存储和读取DataFrame，在网上搜到如下方式，亲测有效。我采用的就是这种方式，至于有没有其它更好的方法，目前暂时没有时间去研究。</p>
<blockquote>
<p><strong>set:</strong></p>
<p>redisConn.set(“key”, df.to_msgpack(compress=“zlib”))</p>
<p><strong>get:</strong></p>
<p>pd.read_msgpack(redisConn.get(“key”))</p>
</blockquote>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/mrsyf/article/details/79624054" target="_blank" rel="external">Mac系统安装Redis</a></li>
<li><a href="http://www.redis.net.cn/tutorial/3504.html" target="_blank" rel="external">Redis 配置</a></li>
<li><a href="https://blog.csdn.net/zzhongcy/article/details/70884701" target="_blank" rel="external">mac下设置redis开机启动方法步骤</a></li>
<li><a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="external">andymccurdy/redis-py</a></li>
<li><a href="https://redis-py.readthedocs.io/en/latest/" target="_blank" rel="external">Welcome to redis-py’s documentation!</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tushare </tag>
            
            <tag> DataFrame </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存设计策略 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清除GitHub提交历史记录]]></title>
      <url>/2018/03/23/reset-github-push-history/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/23/reset-github-push-history/alex-vasey-225127-unsplash.jpg" alt="clean air"></p>
<p>（Photo by <a href="https://unsplash.com/photos/jWaUBjlx0Sw?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Alex Vasey</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>昨天提交代码到GitHub仓库时，不小心把敏感信息（登陆账号和登陆密码）提交了上去。发现后立马在GitHub上修改源代码，将里面的敏感信息删除，删除后查看这个文件的历史操作记录，包含敏感信息的历史版本仍然存在。</p>
<p>以为删除文件可以解决这个问题，然而并非如此，把整个文件删除后，历史记录并没有被清空，反而增多一条删除文件的操作，前面两步操作的记录仍然存在。</p>
<p>网上搜了一大圈解决办法，最终找到的解决办法如下。</p>
<a id="more"></a>
<p>1.将Repository使用git clone到本地，在终端使用“git log”查看提交记录。GitHub会为每一次commit操作生成哈希值，用这个哈希值来记录你的提交记录。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:learning-python jacksonshawn$ git log</div><div class="line">commit 69658b34013ae1a894f84e161c326a3b5b63f05f</div><div class="line">Author: 大西洋暖流 &lt;xc0910@hotmail.com&gt;</div><div class="line">Date:   Thu Mar 22 18:35:26 2018 +0800</div><div class="line"></div><div class="line">    Delete python_learning_crawler_laidu_new.py</div><div class="line"></div><div class="line">commit fa3aa61aa04c90afa5bef3e27f8a0eb80388b6bf</div><div class="line">Author: 大西洋暖流 &lt;xc0910@hotmail.com&gt;</div><div class="line">Date:   Thu Mar 22 18:32:03 2018 +0800</div><div class="line"></div><div class="line">    Update python_learning_crawler_laidu_new.py</div><div class="line"></div><div class="line">commit 0f6f7b72667830e407880271e6ebc24abba232c5</div><div class="line">Author: 大西洋暖流 &lt;xc0910@hotmail.com&gt;</div><div class="line">Date:   Thu Mar 22 18:31:21 2018 +0800</div><div class="line"></div><div class="line">    Add files via upload</div><div class="line"></div><div class="line">commit 8628628991470b26e698d98e986a54fa6b5f4352</div><div class="line">Author: 大西洋暖流 &lt;xc0910@hotmail.com&gt;</div><div class="line">Date:   Thu Mar 22 18:30:01 2018 +0800</div><div class="line"></div><div class="line">    Create README.md</div></pre></td></tr></table></figure>
<p>2.定位你误操作的那一个版本，我上传包涵敏感信息的操作是“0f6f7b72667830e407880271e6ebc24abba232c5”。我们取它之前的版本，就是哈希值为“8628628991470b26e698d98e986a54fa6b5f4352”的那一版本。</p>
<p>3.使用“git reset —hard 8628628991470b26e698d98e986a54fa6b5f4352”操作，将历史记录重置到这个版本。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:learning-python jacksonshawn$ git reset --hard 8628628991470b26e698d98e986a54fa6b5f4352</div><div class="line">HEAD is now at 8628628 Create README.md</div></pre></td></tr></table></figure>
<p>4.使用“git push origin HEAD —force”，PUSH到GitHub。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:learning-python jacksonshawn$ git push origin HEAD --force</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/benbendemo/learning-python.git</div><div class="line"> + 0f6f7b7...8628628 HEAD -&gt; master (forced update)</div></pre></td></tr></table></figure>
<p>5.查看GitHub仓库，版本号被重置到我指定的“8628628991470b26e698d98e986a54fa6b5f4352”版本，最新标签号被回退为“8628628”。</p>
<p><img src="/2018/03/23/reset-github-push-history/git-repository-file.jpg" alt="git file left"></p>
<p>6.查看这个Repository的历史记录，前面几步操作的历史记录也都被清除掉，这样就解决了泄漏敏感信息的风险。😊</p>
<p><img src="/2018/03/23/reset-github-push-history/git-repository-history-cleaned.jpg" alt="git history cleaned"></p>
<p>我没有参照GitHub官网这篇文章<a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="external">Removing sensitive data from a repository</a>给出的指示进行操作，原因是我的情况不符合文中描述的内容。因为我在发现上传敏感信息后，直接将带敏感信息的整个文件删掉过，这篇文章给出的指示操作有一个要求是，带敏感信息的文件没有被删除，才可按照它的方法清楚历史记录。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Python爬虫下载电子书]]></title>
      <url>/2018/03/21/python-crawler/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/21/python-crawler/aaron-burden-327241-unsplash.jpg" alt="spider">（Photo by <a href="https://unsplash.com/photos/9TgJxZMd0hc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Aaron Burden</a> on <a href="https://unsplash.com/search/photos/spider?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>这两天将半年前写的爬虫代码重构了一下，本来以为要不了多久，结果前前后后花了我将近4个小时的时间。</p>
<p>无力吐槽！:sob:</p>
<p>半年前的代码是一个面向过程的处理，几个函数顺序执行，最终慢悠悠地把PDF生成出来，功能都齐全，但是可读性和拓展性极差。现在全部改为面向对象处理，将requests.Session操作剥离出来作为Crawler类，将解析网页的操作剥离出来作为Parse类，结构清楚了很多，耦合度（较之前）大大降低，基本达到我的要求。</p>
<p>整体功能实现后，我写了一个cache函数，将Session操作缓存起来方便后续复用，本地调试成功，但最终没有采用。我的设想是在一定期限内将Session操作常驻内存，每次执行前检查缓存中有没有，有的话就直接用，没有才新建。但我这个cache函数在程序执行完后，缓存的内容直接被释放，每次执行都需要新建Session连接。这几天在学习Redis，估计我想要的效果得用redis才能实现。</p>
<p>在将网页生成HTML文件到本地后，使用pdfkit工具将HTML文件转换为PDF很耗费时间，这一点请大家注意。</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>macOS 10.11.6 + Anaconda Navigator 1.7.0+ Python 2.7.12 + Sublime 3.0</p>
<h4 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h4><ul>
<li>Requests会话处理</li>
<li>BeautifulSoup网页解析</li>
<li>pdfkit工具（注意，一定要先安装wkhtmltopdf这个工具包）</li>
<li>decorator装饰器</li>
</ul>
<a id="more"></a>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Wen Mar 21 18:21:37 2018</span></div><div class="line"><span class="string">Func:使用爬虫下载来读电子书</span></div><div class="line"><span class="string">PGM:python_learning_crawler_laidu_new.py</span></div><div class="line"><span class="string">@author:benbendemo</span></div><div class="line"><span class="string">@email:xc0910@hotmail.com</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> profile</div><div class="line"><span class="keyword">import</span> pdfkit</div><div class="line"></div><div class="line">PGMname = <span class="string">'PGM:python_learning_crawler_laidu_new'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    1. 定义爬虫基类</span></div><div class="line"><span class="string">    2. 定义SESSION、HEADER、BASE_URL等类参数</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    SESSION = requests.Session()</div><div class="line">    LOGIN_URL = <span class="string">'http://laidu.co/login'</span></div><div class="line">    HEADER = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) \</span></div><div class="line"><span class="string">              AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"</span>&#125;</div><div class="line">    </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_with_session</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        由于待爬取网站需要登陆，使用SESSION.post方法进行登陆验证</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment"># 这里需要先注册来读，然后把邮箱和密码换成你自己的</span></div><div class="line">        payload = &#123;</div><div class="line">                   <span class="string">'email'</span>: <span class="string">'XXXXXXXX'</span>, </div><div class="line">                   <span class="string">'password'</span>: <span class="string">'XXXXXXXX'</span>,</div><div class="line">                   <span class="string">'_token'</span>: cls.get_xsrf()</div><div class="line">                   &#125;</div><div class="line">        cls.SESSION.post(url=cls.LOGIN_URL, data=payload)</div><div class="line">        <span class="keyword">return</span> cls.SESSION</div><div class="line">    </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_xsrf</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        使用SESSION登陆前，需要先获取xsrf伪随机数</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        response = cls.SESSION.get(url=cls.LOGIN_URL, headers=cls.HEADER)</div><div class="line">        soup = BeautifulSoup(response.content, <span class="string">"html.parser"</span>)</div><div class="line">        xsrf = soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">"name"</span>: <span class="string">"_token"</span>&#125;).get(<span class="string">"value"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"---xsrf---:"</span>,xsrf</div><div class="line">        <span class="keyword">return</span> xsrf</div><div class="line">    </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logoff_with_session</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        爬取结束后，关闭SESSION</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        cls.SESSION.close()</div><div class="line">        </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parse</span><span class="params">(Crawler)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    1. 继承Crawler类，定义页面解析类</span></div><div class="line"><span class="string">    2. 定义BASE_URL、HTML_TEMPLATE和正则表达式类变量</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    </div><div class="line">    <span class="comment"># 基地址</span></div><div class="line">    BASE_URL = <span class="string">'http://laidu.co'</span></div><div class="line">    </div><div class="line">    <span class="comment"># html网页模版文件</span></div><div class="line">    HTML_TEMPLATE = <span class="string">"""</span></div><div class="line"><span class="string">     &lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="string">     &lt;html lang="en"&gt;</span></div><div class="line"><span class="string">         &lt;head&gt;</span></div><div class="line"><span class="string">             &lt;meta charset="UTF-8"&gt;</span></div><div class="line"><span class="string">             &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt;</span></div><div class="line"><span class="string">         &lt;/head&gt;</span></div><div class="line"><span class="string">         &lt;body&gt;</span></div><div class="line"><span class="string">             &#123;content&#125;</span></div><div class="line"><span class="string">         &lt;/body&gt;</span></div><div class="line"><span class="string">     &lt;/html&gt;</span></div><div class="line"><span class="string">     """</span></div><div class="line">    </div><div class="line">    <span class="comment"># 定义html文本中匹配img标签的正则表达式</span></div><div class="line">    IMG_PATTERN = <span class="string">"(&lt;img .*?src=\")(.*?\.png|.*?\.jpg)(\")(\/&gt;)"</span></div><div class="line">    </div><div class="line">    <span class="comment"># 编译匹配img标签的正则表达式               </span></div><div class="line">    IMG_PATTERN_COMPILED = re.compile(IMG_PATTERN)</div><div class="line">        </div><div class="line">    <span class="comment"># 匹配url中最长'/'字符的位置</span></div><div class="line">    URL_PATTERN = <span class="string">".*\/"</span></div><div class="line">    </div><div class="line">    <span class="comment"># 编译匹配url中最长'/'的正则表达式</span></div><div class="line">    URL_PATTERN_COMPILED = re.compile(URL_PATTERN)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, book_url, book_name)</span>:</span></div><div class="line">        </div><div class="line">        <span class="comment"># 电子书首页地址和电子书名称</span></div><div class="line">        self.book_url = book_url</div><div class="line">        self.book_name = book_name</div><div class="line">    </div><div class="line">    <span class="comment"># 进行时间统计的装饰器函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"*** Function Name:***"</span>,func.__name__</div><div class="line">            <span class="comment">#print "*** Function Args:***",args</span></div><div class="line">            <span class="comment">#print "*** Function kwargs:***",kwargs</span></div><div class="line">            t1 = datetime.datetime.now()</div><div class="line">            res = func(*args, **kwargs)</div><div class="line">            t2 = datetime.datetime.now()</div><div class="line">            <span class="keyword">print</span> <span class="string">"*** Function Takes:***"</span>, (t2-t1), <span class="string">"Time"</span></div><div class="line">            <span class="keyword">return</span> res</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self,url)</span>:</span></div><div class="line">    </div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        根据每个章节的url地址，截取去掉index.html后的前缀</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        match = re.match(self.URL_PATTERN_COMPILED,url)</div><div class="line">        <span class="keyword">if</span> match:</div><div class="line">            <span class="keyword">return</span> match.group(<span class="number">0</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_total_chapter_urls</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        从电子书首页网址里，解析出全部章节的url地址，返回汇总列表</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        resp = self.SESSION.get(self.book_url)</div><div class="line">        soup = BeautifulSoup(resp.content,<span class="string">'html.parser'</span>)</div><div class="line">        menu_tag = soup.find_all(<span class="string">'ul'</span>,class_=<span class="string">'summary'</span>)[<span class="number">0</span>]</div><div class="line">            </div><div class="line">        url_total = []</div><div class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> menu_tag.find_all(<span class="string">'li'</span>,class_=<span class="string">'chapter'</span>):</div><div class="line">            url = self.BASE_URL + li.a.get(<span class="string">'href'</span>)</div><div class="line">            url_total.append(url)</div><div class="line">        </div><div class="line">        <span class="keyword">print</span> <span class="string">"AAA url_total:"</span>,url_total</div><div class="line">        <span class="keyword">return</span> url_total</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_book_html</span><span class="params">(self, chapter_name, chapter_url)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        爬取每一章电子书的url地址，生成每个章节对应的html页面.</span></div><div class="line"><span class="string">        将img标签中的图片相对路径，使用正则表达式进行匹配后</span></div><div class="line"><span class="string">        使用re.sub函数将相对路径转换为绝对路径</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gen_absolute_url</span><span class="params">(match)</span>:</span></div><div class="line">            <span class="string">'''</span></div><div class="line"><span class="string">            re.sub函数接收一个match对象作为参数</span></div><div class="line"><span class="string">            gen_absolute_url函数用于拼接图片绝对路径的url网址</span></div><div class="line"><span class="string">            '''</span></div><div class="line">            rtn = <span class="string">''</span>.join([match.group(<span class="number">1</span>), </div><div class="line">                           self.parse_url(chapter_url), </div><div class="line">                           match.group(<span class="number">2</span>), </div><div class="line">                           match.group(<span class="number">3</span>), </div><div class="line">                           match.group(<span class="number">4</span>)])</div><div class="line">            <span class="keyword">return</span> str(rtn)</div><div class="line">        </div><div class="line">        resp = self.SESSION.get(chapter_url)</div><div class="line">        soup = BeautifulSoup(resp.content,<span class="string">"html.parser"</span>)</div><div class="line">        body = soup.find_all(<span class="string">'div'</span>,class_=<span class="string">'normal'</span>)[<span class="number">0</span>]</div><div class="line">        html_before = str(body)</div><div class="line">            </div><div class="line">        <span class="comment"># 注:re.sub函数需要接收一个match对象作为参数</span></div><div class="line">        html_after = re.sub(self.IMG_PATTERN_COMPILED, gen_absolute_url, html_before)</div><div class="line">        </div><div class="line">        html = self.HTML_TEMPLATE.format(content=html_after)</div><div class="line">        </div><div class="line">        <span class="keyword">with</span> open(chapter_name,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</div><div class="line">            fp.write(html)</div><div class="line">        </div><div class="line"><span class="meta">    @decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transfer_html_2_pdf</span><span class="params">(self, htmls, bookname)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        把所有html文件转换成pdf文件</span></div><div class="line"><span class="string">        参数配置查看https://wkhtmltopdf.org/usage/wkhtmltopdf.txt</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        </div><div class="line">        options = &#123;</div><div class="line">                <span class="string">'margin-top'</span>: <span class="string">'0.75in'</span>,</div><div class="line">                <span class="string">'margin-right'</span>: <span class="string">'0.75in'</span>,</div><div class="line">                <span class="string">'margin-bottom'</span>: <span class="string">'0.75in'</span>,</div><div class="line">                <span class="string">'margin-left'</span>: <span class="string">'0.75in'</span>,</div><div class="line">                <span class="string">'minimum-font-size'</span>: <span class="number">75</span>,</div><div class="line">                <span class="string">'zoom'</span>: <span class="number">4</span>,</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** Transfer_html_2_pdf begin ***"</span></div><div class="line">        config = pdfkit.configuration(wkhtmltopdf=<span class="string">'/usr/local/bin/wkhtmltopdf'</span>)</div><div class="line">        pdfname = str(bookname) + <span class="string">'.pdf'</span></div><div class="line">        pdfkit.from_file(htmls, pdfname, options=options, configuration=config)</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** Transfer_html_2_pdf end ***"</span></div><div class="line">    </div><div class="line"><span class="meta">    @decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">print</span> <span class="string">"*** PGM begin ***"</span></div><div class="line">        <span class="comment"># 打开SESSION连接</span></div><div class="line">        self.login_with_session()</div><div class="line">        </div><div class="line">        chapter_name_tot = []</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> chapter_index, chapter_url <span class="keyword">in</span> enumerate(self.get_total_chapter_urls()):</div><div class="line">            chapter_name = <span class="string">"."</span>.join([str(self.book_name), str(chapter_index), <span class="string">'html'</span>])</div><div class="line">            chapter_name_tot.append(chapter_name)</div><div class="line">            <span class="keyword">print</span> <span class="string">"MAIN chapter_index:"</span>,chapter_index</div><div class="line">            <span class="keyword">print</span> <span class="string">"MAIN chapter_url:"</span>,chapter_url</div><div class="line">            <span class="keyword">print</span> <span class="string">"MAIN chapter_name:"</span>,chapter_name</div><div class="line">            self.gen_book_html(chapter_name, chapter_url)</div><div class="line">        </div><div class="line">        <span class="comment"># 将全部章节的html文件，合并生成一个pdf文件</span></div><div class="line">        self.transfer_html_2_pdf(chapter_name_tot, self.book_name)</div><div class="line">        </div><div class="line">        <span class="comment"># 关闭SESSION连接</span></div><div class="line">        self.logoff_with_session()</div><div class="line">        <span class="keyword">print</span> <span class="string">"*** PGM end ***"</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    bookindexurl = <span class="string">'http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/index.html'</span></div><div class="line">    bookname = <span class="string">'把时间当作朋友'</span></div><div class="line">    p = Parse(bookindexurl,bookname)</div><div class="line">    p.run()</div><div class="line"></div><div class="line">    <span class="comment"># 使用profile进行性能分析</span></div><div class="line">    <span class="comment">#profile.run('p.run()')</span></div></pre></td></tr></table></figure>
<h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><ul>
<li><p>生成的HTML文件和PDF文件如下。</p>
<p><img src="/2018/03/21/python-crawler/htmls_and_pdf.jpg" alt="htmls and pdf"></p>
<p>​</p>
</li>
</ul>
<ul>
<li><p>生成PDF文件预览，注意红色方框第5章第4节”逆命题”出现错位，我检查过，不是网页解析的问题，是电子书HTML文件源码中”逆命题”那一节的文本标签被错误定义为”h1”，手工将文件改为”h2”，再生成PDF就能修复这个问题。</p>
<p><img src="/2018/03/21/python-crawler/pdf_snapchat.jpg" alt="pdf snapchat"></p>
<p>​</p>
</li>
<li><p>输出的Log如下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">runfile('/Users/jacksonshawn/PythonCodes/pythonlearning/python_learning_crawler_laidu_new.py', wdir='/Users/jacksonshawn/PythonCodes/pythonlearning')</div><div class="line">*** Function Name:*** run</div><div class="line">*** PGM begin ***</div><div class="line">---xsrf---: f8EMOPQer81CI4xwn3mQ8ccqnyLikVRNQAMk5887</div><div class="line">MAIN chapter_index: 0</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/index.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.0.html</div><div class="line">MAIN chapter_index: 1</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Preface.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.1.html</div><div class="line">MAIN chapter_index: 2</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Forword.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.2.html</div><div class="line">MAIN chapter_index: 3</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter0.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.3.html</div><div class="line">MAIN chapter_index: 4</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter1.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.4.html</div><div class="line">MAIN chapter_index: 5</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter2.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.5.html</div><div class="line">MAIN chapter_index: 6</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter3.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.6.html</div><div class="line">MAIN chapter_index: 7</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter4.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.7.html</div><div class="line">MAIN chapter_index: 8</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter5.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.8.html</div><div class="line">MAIN chapter_index: 9</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter6.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.9.html</div><div class="line">MAIN chapter_index: 10</div><div class="line">MAIN chapter_url: http://laidu.co/books/7fa8fcfa612989251007dafde19a1e86/Chapter7.html</div><div class="line">MAIN chapter_name: 把时间当做朋友.10.html</div><div class="line">*** Function Name:*** transfer_html_2_pdf</div><div class="line">*** Transfer_html_2_pdf begin ***</div><div class="line">Loading pages (1/6)</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 50%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 52%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 52%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 56%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 56%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 56%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 59%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 60%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 60%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 61%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 62%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 63%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 64%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 64%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 64%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 64%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 66%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 68%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 69%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 69%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 70%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 71%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 71%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 71%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 72%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 72%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 73%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 73%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 76%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 78%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile           ] 80%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile=&gt;         ] 84%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile===&gt;       ] 88%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile====&gt;      ] 89%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile=====&gt;     ] 90%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile=====&gt;     ] 91%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile======&gt;    ] 93%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile========&gt;  ] 95%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile========&gt;  ] 96%</div><div class="line">libpng warning: iCCP: known incorrect sRGB profile==========&gt;] 99%</div><div class="line">Counting pages (2/6)                                               </div><div class="line">Resolving links (4/6)                                                         </div><div class="line">Loading headers and footers (5/6)                                             </div><div class="line">Printing pages (6/6)</div><div class="line">Done                                                                          </div><div class="line">*** Transfer_html_2_pdf end ***</div><div class="line">*** Function Takes:*** 0:01:09.791587 Time</div><div class="line">*** PGM end ***</div><div class="line">*** Function Takes:*** 0:01:16.134701 Time</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>使用pdfkit生成PDF文件，必须要先安装<a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="external">wkhtmltopdf</a>这个工具。pdfkit只是一个入口程序，真正生成PDF这些脏活累活，都是wkhtmltopdf完成的。安装wkhtmltopdf成功后，在transfer_html_2_pdf函数中一定要指定正确的调用路径。</li>
<li>目前还没有设置缓存机制，这两天在看Redis，打算后面加一个缓存处理。</li>
<li>Crawler类里面使用的@classmethod装饰器，其实完全可以拿掉不要，我测试过，不用@classmtehod也没问题。用这个显得高大上，装逼效果更好。:smile:</li>
<li>Parse类里面用到的decorator装饰器，其实可以剥离出来成为一个单独的类，进一步降低耦合度。</li>
<li>可以使用profile.run(‘p.run()’)跑性能检测作业。目前最耗费时间的操作在生成PDF文件那一步，爬取网页操作其实要不了多少时间。</li>
</ol>
<p><strong>附GitHub地址：</strong></p>
<ul>
<li><a href="https://github.com/benbendemo/learning-python/tree/master/python-crawler" target="_blank" rel="external">使用Python爬虫下载电子书</a></li>
</ul>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://wkhtmltopdf.org/usage/wkhtmltopdf.txt" target="_blank" rel="external">PDFKIT参数说明</a>​</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Requests </tag>
            
            <tag> pdfkit </tag>
            
            <tag> BeautifulSoup </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python数据分析之泰坦尼克沉船统计]]></title>
      <url>/2018/03/15/kaggle-titanic/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/15/kaggle-titanic/anthony-metcalfe-559306-unsplash.jpg" alt="Ship"></p>
<p>（Photo by <a href="https://unsplash.com/photos/vnz2XeO2Y-g?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Anthony Metcalfe</a> on <a href="https://unsplash.com/search/photos/titanic-ship?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>前段时间看到<a href="https://github.com/jmportilla/Udemy-notes" target="_blank" rel="external"><strong>jmportilla</strong></a>这篇<a href="http://nbviewer.jupyter.org/github/jmportilla/Udemy-notes/blob/master/Intro%20to%20Data%20Projects%20-%20Titanic.ipynb" target="_blank" rel="external"><strong>Kaggle Titanic Challenge</strong></a>文章时，我把它实现了出来。</p>
<p>目前处于学习阶段，只能通过大量动手实践，才能提升水平，免不了模仿别人。看着人家做出来的东西感觉很轻松，自己亲自动手做一遍才知道其实不容易。原文中注释都使用英文来写，很多地方不大好理解，本文添加了很多翻译，可能更容易理解一些。亲自动手做一遍，能够体会到Python数据分析的乐趣，也是促使你继续学习下去的动力。</p>
<p><strong>数据准备</strong></p>
<p>需要到<a href="https://www.kaggle.com/c/titanic/data" target="_blank" rel="external">Kaggle官网</a>下载泰坦尼克沉船数据。（需翻墙）</p>
<p><strong>环境准备</strong></p>
<p>macOS 10.11.6 + Anaconda Navigator 1.2.1 + Python 2.7.12<br>主要用到的是Python数据分析那一套包，只要安装Anaconda，那些包就自动全部包括在内。其次是安装Seaborn进行图形输出处理。</p>
<p><strong>执行结果</strong></p>
<p>用Anaconda里面Jupyter Notebook一步步写完整个过程后，将得到的Titanic.ipynb文件使用Jupyter NBViewer进行转换，得到<a href="http://nbviewer.jupyter.org/github/benbendemo/learning-python/blob/master/titanic/Titanic.ipynb" target="_blank" rel="external">泰坦尼克沉船数据</a>这个链接，观看更加直观。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> 泰坦尼克沉船 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python元类的一个疑惑]]></title>
      <url>/2018/03/14/python-metaclass/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/14/python-metaclass/cosmic-timetraveler-19924-unsplash.jpg" alt="Magic place"></p>
<p>（Photo by <a href="https://unsplash.com/photos/pYyOZ8q7AII?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Cosmic Timetraveler</a> on <a href="https://unsplash.com/search/photos/magic?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>）</p>
<p>Python高级语法里面的元类，之前一直没有看懂，今天重新看讲解元类的文章。这篇<a href="http://python.jobbole.com/21351/" target="_blank" rel="external">深刻理解Python中的元类(metaclass)</a>翻译Stack Overflow上面<a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="external">大神e-satis对元类的讲解</a>，讲解得十分清楚，看完后我对元类的理解豁然开朗。</p>
<p>下面是结合代码（基于Python 2.7环境）进行实操。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayMetaClass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    元类作用主要是创建类时动态修改类的属性，这里我们在SayMetaClass里重写__new__函数，当创建这个类的</span></div><div class="line"><span class="string">    实例时候，会将"say_XXX"这种形式的属性定义为方法</span></div><div class="line"><span class="string">    '''</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">		attrs[<span class="string">'say_'</span> + name] = <span class="keyword">lambda</span> self,value,saying=name: (saying+<span class="string">','</span>+value+<span class="string">'!'</span>)</div><div class="line">		<span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># 指示使用SayMetaClass来定制类，有了这一句后元类魔法就会生效</span></div><div class="line">    __metaclass__ = SayMetaClass</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>编译后，查看Hello这个类的__dict__属性，可以看到有say_Hello方法，它是一个function，解释器幕后创建完Hello类之后，就生成了say_Hello方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">74</span>]: Hello.__dict__</div><div class="line">Out[<span class="number">74</span>]: </div><div class="line">dict_proxy(&#123;<span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Hello'</span> objects&gt;,</div><div class="line">            <span class="string">'__doc__'</span>: <span class="keyword">None</span>,</div><div class="line">            <span class="string">'__metaclass__'</span>: __main__.SayMetaClass,</div><div class="line">            <span class="string">'__module__'</span>: <span class="string">'__main__'</span>,</div><div class="line">            <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Hello'</span> objects&gt;,</div><div class="line">            <span class="string">'say_Hello'</span>: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;&#125;)</div></pre></td></tr></table></figure>
<p>接下来，我们new一个实例对象hello，然后调用say_Hello方法（注意：一定要是say_Hello，使用say_hello或别的格式都会报错，因为和SayMetaClass里面__new__函数定义的格式不匹配），传入参数’jackson’，成功打印预期结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">64</span>]: hello = Hello()</div><div class="line">In [<span class="number">65</span>]: hello.say_Hello(<span class="string">'jackson'</span>)</div><div class="line">Out[<span class="number">65</span>]: <span class="string">'Hello,jackson!'</span></div></pre></td></tr></table></figure>
<p>既然这样，我使用type元类来新建一个Bye类，创建实例bye，然后执行bye.say_Bye(‘andrew’)方法应该也是可以成功的。查看Bye.__dict__，结果发现Bye类没有这个say_Bye这个方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">76</span>]: Bye = type(<span class="string">'Bye'</span>,(object,),&#123;<span class="string">'__metaclass__'</span>:SayMetaClass&#125;)</div><div class="line"></div><div class="line">In [<span class="number">77</span>]: <span class="keyword">print</span> Bye</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Bye</span>'&gt;</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">In</span> [78]:</span> Bye.__dict__</div><div class="line">Out[<span class="number">78</span>]: </div><div class="line">dict_proxy(&#123;<span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Bye'</span> objects&gt;,</div><div class="line">            <span class="string">'__doc__'</span>: <span class="keyword">None</span>,</div><div class="line">            <span class="string">'__metaclass__'</span>: __main__.SayMetaClass,</div><div class="line">            <span class="string">'__module__'</span>: <span class="string">'__main__'</span>,</div><div class="line">            <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Bye'</span> objects&gt;&#125;)</div></pre></td></tr></table></figure>
<p>我们new一个实例对象bye，调用say_Bye方法，提示没有这个属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">79</span>]: bye = Bye()</div><div class="line"></div><div class="line">In [<span class="number">80</span>]: bye.say_Bye(<span class="string">'andrew'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line"></div><div class="line">  File <span class="string">"&lt;ipython-input-80-07a0df2d8098&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    bye.say_Bye(<span class="string">'andrew'</span>)</div><div class="line"></div><div class="line">AttributeError: <span class="string">'Bye'</span> object has no attribute <span class="string">'say_Bye'</span></div></pre></td></tr></table></figure>
<p>我没想明白这里面的原因。谁知道答案？请指点一下。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://python.jobbole.com/21351/" target="_blank" rel="external">深刻理解Python中的元类(metaclass)</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="external">What are metaclasses in Python?</a></p>
</li>
<li><p><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820064557c69858840b4c48d2b8411bc2ea9099ba000#0" target="_blank" rel="external">使用元类</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 元类 </tag>
            
            <tag> metaclass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[部署Python Flasky项目到Heroku]]></title>
      <url>/2018/03/09/deploy-flaskapp-onto-heroku/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180309-175951@2x_1.jpg" alt="Heroku Interface"></p>
<p>(题图来自Heroku官网截图，注册Heroku需要翻墙)</p>
<p>学习完《FlaskWeb开发：基于Python的Web应用开发实战》(第一版)后，我参照本书及网络上的方法将<a href="https://github.com/miguelgrinberg/flasky-first-edition.git" target="_blank" rel="external"><strong>Flasky项目第一版</strong></a>成功部署到Heroku，这里是README.md说明纪录。部署上线网址:<a href="https://mgflask.herokuapp.com" target="_blank" rel="external">https://mgflask.herokuapp.com</a></p>
<p>部署项目上线对我来说并不是一件容易的事，Flaskapp项目代码全部来自于flasky-first-edition，不过结合实际业务测试和功能测试，对很多地方进行了修改，部署分为两个部分，Part1是提取正确的git版本，Part2是push代码到Heroku。</p>
<a id="more"></a>
<h4 id="Part1-提取正确的git版本"><a href="#Part1-提取正确的git版本" class="headerlink" title="Part1: 提取正确的git版本"></a>Part1: 提取正确的git版本</h4><p>首先参考<a href="http://cocode.cc/t/first-update-heroku/3711" target="_blank" rel="external">(first update)终于成功部署在heroku上了，欢迎交流</a>里面的第一、二两步提取正确代码版本，这两步操作过程中，我踩过的坑如下。</p>
<h4 id="Flasky项目版本"><a href="#Flasky项目版本" class="headerlink" title="Flasky项目版本"></a>Flasky项目版本</h4><p>作者guog是在15年11月部署的，现在是18年3月，时间隔了这么久，Miguel Grinberg的Flasky项目本身就迭代了很多版本。我使用的书是《FlaskWeb开发：基于Python的Web应用开发实战》第一版，因此Flasky版本必须使用<strong><a href="https://github.com/miguelgrinberg/flasky-first-edition.git" target="_blank" rel="external">Flasky项目第一版</a></strong>，一开始我取错了版本，拿的是<strong><a href="https://github.com/miguelgrinberg/flasky.git" target="_blank" rel="external">Flasky项目第二版</a></strong>，参照guog操作时总是弄不对。千万注意这一点。</p>
<h4 id="Github-checkout操作务必熟练"><a href="#Github-checkout操作务必熟练" class="headerlink" title="Github checkout操作务必熟练"></a>Github checkout操作务必熟练</h4><p>部署项目到Heroku这个过程很考验对Git命令的熟练程度，如果你对Git命令各种操作已经驾轻就熟，那么相对来说，这里你会容易很多。我在实际部署中，采用的是<a href="http://cocode.cc/t/flask-heroku/4253" target="_blank" rel="external">分享一下flask程序部署到heroku平台的过程</a>作者Rain建议的17c版本，并没有使用guog同学说的17d版本。以下是Rain同学建议使用17c的理由。</p>
<blockquote>
<p>3.要使用Heroku,程序必须托管在远程Git仓库中，本地也要有一个一样的Git仓库。你的程序代码应该与作者代码的版本”17c“类似,17b也行,不过用17c的话部署的过程就不用再打代码和提交变动到远程仓库，所以我建议是用17c。（ps 17d版本是把程序架设在传统的托管上的， 跟部署在Heroku无关）</p>
</blockquote>
<p>通过这篇<a href="http://blog.csdn.net/github_35160620/article/details/53869906" target="_blank" rel="external">Git如何clone非maser分支代码</a>讲解git checkout命令的文章，我弄明白了git checkout操作，不带疑问地将17c版本提取出来。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-174649.jpg" alt="git branch"></p>
<p>将flasky-first-edition clone到本地后，使用git branch和git tag命令可以检查当前分支和所有历史版本。然后使用“git checkout 17c”就可以提取我们需要的17c版本。这两个命令现在对我来说驾轻就熟，但解决问题之前，花费了我不少时间。</p>
<h4 id="拷贝Git代码注意事项"><a href="#拷贝Git代码注意事项" class="headerlink" title="拷贝Git代码注意事项"></a>拷贝Git代码注意事项</h4><p>我按照作者guog描述的步骤，使用”git clone <a href="https://github.com/benbendemo/Flaskapp" target="_blank" rel="external">https://github.com/benbendemo/Flaskapp</a>“ 操作先在本地建立了一个Flaskapp仓库（注意:一开始Flaskapp是空仓库）。然后将flasky-first-edition里面全部内容拷贝到Flaskapp里面来，有前辈提醒注意不要把flasky-first-edition包里的.git文件夹拷贝到待部署的仓库（我的就是Flaskapp），否则后面会出错。可能我使用的是Mac，并没有发生这个情况。</p>
<p>Mac终端里使用”ls -a”查看目录，使用”open .git”可以打开.git文件夹（<strong>真的是文件夹！</strong>）。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-175754.jpg" alt=".git文件夹"></p>
<p>点击.git文件夹里面的config文本文件，可以查看当前git仓库的源信息。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-175911.jpg" alt=".git文件夹信息"></p>
<p>我就是使用这种方法，确保从flasky-first-edition包拷贝到Flaskapp包，git配置信息没有弄错。</p>
<h4 id="Part2-push代码到Heroku"><a href="#Part2-push代码到Heroku" class="headerlink" title="Part2: push代码到Heroku"></a>Part2: push代码到Heroku</h4><p>部署过程过程参照作者Rain这篇<a href="http://cocode.cc/t/flask-heroku/4253" target="_blank" rel="external">分享一下flask程序部署到heroku平台的过程</a>文章。当然，部署过程中出现很多问题，他这篇文章写于2015年12月，相对现在也有些古老。Heroku平台本身进行了迭代升级，比如postgresql版本升级到了10.2，requirements.txt里面需要安装的驱动psycopg2对应也需要使用新的版本。另外，需要提一下的是，<u>文中提醒在程序修改数据库的地方都加上”db.session.commit()”</u>。我没有这样做，直接用的17c源码，部署成功后测试各个功能，没有出现任何问题。</p>
<h4 id="Heroku创建数据库名称发生变化"><a href="#Heroku创建数据库名称发生变化" class="headerlink" title="Heroku创建数据库名称发生变化"></a>Heroku创建数据库名称发生变化</h4><p>基本操作和Rain同学的一致，只不过现在创建出来的Postgresql数据库，名称不是他文中所写的形式，现在变成”postgresql-concave-36557”这种形式。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-181147@2x.jpg" alt="heroku create postgresql"></p>
<p>使用Heroku config设置好环境变量后，就可以将本地Flaskapp仓库里面的内容提交到Heroku服务器。设置config变量参照Rain同学文中步骤即可，我就不多余贴图了。</p>
<h4 id="Delopy到Heroku注意事项"><a href="#Delopy到Heroku注意事项" class="headerlink" title="Delopy到Heroku注意事项"></a>Delopy到Heroku注意事项</h4><p>注意，Rain同学文章中，在设置好config参数后，直接使用”git push heroku master”进行Deploy，这是有问题的，完整的git提交命令如下，这也是Heroku官方给出的Deploy操作。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">"make it better"</span>(描述信息可以随便输，会保存到git操作记录里面)</span></div></pre></td></tr></table></figure>
<h4 id="创建runtime-txt文件"><a href="#创建runtime-txt文件" class="headerlink" title="创建runtime.txt文件"></a>创建runtime.txt文件</h4><p>我在push代码过程中，遇到图中”No default language could be detected for this app”的问题。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-182814.jpg" alt="buildpack error"></p>
<p>上面这个问题，在Flaskapp仓库下面使用”git init”命令即可解决，解决后重新push时提示安装的是python 3.6.4版本，因为Heroku现在对新建的Python应用默认都使用<code>python-3.6.4</code>版本。在参考SO人家的发帖后，通过Heroku官网给出关于<a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="external">Buildpacks</a>和<a href="https://devcenter.heroku.com/articles/python-runtimes#supported-python-runtimes" target="_blank" rel="external">Python runtime</a>的提示，我创建了runtime.txt文件，加入到了Flaskapp包的根目录。</p>
<p>在Mac终端Flaskapp目录下使用”touch runtime.txt”即可创建文件，文件内容用来指定Heroku部署项目时使用的编译环境，这里我使用<code>python-2.7.14</code>。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-182003.jpg" alt="runtime.txt"></p>
<h4 id="安装Postgresql驱动包psycopg2报错"><a href="#安装Postgresql驱动包psycopg2报错" class="headerlink" title="安装Postgresql驱动包psycopg2报错"></a>安装Postgresql驱动包psycopg2报错</h4><p>解决了Python部署问题后，我以为可以大功告成，没想到在安装psycopg2包时出现报错。报错提示：”Error: could not determine PostgreSQL version from ‘10.3’”，在SO和github上都搜不到解决办法。最后想到可能是psycopg2包和当前Postgresql版本不匹配的原因。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-184234.jpg" alt="Download psycopg2报错"></p>
<p>使用”heroku pg:info”查看Heroku服务器里面Postgresql当前版本，版本号为10.2。</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180307-183620.jpg" alt="Heroku pg version"></p>
<p>查询psycopg2官网后，最新版本是psycopg2 2.7.4。于是将requirements.txt文件”psycopg2==2.5.1”换成”psycopg2==2.7.4”。重新push后，Deploy成功。</p>
<h4 id="部署成功信息"><a href="#部署成功信息" class="headerlink" title="部署成功信息"></a>部署成功信息</h4><p>忍不住贴出部署成功信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">JacksonShawnMBP:Flaskapp jacksonshawn$ git push heroku master</div><div class="line">Counting objects: 96, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (86/86), done.</div><div class="line">Writing objects: 100% (96/96), 33.59 KiB | 0 bytes/s, done.</div><div class="line">Total 96 (delta 20), reused 0 (delta 0)</div><div class="line">remote: Compressing source files... done.</div><div class="line">remote: Building source:</div><div class="line">remote: </div><div class="line">remote: -----&gt; Python app detected</div><div class="line">remote: -----&gt; Installing python-2.7.14</div><div class="line">remote: -----&gt; Installing pip</div><div class="line">remote: -----&gt; Installing requirements with pip</div><div class="line">remote:        Collecting Flask==0.12 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 1))</div><div class="line">remote:          Downloading Flask-0.12-py2.py3-none-any.whl (82kB)</div><div class="line">remote:        Collecting Flask-Bootstrap==3.0.3.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 2))</div><div class="line">remote:          Downloading Flask-Bootstrap-3.0.3.1.tar.gz (250kB)</div><div class="line">remote:        Collecting Flask-HTTPAuth==2.7.0 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 3))</div><div class="line">remote:          Downloading Flask-HTTPAuth-2.7.0.tar.gz</div><div class="line">remote:        Collecting Flask-Login==0.3.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 4))</div><div class="line">remote:          Downloading Flask-Login-0.3.1.tar.gz</div><div class="line">remote:        Collecting Flask-Mail==0.9.0 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 5))</div><div class="line">remote:          Downloading Flask-Mail-0.9.0.tar.gz (43kB)</div><div class="line">remote:        Collecting Flask-Migrate==2.0.3 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 6))</div><div class="line">remote:          Downloading Flask-Migrate-2.0.3.tar.gz</div><div class="line">remote:        Collecting Flask-Moment==0.2.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 7))</div><div class="line">remote:          Downloading Flask-Moment-0.2.1.tar.gz</div><div class="line">remote:        Collecting Flask-PageDown==0.1.4 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 8))</div><div class="line">remote:          Downloading Flask-PageDown-0.1.4.tar.gz</div><div class="line">remote:        Collecting Flask-SQLAlchemy==2.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 9))</div><div class="line">remote:          Downloading Flask-SQLAlchemy-2.1.tar.gz (95kB)</div><div class="line">remote:        Collecting Flask-Script==2.0.5 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 10))</div><div class="line">remote:          Downloading Flask-Script-2.0.5.tar.gz (42kB)</div><div class="line">remote:        Collecting Flask-WTF==0.14.2 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 11))</div><div class="line">remote:          Downloading Flask_WTF-0.14.2-py2.py3-none-any.whl</div><div class="line">remote:        Collecting Jinja2==2.9.5 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 12))</div><div class="line">remote:          Downloading Jinja2-2.9.5-py2.py3-none-any.whl (340kB)</div><div class="line">remote:        Collecting Mako==1.0.6 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 13))</div><div class="line">remote:          Downloading Mako-1.0.6.tar.gz (575kB)</div><div class="line">remote:        Collecting Markdown==2.3.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 14))</div><div class="line">remote:          Downloading Markdown-2.3.1.tar.gz (267kB)</div><div class="line">remote:        Collecting MarkupSafe==0.23 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 15))</div><div class="line">remote:          Downloading MarkupSafe-0.23.tar.gz</div><div class="line">remote:        Collecting SQLAlchemy==1.1.5 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 16))</div><div class="line">remote:          Downloading SQLAlchemy-1.1.5.tar.gz (5.1MB)</div><div class="line">remote:        Collecting WTForms==2.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 17))</div><div class="line">remote:          Downloading WTForms-2.1.zip (553kB)</div><div class="line">remote:        Collecting Werkzeug==0.11.15 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 18))</div><div class="line">remote:          Downloading Werkzeug-0.11.15-py2.py3-none-any.whl (307kB)</div><div class="line">remote:        Collecting alembic==0.8.10 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 19))</div><div class="line">remote:          Downloading alembic-0.8.10.tar.gz (976kB)</div><div class="line">remote:        Collecting bleach==1.4.0 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 20))</div><div class="line">remote:          Downloading bleach-1.4.tar.gz</div><div class="line">remote:        Collecting blinker==1.3 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 21))</div><div class="line">remote:          Downloading blinker-1.3.tar.gz (91kB)</div><div class="line">remote:        Collecting click==6.7 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 22))</div><div class="line">remote:          Downloading click-6.7-py2.py3-none-any.whl (71kB)</div><div class="line">remote:        Collecting html5lib==1.0b3 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 23))</div><div class="line">remote:          Downloading html5lib-1.0b3.tar.gz (884kB)</div><div class="line">remote:        Collecting itsdangerous==0.24 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 24))</div><div class="line">remote:          Downloading itsdangerous-0.24.tar.gz (46kB)</div><div class="line">remote:        Collecting python-editor==1.0.3 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 25))</div><div class="line">remote:          Downloading python-editor-1.0.3.tar.gz</div><div class="line">remote:        Collecting six==1.4.1 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements/common.txt (line 26))</div><div class="line">remote:          Downloading six-1.4.1.tar.gz</div><div class="line">remote:        Collecting Flask-SSLify==0.1.4 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements.txt (line 2))</div><div class="line">remote:          Downloading Flask-SSLify-0.1.4.tar.gz</div><div class="line">remote:        Collecting gunicorn==18.0 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements.txt (line 3))</div><div class="line">remote:          Downloading gunicorn-18.0.tar.gz (366kB)</div><div class="line">remote:        Collecting psycopg2==2.7.4 (from -r /tmp/build_20fb038843640507b4fcd293d5e9fa6b/requirements.txt (line 4))</div><div class="line">remote:          Downloading psycopg2-2.7.4-cp27-cp27mu-manylinux1_x86_64.whl (2.7MB)</div><div class="line">remote:        Installing collected packages: itsdangerous, click, Werkzeug, MarkupSafe, Jinja2, Flask, Flask-Bootstrap, Flask-HTTPAuth, Flask-Login, blinker, Flask-Mail, SQLAlchemy, Flask-SQLAlchemy, Mako, python-editor, alembic, Flask-Script, Flask-Migrate, Flask-Moment, WTForms, Flask-PageDown, Flask-WTF, Markdown, six, html5lib, bleach, Flask-SSLify, gunicorn, psycopg2</div><div class="line">remote:          Running setup.py install for itsdangerous: started</div><div class="line">remote:            Running setup.py install for itsdangerous: finished with status 'done'</div><div class="line">remote:          Running setup.py install for MarkupSafe: started</div><div class="line">remote:            Running setup.py install for MarkupSafe: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Bootstrap: started</div><div class="line">remote:            Running setup.py install for Flask-Bootstrap: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-HTTPAuth: started</div><div class="line">remote:            Running setup.py install for Flask-HTTPAuth: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Login: started</div><div class="line">remote:            Running setup.py install for Flask-Login: finished with status 'done'</div><div class="line">remote:          Running setup.py install for blinker: started</div><div class="line">remote:            Running setup.py install for blinker: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Mail: started</div><div class="line">remote:            Running setup.py install for Flask-Mail: finished with status 'done'</div><div class="line">remote:          Running setup.py install for SQLAlchemy: started</div><div class="line">remote:            Running setup.py install for SQLAlchemy: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-SQLAlchemy: started</div><div class="line">remote:            Running setup.py install for Flask-SQLAlchemy: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Mako: started</div><div class="line">remote:            Running setup.py install for Mako: finished with status 'done'</div><div class="line">remote:          Running setup.py install for python-editor: started</div><div class="line">remote:            Running setup.py install for python-editor: finished with status 'done'</div><div class="line">remote:          Running setup.py install for alembic: started</div><div class="line">remote:            Running setup.py install for alembic: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Script: started</div><div class="line">remote:            Running setup.py install for Flask-Script: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Migrate: started</div><div class="line">remote:            Running setup.py install for Flask-Migrate: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-Moment: started</div><div class="line">remote:            Running setup.py install for Flask-Moment: finished with status 'done'</div><div class="line">remote:          Running setup.py install for WTForms: started</div><div class="line">remote:            Running setup.py install for WTForms: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-PageDown: started</div><div class="line">remote:            Running setup.py install for Flask-PageDown: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Markdown: started</div><div class="line">remote:            Running setup.py install for Markdown: finished with status 'done'</div><div class="line">remote:          Running setup.py install for six: started</div><div class="line">remote:            Running setup.py install for six: finished with status 'done</div><div class="line">remote:          Running setup.py install for html5lib: started</div><div class="line">remote:            Running setup.py install for html5lib: finished with status 'done'</div><div class="line">remote:          Running setup.py install for bleach: started</div><div class="line">remote:            Running setup.py install for bleach: finished with status 'done'</div><div class="line">remote:          Running setup.py install for Flask-SSLify: started</div><div class="line">remote:            Running setup.py install for Flask-SSLify: finished with status 'done'</div><div class="line">remote:          Running setup.py install for gunicorn: started</div><div class="line">remote:            Running setup.py install for gunicorn: finished with status 'done'</div><div class="line">remote:        Successfully installed Flask-0.12 Flask-Bootstrap-3.0.3.1 Flask-HTTPAuth-2.7.0 Flask-Login-0.3.1 Flask-Mail-0.9.0 Flask-Migrate-2.0.3 Flask-Moment-0.2.1 Flask-PageDown-0.1.4 Flask-SQLAlchemy-2.1 Flask-SSLify-0.1.4 Flask-Script-2.0.5 Flask-WTF-0.14.2 Jinja2-2.9.5 Mako-1.0.6 Markdown-2.3.1 MarkupSafe-0.23 SQLAlchemy-1.1.5 WTForms-2.1 Werkzeug-0.11.15 alembic-0.8.10 bleach-1.4 blinker-1.3 click-6.7 gunicorn-18.0 html5lib-1.0b3 itsdangerous-0.24 psycopg2-2.7.4 python-editor-1.0.3 six-1.4.1</div><div class="line">remote: </div><div class="line">remote:  !     Hello! Your requirements.txt file contains the six package.</div><div class="line">remote:  !     This library is automatically installed by Heroku and shouldn't be in</div><div class="line">remote:  !     Your requirements.txt file. This can cause unexpected behavior.</div><div class="line">remote:  !       -- Much Love, Heroku.</div><div class="line">remote: </div><div class="line">remote: -----&gt; Discovering process types</div><div class="line">remote:        Procfile declares types -&gt; web</div><div class="line">remote: </div><div class="line">remote: -----&gt; Compressing...</div><div class="line">remote:        Done: 36.3M</div><div class="line">remote: -----&gt; Launching...</div><div class="line">remote:        Released v7</div><div class="line">remote:        https://mgflask.herokuapp.com/ deployed to Heroku</div><div class="line">remote: </div><div class="line">remote: Verifying deploy... done.</div><div class="line">To https://git.heroku.com/mgflask.git</div><div class="line"> * [new branch]      master -&gt; master</div></pre></td></tr></table></figure>
<p>最后执行下面两行命令，<a href="https://mgflask.herokuapp.com" target="_blank" rel="external">https://mgflask.herokuapp.com</a> 网站可以正常访问。撒花！</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">heroku run python manage.py deploy</div><div class="line">heroku restart</div></pre></td></tr></table></figure>
<h4 id="更新代码到Github"><a href="#更新代码到Github" class="headerlink" title="更新代码到Github"></a>更新代码到Github</h4><p>最后将本地Flaskapp里面全部代码更新到我的Github远程仓库。</p>
<blockquote>
<p>git add .<br>git commit -m “ver 1.0” (描述信息可以随便输，会保存到git操作记录里面)<br>git push -u origin master </p>
</blockquote>
<h4 id="Heroku-App测试成功截图"><a href="#Heroku-App测试成功截图" class="headerlink" title="Heroku App测试成功截图"></a>Heroku App测试成功截图</h4><p>使用邮箱注册，能成功收到管理员发送的“账户确认”邮件，点击确认链接，邮箱注册确认成功。登陆后，在Home页面，能过成功显示写博客页面。（奇怪的是，我在本地Mac电脑使用17c和17d，安装这个步骤操作，注册邮箱等能够成功，但始终没有写博客页面，不知道为什么？）</p>
<p><img src="/2018/03/09/deploy-flaskapp-onto-heroku/Jietu20180309-174226%402x.jpg" alt="Heroku Home Page"></p>
<p>测试能够成功，Flaskapp这个练手项目就先到这里，我需要腾出时间去做其它的事情。日后有空再做完善吧。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="http://cocode.cc/t/first-update-heroku/3711" target="_blank" rel="external">(first update)终于成功部署在heroku上了，欢迎交流</a></li>
<li><a href="http://cocode.cc/t/flask-heroku/4253" target="_blank" rel="external">分享一下flask程序部署到heroku平台的过程</a></li>
<li><a href="http://cocode.cc/t/flasky-heroku/6589" target="_blank" rel="external">【flasky/heroku/部署】（欢迎大家挑刺和补充）可能是目前为止最详细的了</a></li>
<li><a href="https://www.jianshu.com/p/7bc34e56fa39" target="_blank" rel="external">Heroku 使用教程</a></li>
<li><a href="http://www.cnblogs.com/lazyJavaer-lyn/p/6890388.html" target="_blank" rel="external">使用git将本地代码项目上传到github</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Heroku </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask学习笔记]]></title>
      <url>/2018/02/27/learning-flask/</url>
      <content type="html"><![CDATA[<p><img src="/2018/02/27/learning-flask/logo-full.png" alt="Flask Logo"></p>
<p>学习一门语言，除了熟悉语法知识之外，还需要懂一个框架，这样才具备生产力。Python生态强大在于它有众多各式各样的第三方包，有时光会Python语法解决不了问题，必须结合第三方框架协同来完成任务。</p>
<p>这里是我学习Flask Web开发过程中整理的笔记，我使用的资料是大名鼎鼎的“狗书”第一版和Flask官网手册。学习方法是照着“狗书”里面的内容依葫芦画瓢一步一步地边写边测。书作者<a href="https://flaskbook.com" target="_blank" rel="external">Miguel Grinberg</a>的网站上有最新版的内容，想获取第二版或视频教程可以移步观看。</p>
<p><img src="/2018/02/27/learning-flask/cover-of-flask-web-development.png" alt="cover of flask web development"></p>
<p>这篇博文纪录学习过程中遇到的重点和难点，前后没有相关性，属于看到哪儿写到哪儿那种，大部分是摘抄，有个人思考的部分是“<strong><a href="#jump1">同步发送邮件？异步发送邮件？</a></strong>” 、“<strong><a href="#jump2">数据库多对多关联关系</a></strong>” 、“<strong><a href="#jump3">部署Python Flasky程序到Heroku</a></strong>”这几节。</p>
<p>如果读者朋友发现哪里有写得不对的地方，欢迎指正。</p>
<h3 id="Flask网址重定向问题"><a href="#Flask网址重定向问题" class="headerlink" title="Flask网址重定向问题"></a>Flask网址重定向问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/projects/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'The project page'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/about')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'The about page'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个例子中，当你在浏览器中访问<a href="http://127.0.0.1:5000/projects" target="_blank" rel="external">http://127.0.0.1:5000/projects</a> 时（注意，这个URL最后面没有跟随斜线），会自动定向到<a href="http://127.0.0.1:5000/projects/" target="_blank" rel="external">http://127.0.0.1:5000/projects/</a> 页面，访问两个页面是同一个效果。</p>
<p>但是，当你访问<a href="http://127.0.0.1:5000/about/" target="_blank" rel="external">http://127.0.0.1:5000/about/</a> 时，会提示404报错。访问<a href="http://127.0.0.1:5000/about" target="_blank" rel="external">http://127.0.0.1:5000/about</a> 才能得到预期结果。</p>
<p>这两个路由的本质区别，就是网址的重定向问题。第一种情况中，规范的URL指向projects尾端有一个斜线。这种感觉很像在文件系统中的文件夹。访问一个结尾不带斜线的URL会被Flask重定向到带斜线的规范URL上面。第二种情况的URL结尾不带斜线，类似UNIX-like系统下的文件的路径名。访问结尾带斜线的 URL 会产生一个“404 Not Found”错误。</p>
<h3 id="上下文全局变量"><a href="#上下文全局变量" class="headerlink" title="上下文全局变量"></a>上下文全局变量</h3><p>客户端发送的请求对象被Flask作为参数传入到视图函数中进行处理，如果视图函数在访问请求对象外，还需要其它对象，那么会变得异常复杂。于是Flask使用上下文将一些对象变成了全局变量。</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th style="text-align:left">上下文</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>current_app</td>
<td style="text-align:left">程序上下文</td>
<td style="text-align:left">当前激活程序的程序实例</td>
</tr>
<tr>
<td>g</td>
<td style="text-align:left">程序上下文</td>
<td style="text-align:left">处理请求时用作临时存储的对象。每次请求都会重设这个变量</td>
</tr>
<tr>
<td>request</td>
<td style="text-align:left">请求上下文</td>
<td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td>
</tr>
<tr>
<td>session</td>
<td style="text-align:left">请求上下文</td>
<td style="text-align:left">用户会话，用于处理请求之间需要记住的”值”的字典</td>
</tr>
</tbody>
</table>
<p>下面这个例子中，视图函数把request当作全局变量使用。要注意，这里把request用作全局变量是指在一个线程中作为全局变量使用用，不会干扰其它线程。多线程服务器中，不同线程处理不同客户端发送的不同请求时，每个线程看到的request对象必然各不不同。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">	user_agent=request.headers.get(<span class="string">'User-Agent'</span>)</div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;p&gt;Your browser is %s&lt;/p&gt;'</span> % user_agent</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h3 id="URL构建函数"><a href="#URL构建函数" class="headerlink" title="URL构建函数"></a>URL构建函数</h3><p>使用url_for()这个构建函数来给视图函数构造 URL。它接受函数名作为第一个参数，接收关键字参数作为第二个参数，关键字参数对应URL规则的变量部分。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/hello')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'Index Page'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/user/&lt;username&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span><span class="params">(username)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'User %s'</span> % username</div><div class="line"></div><div class="line"><span class="meta">@app.route('/post/&lt;int:post_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span><span class="params">(post_id)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'Post %d'</span> % post_id</div><div class="line"></div><div class="line"><span class="meta">@app.route('/projects/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'The project page'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/about')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'The about page'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	<span class="keyword">with</span> app.test_request_context():</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'hello_world'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'index'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'show_user_profile'</span>,username=<span class="string">'jack'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'show_post'</span>,post_id=<span class="string">'1'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'projects'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'about'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'about'</span>,next=<span class="string">'/'</span>)</div><div class="line">		<span class="keyword">print</span> url_for(<span class="string">'static'</span>, filename=<span class="string">'style.css'</span>)</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>查看with app.test_request_context()函数执行完的结果，如下：</p>
<pre><code>/hello
/
/user/jack
/post/1
/projects/
/about
/about?next=%2F
/static/style.css
</code></pre><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>有些场景下，Flask在处理请求之前或之后，需要执行特定功能的代码。比如，在请求开始前，要创建数据库连接或对发起请求的用户进行认证。为了避免每个视图函数中都使用重复的代码，Flask设计了4种钩子函数来实现这些功能。</p>
<ul>
<li>before_first_request : 注册一个函数，在处理第一个请求之前运行。</li>
<li>before_request : 注册一个函数，在每次请求之前运行。</li>
<li>after_request : 注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</li>
<li>teardown_request : 注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</li>
</ul>
<p>钩子函数和视图函数之间共享数据一般使用上下文全局变量g。例如，before_request 处理程序可以从数据库中加载已登录用户，并将其保存到 g.user 中。随后调用视图函数时，视图函数再使用 g.user 获取用户。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</div><div class="line"></div><div class="line">DATABASE = <span class="string">'/database.db'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> sqlite3.connect(DATABASE)</div><div class="line"></div><div class="line"><span class="meta">@app.before_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></div><div class="line">    g.db = connect_db()</div><div class="line"></div><div class="line"><span class="comment"># teardown_request在请求结束时运行，即使before_request运行失败或者从未运行过。</span></div><div class="line"><span class="meta">@app.teardown_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_request</span><span class="params">(exception)</span>:</span></div><div class="line">    <span class="keyword">if</span> hasattr(g, <span class="string">'db'</span>):</div><div class="line">        g.db.close()</div></pre></td></tr></table></figure>
<h3 id="错误代码重定向"><a href="#错误代码重定向" class="headerlink" title="错误代码重定向"></a>错误代码重定向</h3><p>下面这个例子使用redirect和url_for()构造函数将主页(‘/’)重定向到login页面，login页面调用abort函数返回401报错。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line"></div><div class="line"><span class="meta">@app.route('/login')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">	<span class="comment"># abort函数放弃请求并返回错误代码</span></div><div class="line">	<span class="comment"># 401表示禁止访问,200表示一切正常,404表示页面不存在</span></div><div class="line">	abort(<span class="number">401</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用errorhandler()装饰器可以定制错误页面，下面定制401报错信息，当然也可以使用render_template('page_error.html')将401报错重定向到一个页面</span></div><div class="line"><span class="comment"># page_error函数类似于视图函数，它有另外一个名称叫做错误处理器，现在当人家提到错误处理器，你能明白人家说的是什么东西了</span></div><div class="line"><span class="meta">@app.errorhandler(401)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_error</span><span class="params">(error)</span>:</span></div><div class="line">	<span class="comment">#return render_template('page_not_found.html'),401</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'Page occurs error,error code is 401'</span></div><div class="line">	</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>在使用app.errorhandler(401)装饰器重定向之前，执行程序，返回“Unauthorized</p>
<p>The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn’t understand how to supply the credentials required.”报错。</p>
<p><img src="/2018/02/27/learning-flask/Jietu20180227-172832@2x.jpg" alt="401禁止访问"></p>
<p>使用app.errorhandler(401)装饰器进行401报错重定向后，执行程序，返回结果变成“Page occurs error,error code is 401”。</p>
<p><img src="/2018/02/27/learning-flask/Jietu20180227-173238@2x.jpg" alt="401报错重定向"></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>上传文件的基本工作流程如下：</p>
<ol>
<li>存在一个&lt;form&gt;标签，enctype值等于“multipart/form-data”，&lt;form&gt;标签里面包含&lt;input type=file&gt;标签。</li>
<li>WSGI应用程序通过request请求上下文里面的files字典访问文件。</li>
<li>使用文件的save()方法将文件保存到指定的目录。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Tue Feb 28 10:41:05 2018</span></div><div class="line"><span class="string">#func:测试Flask上传文件</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,request,abort,escape,session,flash</div><div class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</div><div class="line"></div><div class="line"><span class="comment"># UPLOAD_FOLDER存储上传文件的地方,必须写全路径,使用相对路径然后在file.save操作那里进行路径拼接不成功</span></div><div class="line">UPLOAD_FOLDER  = <span class="string">'/Users/jacksonshawn/PythonCodes/pythonlearning/flask2/upload'</span></div><div class="line"></div><div class="line"><span class="comment"># 允许上传文件类型的集合</span></div><div class="line">ALLOWED_EXTENSIONS = set([<span class="string">'txt'</span>,<span class="string">'pdf'</span>,<span class="string">'png'</span>,<span class="string">'jpg'</span>,<span class="string">'jpeg'</span>,<span class="string">'gif'</span>,<span class="string">'html'</span>,<span class="string">'csv'</span>])</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"><span class="comment"># 配置上传文件目录</span></div><div class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = UPLOAD_FOLDER</div><div class="line"><span class="comment"># 生成一个随机的密钥</span></div><div class="line">app.secret_key = os.urandom(<span class="number">24</span>)</div><div class="line"><span class="comment"># 涉资上传文件限制为最大16M</span></div><div class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">16</span> * <span class="number">1024</span> * <span class="number">1024</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">'.'</span>,<span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> ALLOWED_EXTENSIONS</div><div class="line"></div><div class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">		file = request.files[<span class="string">'file'</span>]</div><div class="line">		<span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</div><div class="line">			filename = secure_filename(file.filename)</div><div class="line">			<span class="comment">#print "filename is:",filename</span></div><div class="line">			<span class="comment">#print "cwd is:",os.getcwd()</span></div><div class="line">			<span class="comment">#print "file path:",os.path.join(app.root_path,app.config['UPLOAD_FOLDER'],filename)</span></div><div class="line">			<span class="comment">#print "path __file__:",os.path.dirname('__file__')</span></div><div class="line">			file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>],filename))</div><div class="line">			<span class="keyword">return</span> redirect(url_for(<span class="string">'uploaded_file'</span>,filename=filename))</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> <span class="string">"file type not allowed"</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'''</span></div><div class="line"><span class="string">	&lt;!doctype html&gt;</span></div><div class="line"><span class="string">	&lt;title&gt;Upload new File&lt;/title&gt;</span></div><div class="line"><span class="string">	&lt;h1&gt;Upload new file&lt;/h1&gt;</span></div><div class="line"><span class="string">	&lt;form action="" method=post enctype=multipart/form-data&gt;</span></div><div class="line"><span class="string">		&lt;p&gt;</span></div><div class="line"><span class="string">			&lt;input type=file name=file&gt;</span></div><div class="line"><span class="string">			&lt;input type=submit value=upload&gt;</span></div><div class="line"><span class="string">		&lt;/p&gt;</span></div><div class="line"><span class="string">	&lt;/form&gt;</span></div><div class="line"><span class="string">	'''</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/upload/&lt;filename&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploaded_file</span><span class="params">(filename)</span>:</span></div><div class="line">	<span class="comment"># send_from_directory将上传的文件读取到浏览器中显示，如果设置as_attachment为True，则该文件会在浏览器中自动下载</span></div><div class="line">	<span class="keyword">return</span> send_from_directory(app.config[<span class="string">'UPLOAD_FOLDER'</span>],filename)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h3 id="Flask-SQLAlchemy数据类型"><a href="#Flask-SQLAlchemy数据类型" class="headerlink" title="Flask-SQLAlchemy数据类型"></a>Flask-SQLAlchemy数据类型</h3><p>SQLAlchemy这个ORM框架将面向对象操作转换为底层的数据库指令。我们不需要去管底层如何实现这种转换（当然，如果有兴趣学习一下Python的元类，弄懂底层实现机制也不是特别难的事），只需要将重点放在如何实现类的定义以及方法的调用上即可。</p>
<p>下面是SQLAlschemy常用的数据类型。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型名</th>
<th>Python类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Integer</td>
<td>int</td>
<td>普通整数，一般是32位</td>
</tr>
<tr>
<td style="text-align:left">SmallInteger</td>
<td>int</td>
<td>取值范围小的整数，一般是16位</td>
</tr>
<tr>
<td style="text-align:left">BigInteger</td>
<td>int或long</td>
<td>不限制精度的整数</td>
</tr>
<tr>
<td style="text-align:left">Float</td>
<td>float</td>
<td>浮点数</td>
</tr>
<tr>
<td style="text-align:left">Numeric</td>
<td>decimal.Decimal</td>
<td>定点数</td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td>str</td>
<td>变长字符串</td>
</tr>
<tr>
<td style="text-align:left">Text</td>
<td>str</td>
<td>变长字符串，对较长或不限长度的字符串做了优化</td>
</tr>
<tr>
<td style="text-align:left">Unicode</td>
<td>unicode</td>
<td>变长Unicode字符串</td>
</tr>
<tr>
<td style="text-align:left">UnicodeText</td>
<td>unicode</td>
<td>变长Unicode字符串，对较长或不限长度的字符串做了优化</td>
</tr>
<tr>
<td style="text-align:left">Boolean</td>
<td>bool</td>
<td>布尔值</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td>datetime.date</td>
<td>日期</td>
</tr>
<tr>
<td style="text-align:left">Time</td>
<td>datetime.time</td>
<td>时间</td>
</tr>
<tr>
<td style="text-align:left">DateTime</td>
<td>datetime.datetime</td>
<td>日期和时间</td>
</tr>
<tr>
<td style="text-align:left">Interval</td>
<td>datetime.timedelta</td>
<td>时间间隔</td>
</tr>
<tr>
<td style="text-align:left">Enum</td>
<td>str</td>
<td>一组字符串</td>
</tr>
<tr>
<td style="text-align:left">PickleType</td>
<td>任何Python对象</td>
<td>自动使用Pickle序列号</td>
</tr>
<tr>
<td style="text-align:left">LargeBinary</td>
<td>str</td>
<td>二进制文件</td>
</tr>
</tbody>
</table>
<p>下面是SQLAlchemy常用列选项。</p>
<table>
<thead>
<tr>
<th>选项名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>primary_key</td>
<td>如果设为True，这列就是表的主键</td>
</tr>
<tr>
<td>unique</td>
<td>如果设为True，这列不允许出现重复的值</td>
</tr>
<tr>
<td>index</td>
<td>如果设为True，为这列创建索引，提升查询效率</td>
</tr>
<tr>
<td>nullable</td>
<td>如果设为True，这列允许使用空值；如果设为False，这列不允许使用空值</td>
</tr>
<tr>
<td>default</td>
<td>为这列定义默认值</td>
</tr>
</tbody>
</table>
<p>下面是SQLAlchemy常用关系选项。</p>
<table>
<thead>
<tr>
<th>选项名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>backref</td>
<td>在关系的另一个模型中添加反向引用</td>
</tr>
<tr>
<td>primaryjoin</td>
<td>明确指定两个模型之间使用的联结条件。只在模棱两可的关系中需要指定</td>
</tr>
<tr>
<td>lazy</td>
<td>指定如何加载相关记录。可选值有select(首次访问时按需加载)、                                                                                     immediate(源对象加载后就加载)、joined(加载记录，但使用联结)、subquery(立即加载，但使用子查询)、noload(永不加载)和 dynamic(不加载记录，但提供加载记录的查询)</td>
</tr>
<tr>
<td>uselist</td>
<td>如果设为False，不使用列表，而使用标量值</td>
</tr>
<tr>
<td>order_by</td>
<td>指定关系中记录的排序方式</td>
</tr>
<tr>
<td>secondary</td>
<td>指定多对多关系中关系表的名字</td>
</tr>
<tr>
<td>secondaryjoin</td>
<td>SQLAlchemy无法自行决定时，指定多对多关系中的二级联结条件</td>
</tr>
</tbody>
</table>
<p>下面是SQLAlchemy的查询过滤器。</p>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter()</td>
<td>把过滤器添加到原查询上，返回一个新查询</td>
</tr>
<tr>
<td>filter_by()</td>
<td>把等值过滤器添加到原查询上，返回一个新查询</td>
</tr>
<tr>
<td>limit()</td>
<td>使用指定的值限制原查询返回的结果数量，返回一个新查询</td>
</tr>
<tr>
<td>offset()</td>
<td>偏移原查询返回的结果，返回一个新查询</td>
</tr>
<tr>
<td>order_by()</td>
<td>根据指定条件对原查询结果进行排序，返回一个新查询</td>
</tr>
<tr>
<td>group_by()</td>
<td>根据指定条件对原查询结果进行分组，返回一个新查询</td>
</tr>
</tbody>
</table>
<p>下面是SQLAlchemy查询执行函数。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>all()</td>
<td>以列表形式返回查询的所有结果</td>
</tr>
<tr>
<td>first()</td>
<td>返回查询的第一个结果，如果没有结果，则返回None</td>
</tr>
<tr>
<td>first_or_404()</td>
<td>返回查询的第一个结果，如果没有结果，则终止请求，返回404错误响应</td>
</tr>
<tr>
<td>get()</td>
<td>返回指定主键对应的行，如果没有对应的行，则返回None</td>
</tr>
<tr>
<td>get_or_404()</td>
<td>返回指定主键对应的行，如果没找到指定的主键，则终止请求，返回404错误响应</td>
</tr>
<tr>
<td>count()</td>
<td>返回查询结果的数量</td>
</tr>
<tr>
<td>paginate()</td>
<td>返回一个Paginate对象，它包含指定范围内的结果</td>
</tr>
</tbody>
</table>
<p>Flask-SQLAlchemy分页对象的属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>items</td>
<td>当前页面中的记录</td>
</tr>
<tr>
<td>query</td>
<td>分页的源查询</td>
</tr>
<tr>
<td>page</td>
<td>当前页数</td>
</tr>
<tr>
<td>prev_num</td>
<td>上一页的页数</td>
</tr>
<tr>
<td>next_num</td>
<td>下一页的页数</td>
</tr>
<tr>
<td>has_next</td>
<td>如果有下一页，返回True</td>
</tr>
<tr>
<td>has_prev</td>
<td>如果有上一页，返回True</td>
</tr>
<tr>
<td>pages</td>
<td>查询得到的总页数</td>
</tr>
<tr>
<td>per_page</td>
<td>每页显示的记录数量</td>
</tr>
<tr>
<td>total</td>
<td>查询返回的记录总数</td>
</tr>
</tbody>
</table>
<p>Flask-SQLAlchemy对象上可调用的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>iter_pages(left_edge=2, left_current=2, right_current=3, right_edge=2)</td>
<td>一个迭代器，返回一个在分页导航中显示的页数列表。这个列表的最左边显示 left_edge 页，当前页的左边显示 left_current 页，当前页的右边显示 right_current 页，最右边显示right_edge页。例如，在一个100页的列表中，当前页为第50页，使用默认配置，这个方法会返回以下页数：1、2、None、48、49、50、51、52、53、None、99、100。（None表示页数之间的间隔）</td>
</tr>
<tr>
<td>prev()</td>
<td>上一页的分页对象</td>
</tr>
<tr>
<td>next()</td>
<td>下一页的分页对象</td>
</tr>
</tbody>
</table>
<p>常用数据类型、常用列选项、常用关系选项在定义数据模型时使用，查询过滤器在shell里查询数据使用，需要结合具体例子才容易理解。</p>
<h3 id="同步发送邮件？异步发送邮件？"><a href="#同步发送邮件？异步发送邮件？" class="headerlink" title="同步发送邮件？异步发送邮件？"></a><span id="jump1">同步发送邮件？异步发送邮件？</span></h3><p>今天在测试Flask-mail发送邮件功能时，遇到很多次554错误。我使用的是网易邮箱，根据<a href="http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html" target="_blank" rel="external">网易邮箱报错信息</a>查到我所遇到的“554 DT:SPM”报错信息是<u><em>“<strong>554 DT:SPM 发送的邮件内容包含了未被许可的信息，或被系统识别为垃圾邮件。请检查是否有用户发送病毒或者垃圾邮件；</strong>”</em></u></p>
<p>收发邮件的程序我之前写过，对我来说不是问题，但这个554还是卡了我半天，最后查到是<strong>邮件主题</strong>和<strong>正文内容</strong>不符合网易的安全规范，再将邮件主题和正文内容做出调整之后，邮件发送成功。</p>
<p>当然，我写在HTML文件里的正文内容，被网易把HTML语法信息全部过滤掉，只保留纯文本形式，然后才发送了出去。</p>
<p>另外，有一点值得说的是，我是通过Flask应用发送邮件，在浏览器网页里面点击按钮，后台程序才去执行SMTP发送邮件操作。没有采用异步方式时，发送时页面出现停滞，等发送完毕，浏览器才恢复正常，这个估计就是<strong>同步阻塞</strong>吧；采用异步方式发送时，感觉操作很畅快，点击发送后，只用了一小会儿，浏览器就恢复正常。</p>
<h3 id="Flask-Login管理用户认证状态"><a href="#Flask-Login管理用户认证状态" class="headerlink" title="Flask-Login管理用户认证状态"></a>Flask-Login管理用户认证状态</h3><p>Flask-Login实现的用户方法如下。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>is_authenticated()</td>
<td>如果用户已经登录，必须返回 True，否则返回 False。</td>
</tr>
<tr>
<td>is_active()</td>
<td>如果允许用户登录，必须返回 True，否则返回 False。如果要禁用账户，可以返回 False。</td>
</tr>
<tr>
<td>is_anonymous()</td>
<td>对普通用户必须返回 False。</td>
</tr>
<tr>
<td>get_id()</td>
<td>必须返回用户的唯一标识符，使用 Unicode 编码字符串。</td>
</tr>
</tbody>
</table>
<h3 id="数据库多对多关联关系"><a href="#数据库多对多关联关系" class="headerlink" title="数据库多对多关联关系"></a><span id="jump2">数据库多对多关联关系</span></h3><p>今天在看《Flask Web开发》第12章讲解数据库表与表之间关联关系的时候，意外收获一种新的思维模式，它讲解的是表与表之间多对多关系，记录于此。</p>
<p>数据库设计中，我们比较好理解的是“<strong>一对一</strong>”（A表中一条记录对应B表中一个记录，比如，社交网站中一个用户对应角色表中的一个角色）和“<strong>一对多</strong>”（A表中一条记录对应B表中一组记录，比如，社交网站中一个用户对应文章表中发布的全部文章）。“<strong>多对一</strong>”和“<strong>一对多</strong>”是同一个关系，只是“多”的角度不一样。另外，可以将“<strong>一对一</strong>”看成是简化版的“<strong>一对多</strong>”关系，它限制了“多”的这一侧只能有一条记录。</p>
<p>这三种关系，都有一侧是单个实体，记录之间的联系通过外键实现，让外键指向这个实体，创建表时好操作。</p>
<p>那“<strong>多对多</strong>”（比如学生表和课程表，N个学生可以选同一套课程，N套课程可以被同一个学生选）这种关联关系，设计表结构时候如何处理呢？</p>
<p>书中给出的思路是，添加第三张表，称之为关联表，用它作为桥梁，将“<strong>多对多</strong>”关系分解成两个“<strong>一对多</strong>”关系。</p>
<p><img src="/2018/02/27/learning-flask/Jietu20180305-144815@2x.jpg" alt="学生表和课程表关联关系"></p>
<p>（学生表和课程表通过注册表进行关联）</p>
<p>registrations表中，每一行都表示一个学生注册一个课程的记录。要想知道一个学生选择了哪些课程，先要从学生表和registrations表之间的一对多关系开始，获取这个学生在registrations表中的全部记录，然后通过registrations表和课程表之间的多对一关系，就可以查出该学生注册的全部课程。</p>
<p>要想知道一门课程有哪些学生注册过，从课程表和registrations表之间的一对多关系开始，获取这门课程在registrations表中的全部记录，然后通过registrations表和学生表之间的多对一关系，就可以查出这门课程有哪些同学注册。</p>
<p>不知道还有没有别的思路，我觉得这个模式分解的思路非常赞。</p>
<h3 id="部署Python-Flasky程序到Heroku"><a href="#部署Python-Flasky程序到Heroku" class="headerlink" title="部署Python Flasky程序到Heroku"></a><span id="jump3">部署Python Flasky程序到Heroku</span></h3><p>按照Flask web开发书中的步骤一步一步看到最后，成功被作者绕晕，照着书中的步骤写下来，项目代码和文档已变得非常混乱。最后几章里的精华依然很多，不过，我最感兴趣的是如何把整个项目部署到Heroku。</p>
<p>由于以前没有接触过这些，发布项目上线对我来说并不是一件容易的事。没玩过的东西，我都有兴趣尝试一下，于是直接Clone一份原作者的代码，花费了一整天的时间终于成功把它部署到Heroku上面。在部署过程中，遇到了很多问题，在前人的基础上， 我把我操作步骤都记录了下来，说不定会对其它朋友有帮助。</p>
<p>请移步<a href="/2018/03/09/deploy-flaskapp-onto-heroku/">部署Python Flasky程序到Heroku</a>查看。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Heroku </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我把梦幻西游游戏帐号卖掉了!]]></title>
      <url>/2018/02/24/mhxy-game-account-sold/</url>
      <content type="html"><![CDATA[<p><img src="/2018/02/24/mhxy-game-account-sold/1cda3c98-cbe6-4302-b0e7-70fd962486b5.jpeg" alt="逍遥生"></p>
<p>（题图来自梦幻西游官方壁纸）</p>
<p>今天收到网易游戏发来的短信通知，挂在藏宝阁里面的游戏帐号交易成功，卖了1200块，扣除60元手续费，我可以拿到1140块。</p>
<p>前两天还担心这破号没人要，寻思着是不是要把价格调低一点出手（游戏帐号贬值很快，梦幻西游是一款问世了十几年的老游戏），今天早上被土豪直接秒掉（我设置了可还价，我的底价是950元，对方没还价直接买走），瞬间有种“喜大普奔”的感觉。<img src="https://res.wx.qq.com/mpres/htmledition/images/icon/common/emotion_panel/emoji_ios/u1F602.png" alt="img"></p>
<p>这是我3年前买的帐号，玩了半年后放那儿一直没动，本来打算留着珍藏。去年想着，玩游戏的时间越来越少，游戏帐号砸手里只会一直贬值，没意义，还不如把号卖掉。于是11月份把号上架，挂了1000块，有好几个人来询价，但没达到我的心里价位，没卖出去。</p>
<a id="more"></a>
<p><strong>春节临近，消费欲望被刺激起来</strong>。<u>我心想，学生们年底都有钱，平时舍不得买的东西可能这时候会出手，我把价格调一调，或许可以卖个好价钱。</u>提价到1200块，打算被人砍个一、两百块就脱手，没想到直接被秒掉。我猜对方可能是个大学生吧，有消费能力，又有打游戏的时间，学习枯燥，玩游戏来解闷；应该是个老玩家，对这游戏有感情，和我一样，愿意花钱买高级号玩。</p>
<p>我特意翻了一下购买记录，2014年3月份买的，1030元。<u>不考虑货币贬值，不考虑其它游戏花费，这帐号赚了110块钱。</u></p>
<p><img src="/2018/02/24/mhxy-game-account-sold/Jietu20180128-190645.jpg" alt="帐号购买记录"></p>
<p>下面是游戏角色截图，数据属性还是不错的。</p>
<p><img src="/2018/02/24/mhxy-game-account-sold/Jietu20180224-162010@2x.jpg" alt="帐号截图1"></p>
<p>技能质地也不差。</p>
<p><img src="/2018/02/24/mhxy-game-account-sold/Jietu20180224-162059@2x.jpg" alt="帐号截图2"></p>
<p>召唤兽（俗称“宝宝”）都一般般，就这个孩子能拿得出手。非RMB玩家，我的角色装备差点，就不贴图了。<img src="https://res.wx.qq.com/mpres/htmledition/images/icon/common/emotion_panel/emoji_wx/2_05.png" alt="img"></p>
<p><img src="/2018/02/24/mhxy-game-account-sold/Jietu20180224-162128@2x.jpg" alt="帐号截图3"></p>
<p>成交记录截图。</p>
<p><img src="/2018/02/24/mhxy-game-account-sold/Jietu20180224-161937@2x.jpg" alt="帐号出售记录"></p>
<p>有点小感慨，网易的游戏真不赖，第一次玩梦幻西游是2005年，那时我上高三。过了十几年，这游戏现在依然火爆，<strong>4年前的帐号，搁现在还能卖出去赚钱</strong>，估计也“只此一家，别无他店”了吧。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 梦幻西游 </tag>
            
            <tag> 网易 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python+MySQLdb+Pandas+Smtplib发送邮件]]></title>
      <url>/2018/02/10/python-smtplib/</url>
      <content type="html"><![CDATA[<p><img src="/2018/02/10/python-smtplib/mia-baker-322559.jpg" alt="Cover Picture"></p>
<p>(Photo by <a href="https://unsplash.com/photos/CuoMduHwRZY?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Mia Baker</a> on <a href="https://unsplash.com/search/photos/mac?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>今天看到又耳笔记这篇<a href="http://blog.51cto.com/youerning/1708941" target="_blank" rel="external"><strong>导出mysql数据，利用pandas生成excel文档，并发送邮件</strong></a>文章时，我决定把它实现出来。</p>
<p>查资料、编码、测试、优化、添加注释……花了3个多小时将全部工作完成。现在整理出来，发布在这里。本文贴出的就是全部源代码，只要安装了相应的包，在Python 2.7环境下可以直接拿过去跑，本机测试邮件能够发送成功。没有MySQL和Pandas也不要紧，注释掉fetch_db和gen_xls函数，直接执行sendmsg也行。</p>
<p>目前在正则表达式匹配邮箱地址那一环节还存有缺陷，对两个点或中划线在一起的邮箱地址（比如317…817@qq.com）无法剔除，日后有待完善，如果你有好的建议，欢迎给我留言。</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>macOS 10.11.6 + Anaconda Navigator 1.2.1+ Python 2.7.12 + Sublime 3.0</p>
<h4 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h4><ul>
<li>MySQLdb数据库连接</li>
<li>Pandas DataFrame转换Excel文件</li>
<li>正则表达式匹配邮箱</li>
<li>smtplib协议实现原理</li>
</ul>
<a id="more"></a>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Fri Feb  9 17:21:39 2018</span></div><div class="line"><span class="string">func:查询Mysql结果,生成excel文件,发送到指定邮箱</span></div><div class="line"><span class="string">@author:@benbendemo </span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="comment"># 设置全局公共参数PGMname</span></div><div class="line">PGMname = <span class="string">'PGM:python_learning_send_email'</span></div><div class="line"></div><div class="line"><span class="comment"># 返回sql语句查询结果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_db</span><span class="params">(sql)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    fetch_db,创建数据库连接,执行sql语句查询结果</span></div><div class="line"><span class="string">    """</span></div><div class="line">    </div><div class="line">    <span class="comment"># user,passwd,db参数需要自行配置</span></div><div class="line">    db_user = MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>,</div><div class="line">                              user=<span class="string">'XXXXXX'</span>,passwd=<span class="string">'XXXXXX'</span>,db=<span class="string">'XXXXXX'</span>) </div><div class="line">    cursor = db_user.cursor()</div><div class="line">    cursor.execute(<span class="string">"SET NAMES utf8;"</span>)</div><div class="line">    cursor.execute(sql)</div><div class="line">    result = cursor.fetchall()</div><div class="line">    db_user.close()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"OK!!! Result Type is:"</span>,type(result)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="comment"># 将sql执行查询结果生成到excel文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_xls</span><span class="params">(res,col)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    gen_xls,将数据库查询结果生成excel文件</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    file_name = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d-%H-%M"</span>) + <span class="string">".sql.xlsx"</span></div><div class="line"></div><div class="line">    <span class="comment"># from_records方法要求使用列表类型作为数据源,这里需要强制转换</span></div><div class="line">    <span class="keyword">if</span> type(res) <span class="keyword">is</span> <span class="keyword">not</span> list:</div><div class="line">        res = list(res)</div><div class="line">        </div><div class="line">    <span class="comment"># from_records方法columns参数的作用是设置数据的列名,影响head行</span></div><div class="line">    df = pd.DataFrame.from_records(data=res,columns=col)</div><div class="line"></div><div class="line">    <span class="comment"># 输出到excel表格里面</span></div><div class="line">    df.to_excel(file_name,<span class="string">"Sheet1"</span>,index=<span class="keyword">True</span>,header=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"OK!!! Filename is:"</span>,file_name</div><div class="line">    <span class="keyword">return</span> file_name</div><div class="line"></div><div class="line"><span class="comment"># 将生成的excel文件发送给指定邮箱</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendmsg</span><span class="params">(f_email,f_pwd,to_list,smtp_server,sendfile)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    sendmsg,使用smtplib发送邮件,这里使用网易邮箱作为发送方</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    sub = <span class="string">'主题:第六封来自Python代码的测试邮件'</span></div><div class="line">    content = <span class="string">'正文:20条mysql查询结果,生成此份Excel文件,请查收附件'</span></div><div class="line"></div><div class="line">    <span class="comment"># 邮件对象</span></div><div class="line">    msg = MIMEMultipart()</div><div class="line">    msg[<span class="string">'From'</span>] = f_email</div><div class="line">    msg[<span class="string">'Subject'</span>] = sub  </div><div class="line">    to_str = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> to_list:</div><div class="line">       to_str += x + <span class="string">','</span>        </div><div class="line">    <span class="comment"># msg['To']接收的参数是str而不是list或tuple,多个地址使用逗号隔开</span></div><div class="line">    msg[<span class="string">'To'</span>] = to_str</div><div class="line">    <span class="comment"># 邮件正文是MIMEText</span></div><div class="line">    msg.attach(MIMEText(content,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(sendfile,<span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line"></div><div class="line">        <span class="comment"># 设置附件的MIME类型,这里使用xls类型,application/octet-stream表示附件是下载格式</span></div><div class="line">        mime = MIMEBase(<span class="string">'application/octet-stream'</span>, <span class="string">'xls'</span>, filename=<span class="string">'sql.xlsx'</span>)</div><div class="line">        <span class="comment"># 添加头信息</span></div><div class="line">        mime.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'sql.xlsx'</span>)</div><div class="line">        mime.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</div><div class="line">        mime.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</div><div class="line">        <span class="comment"># 将附件内容读取为数据流</span></div><div class="line">        mime.set_payload(fp.read())</div><div class="line">        <span class="comment"># 用Base64编码</span></div><div class="line">        encoders.encode_base64(mime)</div><div class="line">        <span class="comment"># 添加到MIMEMultipart</span></div><div class="line">        msg.attach(mime)</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        server = smtplib.SMTP()</div><div class="line">        <span class="comment"># set_debuglevel参数设为0不打印log;设为1打印log</span></div><div class="line">        server.set_debuglevel(<span class="number">1</span>)</div><div class="line">        server.connect(smtp_server,<span class="number">25</span>)</div><div class="line">        server.starttls()</div><div class="line">        server.login(f_email,f_pwd)</div><div class="line">        server.sendmail(f_email,to_list,msg.as_string())</div><div class="line">        server.quit()</div><div class="line">        <span class="keyword">print</span> PGMname + <span class="string">":"</span> + <span class="string">"sendmsg"</span> + <span class="string">":"</span> + <span class="string">"Send Email OK!"</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> PGMname + <span class="string">":"</span> + <span class="string">"sendmsg"</span> + <span class="string">":"</span> + <span class="string">"Exception!"</span>,e</div><div class="line"></div><div class="line"><span class="comment"># 要查询的sql语句</span></div><div class="line">sql = <span class="string">"SELECT * FROM allAstockinfo limit 50"</span></div><div class="line"></div><div class="line"><span class="comment"># 待查询库表的列名,匹配allAstockinfo库表的列名</span></div><div class="line">col = [<span class="string">'code'</span>,<span class="string">'name'</span>,<span class="string">'outstanding'</span>,<span class="string">'totals'</span>,<span class="string">'totalAssets'</span>,<span class="string">'esp'</span>,<span class="string">'bvps'</span>,<span class="string">'pb'</span>,<span class="string">'pe'</span>,</div><div class="line"><span class="string">'reservedPerShare'</span>,<span class="string">'rev'</span>,<span class="string">'profit'</span>,<span class="string">'gpr'</span>,<span class="string">'npr'</span>,<span class="string">'holders'</span>,<span class="string">'industry'</span>,<span class="string">'area'</span>,<span class="string">'timeToMarket'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 接收邮件用户列表,换成你自己的邮箱地址</span></div><div class="line">to_email = [<span class="string">'XXXXXXXX@qq.com'</span>,<span class="string">'XXXXXXXX@hotmail.com'</span>,<span class="string">'XXXXXXXX@sohu.com'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 查询数据库</span></div><div class="line">res = fetch_db(sql)</div><div class="line"></div><div class="line"><span class="comment"># 将结果传给文件参数</span></div><div class="line">xlsfile = gen_xls(res,col)</div><div class="line"></div><div class="line"><span class="comment"># pattern1只能匹配纯数字邮箱,不适用</span></div><div class="line">pattern1 = <span class="string">"(^[1-9][0-9]&#123;1,10&#125;)(\@)([\w0-9]+)(\.(com|org|cn)$)"</span></div><div class="line">com_pattern1 = re.compile(pattern1)</div><div class="line"></div><div class="line"><span class="comment"># pattern2可匹配非纯数字邮箱(中间不能有两个点号或下划线连续出现的情况没有解决),pattern2包含了pattern1</span></div><div class="line">pattern2 = <span class="string">"([\w1-9][\w0-9\_\-\.]&#123;1,20&#125;)(\@)([\w0-9]+)(\.(com|org|cn)$)"</span></div><div class="line">com_pattern2 = re.compile(pattern2)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 输入发送邮箱账号,需要使用raw_input而不是input</span></div><div class="line">    from_email = raw_input(<span class="string">'From_email:'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:    </div><div class="line">        m = com_pattern2.match(from_email)</div><div class="line">        <span class="keyword">print</span> <span class="string">"Group(0):"</span>,m.group(<span class="number">0</span>)</div><div class="line">        smtp_server = <span class="string">''</span>.join([<span class="string">'smtp.'</span>,m.group(<span class="number">3</span>),m.group(<span class="number">4</span>)])</div><div class="line">        </div><div class="line">        <span class="comment"># 邮箱格式正确,则使用break跳出循环       </span></div><div class="line">        <span class="keyword">break</span>    </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> PGMname + <span class="string">":"</span> + <span class="string">"Email Format Error!"</span>,e</div><div class="line"></div><div class="line"><span class="comment"># 输入发生邮箱密码,注意如果邮箱开启授权码验证(比如网易邮箱),则需要输入授权码作为密码</span></div><div class="line">from_email_pwd = raw_input(<span class="string">'From_email_pwd:'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 发送邮件</span></div><div class="line">sendmsg(from_email,from_email_pwd,to_email,smtp_server,xlsfile)</div></pre></td></tr></table></figure>
<h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><ul>
<li><p>生成的excel文件如下图所示，表中数据使用Tushare获取。</p>
<p><img src="/2018/02/10/python-smtplib/allAstockInfo_table.jpg" alt="allAstockinfo Table"></p>
</li>
</ul>
<ul>
<li><p>登录邮箱，显示邮件发送成功，附件内容与Excel数据一致，没有乱码。</p>
<p><img src="/2018/02/10/python-smtplib/163_email_screen_snapchat.jpg" alt="Email screenshot"></p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>全部代码150多行，没有什么复杂的技术难题，对老司机来说，这个任务小菜一碟。测试中遇到的难点问题，全部通过注释语句标注出来了，请重点注意。如果没有Python基础，有些地方你可能需要花一些时间理解。阮一峰博客里面有人留言说，”现在的程序员关注底层技术的越来越少了”。SMTP协议就是一个很好的例子，我们每天都在用，但根本没有想过它是如何实现的，延伸阅读里面对SMTP协议有比较详细的介绍。当然，亲自动手把这个程序写一遍，对SMTP协议会有一个更深入的理解。</p>
<p>附<a href="https://github.com/benbendemo/learning-python/tree/master/python-smtplib" target="_blank" rel="external">GitHub地址</a>。</p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832745198026a685614e7462fb57dbf733cc9f3ad000" target="_blank" rel="external">SMTP发送邮件</a></li>
<li><a href="http://blog.51cto.com/clovemfong/1702105" target="_blank" rel="external">Zabbix监控之邮件发送失败-smtp-server: 错误代码550与535</a></li>
</ul>
<p><strong>延伸阅读：</strong></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2008/06/mime.html" target="_blank" rel="external">MIME笔记</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/06/smtp-protocol.html" target="_blank" rel="external">如何验证 Email 地址：SMTP 协议入门教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" target="_blank" rel="external">Base64笔记</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> DataFrame </tag>
            
            <tag> Smtplib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unicode和UTF-8编码]]></title>
      <url>/2018/02/08/unicode-and-utf8/</url>
      <content type="html"><![CDATA[<p><img src="/2018/02/08/unicode-and-utf8/markus-spiske-207946.jpg" alt="Codes"></p>
<p>(Photo by <a href="https://unsplash.com/photos/Skf7HxARcoc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Markus Spiske</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>今天看到这篇<a href="https://funhacks.net/explore-python/Basic/character_encoding.html" target="_blank" rel="external">讲解Python字符编码</a>的文章时，我觉得需要巩固一下对字符编码这块内容的理解，深入看下去之后，挖掘出来很多新的内容。</p>
<p>我们都知道Python2默认使用ASCII字符编码（Python3默认使用UTF-8字符编码），因为Python2这门语言发布的时候，Unicode编码还没有诞生，见这篇文章<a href="https://foofish.net/why-python-encoding-is-tricky.html" target="_blank" rel="external">Python编码为什么那么蛋疼？</a>。在写程序过程中经常会遇到UnicodeEncodeError和UnicodeDecodeError，如果没有彻底搞懂，会让人很崩溃，每次都得额外花费时间去搜索解决办法，为什么不一次性弄懂把它刻在脑子里呢？</p>
<p>这篇总结，就给你提供一个一次性弄懂的机会。</p>
<a id="more"></a>
<blockquote>
<p>Python 2.7.12 |Anaconda 2.3.0 (x86_64)| (default, Jul 2 2016, 17:43:17)</p>
<p>[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)] on darwin</p>
<p>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<p>Anaconda is brought to you by Continuum Analytics.</p>
<p>Please check out:<a href="#">http://continuum.io/thanks</a>and<a href="#">https://anaconda.org</a></p>
<p>>&gt;&gt; import sys</p>
<p>>&gt;&gt; sys.getdefaultencoding()</p>
<p>‘ascii’</p>
<p>>&gt;&gt;</p>
</blockquote>
<p><em>（在终端使用命令查看Python2.7默认的编码方式）</em></p>
<h3 id="Unicode和UTF-8转换规则"><a href="#Unicode和UTF-8转换规则" class="headerlink" title="Unicode和UTF-8转换规则"></a>Unicode和UTF-8转换规则</h3><p>当我看完讲解Python字符编码这篇文章后，我才知道UTF（Unicode Transfer Format，通用传输格式）的作用是<strong>定义Unicode字符存储和传输的格式。</strong></p>
<p>通过这篇文章里给出的链接，我读到了阮一峰老师2007年写的<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode 和 UTF-8</a>，写得非常好，UTF-8编码只是Unicode字符集的一种实现方式，Unicode还有UTF-16、UTF-32（基本废弃不使用）等实现形式，文中还给出了Unicode和UTF-8编码方式的转换关系，如下。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unicode符号范围      |  UTF-8编码方式</div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(十六进制)           | （二进制）</div><div class="line">--------------------+------------------------------------</div><div class="line">0000 0000-0000 007F | 0xxxxxxx</div><div class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</div><div class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</div><div class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</div></pre></td></tr></table></figure>
<p><em>（Unicode和UTF-8编码方式的转换关系）</em></p>
<p>当我们存储或传输字符时，存储和传输的是字符的比特流信息，不是字符本身。计算机世界最开始只用ASCII字符编码，发现ASCII不够用之后进化为UTF-16字符编码，后来UTF-16还是不够用，就进化为UTF-8字符编码。其间，各个国家都各自搞一套字符集，最终被标准化组织统一形成了Unicode字符集。尽管操作系统各不相同，但在<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">计算机内存中统一使用Unicode字符集</a>，当需要将内存中的数据向硬盘中存储或向网络传输时，就转换为你指定的编码方式，比如UTF-8。</p>
<h3 id="计算机内存中统一使用Unicode字符集？"><a href="#计算机内存中统一使用Unicode字符集？" class="headerlink" title="计算机内存中统一使用Unicode字符集？"></a>计算机内存中统一使用Unicode字符集？</h3><p>我认同这个观点。</p>
<p>我这样理解它，比如Java语言某些数据类型使用UTF-16编码，Python2默认使用ASCII编码（当然你可以在程序开头写“# -*- coding: utf-8 —”表明使用UTF-8编码），Python3默认使用UTF-8编码，Ubuntu默认使用UTF-8编码，Win7中文版默认使用GBK编码（在GB2312上面的拓展版本）。</p>
<p>在这些系统或应用中定义同一个字符，尽管长度不一，但字符的Unicode字符是相同的。字符在内存中以Unicode字符定义的二进制式形式存在，虽然多字节字符在内存中有大端小端问题需要考虑（<strong>单字节字符没有大端小端问题</strong>），但它们可以被正确转换、识别。</p>
<h3 id="记事本使用UTF-16编码的例子"><a href="#记事本使用UTF-16编码的例子" class="headerlink" title="记事本使用UTF-16编码的例子"></a>记事本使用UTF-16编码的例子</h3><p>请注意看阮一峰老师文章中举的例子，不然不太好理解Unicode和UTF-8的转换规则。在看到Python之禅指出阮一峰文章中的常识性错误后，<a href="https://foofish.net/unicode_utf-8.html" target="_blank" rel="external">阮一峰对Unicode和UTF-8一些常识理解错误</a>，我才知道Windows记事本另存为时，编码方式中的Unicode和Unicode big endian其实就是UTF-16编码方式，前者是小端存储，后者是大端存储。</p>
<p>内容有点多，如果没有基础，可能不大容易消化得过来，建议多看几遍，加强理解。</p>
<h3 id="汉字的UTF-8和Unicode展现形式"><a href="#汉字的UTF-8和Unicode展现形式" class="headerlink" title="汉字的UTF-8和Unicode展现形式"></a>汉字的UTF-8和Unicode展现形式</h3><p>我们先看一下下面这个例子。</p>
<p>Python2.7环境，我们Print变量a和直接显示变量a，它在终端里显示出来的内容是不一样的。直接显示变量a，打出来的是’汉’这个字的UTF-8编码格式－<strong>‘\xe6\xb1\x89’</strong>，‘汉’这个字的Unicode编码是<strong>u‘\u6c49’</strong>。Unicode编码是汉字在内存中的真实存在形式，而UTF-8编码是汉字的一种显示、存储或传输形式，那怎么样由Unicode编码转换为UTF-8编码，或者怎么由UTF-8编码转换为Unicode编码呢，答案是按照上图的转换规则转变而来。</p>
<p>延伸阅读，<a href="http://blog.csdn.net/orangleliu/article/details/42915501" target="_blank" rel="external">print是sys.stdout.write函数的封装形式</a>。</p>
<blockquote>
<p>>&gt;&gt; a = ‘汉’</p>
<p>>&gt;&gt; print a</p>
<p>汉</p>
<p>>&gt;&gt; a</p>
<p>‘\xe6\xb1\x89’</p>
<p>>&gt;&gt; u‘汉’</p>
<p>u‘\u6c49’</p>
</blockquote>
<h3 id="汉字“联通”发生碰撞"><a href="#汉字“联通”发生碰撞" class="headerlink" title="汉字“联通”发生碰撞"></a>汉字“联通”发生碰撞</h3><p>了解这些后，我们继续拓展对字符编码的认知。</p>
<p>看一下这篇<a href="http://www.qianxingzhem.com/post-1499.html" target="_blank" rel="external">网页编码就是那点事</a>，加深你对字符编码的理解。里面提到<strong>UTF-8和GB2312两种字符集发生碰撞</strong>的情况。我在Win7里测试，新建一个记事本只保存“联通”两个字，关闭后再打开，确实显示的是乱码。这个字符在记事本软件采用的是ANSI编码（微软推出的一种编码格式，在中文Win7系统中，汉字等同于GB2312编码，英文等同于ASCII编码），但其二进制形式恰好吻合了UTF-8编码方式，打开时，记事本误以为这是一个UTF-8编码的文件，从而显示出乱码。</p>
<blockquote>
<p>>&gt;&gt; u‘联通’</p>
<p>u‘\u8054\u901a’</p>
<p>>&gt;&gt; u‘联通’.encode(‘gb2312’)</p>
<p>‘\xc1\xaa\xcd\xa8’</p>
</blockquote>
<p><img src="/2018/02/08/unicode-and-utf8/chinese-character-liantong.jpg" alt="&quot;联通&quot;乱码"></p>
<p>参考资料：</p>
<ul>
<li><a href="#">https://funhacks.net/explore-python/Basic/character_encoding.html</a></li>
<li><a href="#">https://foofish.net/why-python-encoding-is-tricky.html</a></li>
<li><a href="#">https://foofish.net/unicode_utf-8.html</a></li>
<li><a href="#">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li>
<li><a href="#">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></li>
<li><a href="#">http://www.qianxingzhem.com/post-1499.html</a></li>
<li><a href="http://blog.csdn.net/orangleliu/article/details/42915501" target="_blank" rel="external">http://blog.csdn.net/orangleliu/article/details/42915501</a></li>
<li><a href="#">http://python.jobbole.com/82107/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Unicode和UTF-8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第二次给罗振宇交"智商税"]]></title>
      <url>/2018/01/19/an-outline-history-of-china/</url>
      <content type="html"><![CDATA[<p><img src="/2018/01/19/an-outline-history-of-china/hanson-lu-423360.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/Q36BvLGdOAg?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Hanson Lu</a> on <a href="https://unsplash.com/search/photos/great-wall?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>最近读到一本好书，<strong>罗振宇</strong>在2017年12月31日跨年演讲中推荐的《中国史纲50讲》。说是读，其实是听，在得到app里面试听了几节课程之后，感觉讲得不错，就花了99块钱把整套课程买下来，利用上下班路上的时间把它给听完了。</p>
<p>这是我第二次给罗胖交“智商税”，第一次是2015年买《李翔商业内参》专栏。李翔的专栏买了之后我很失望，其实就是把国内的商业新闻拿过来加工加工，再发表自己的看法来解读一下，并没有什么新意和深度，听了几期之后，彻底放弃再也不听了。</p>
<p>那之后，基本上没有在得到app里面消费过，后来把app都给卸了。直到有一天，朋友圈里一个兄弟每天都分享<strong>吴军</strong>博士的《硅谷来信》，我读了几期之后，感觉很对胃口，于是只要他一分享我就看，免费看了将近一年，算是错花了199块钱给我的补偿。</p>
<a id="more"></a>
<p>这次买<strong>施展</strong>老师的《中国史纲50讲》，给我的感觉大不相同，他研究历史的角度新颖，非常深入，而且格局宏大，每一节课听完，都让我脑洞大开，产生“<em>以前的历史都白读了</em>”那种感觉。</p>
<p>我以前读过很多历史，这几年改变方向，主要精力都放在计算机和财经上面，已经很久不翻历史书了，但这套课程，升级了我对中国历史的认知。</p>
<p>人们常说“历史是由胜利者书写的”，但其实很多中国历史，都是后人带有主观色彩给前人下的评判，典型如皇权史；还有很多是王公贵族对皇权不满的个人批判，因为这一批人掌握国家的话语权。</p>
<p>课程中提了很多以前读历史从来没有思考过的问题，有些三言两语说不清，但是你听完后，会觉得很有意思，背后的逻辑关系原来是这样。</p>
<blockquote>
<p>Q：北宋时期澶渊之盟的历史意义是什么？</p>
<p>A：其实宋朝的政治智慧非常高超，他没有使用武力去解决疆域问题，而是使用经济学思路去应对战争，每年向大辽交纳几十万岁币和物资等，只需较少花费（相较于战争所需的军费和物资）就保证了100多年的和平，其实非常划算。幽云十六州没有被收回，这一直被后人诟病，但正是这个原因，才有维系百年和平的基础。（游牧名族没有定居根据地，无法形成赋税体系，因此无法养活官僚系统让社会运转，进而就没有能力统治王公贵族，就不容易形成稳定的社会结构；幽云十六州几乎以汉人为主，大辽拥有它，就可以稳定收税，确保王朝统一，不发生内乱，宋朝因此才有和大辽谈判的可能）</p>
<p>Q：武则天是唐太宗纳的一个才人，太宗死后，高宗继位，高宗娶了武则天作为老婆。这种乱伦关系，怎么理解？</p>
<p>A：因为唐朝是一个草原民族起家建立的王朝，它延续了草原民族的婚姻制度，老爸死了，老妈可以作为财产继承给儿子。像王昭君嫁给西域匈奴后，先后嫁给了自己的丈夫、儿子、孙子，草原民族的伦理关系不能用汉族的伦理思维去解释。</p>
<p>近代历史上对中国产生深远影响的三个国家，英国、俄国、日本，他们各自的意识形态和动机分别是什么？</p>
<p>经历了辛亥革命、溥仪退位等重大历史事件的民国大家王国维为什么说”中国历史最大的一次变革是商周之变”？</p>
<p>北魏孝文帝迁都洛阳的原因是什么？</p>
</blockquote>
<p>另外，总结了很多以前读历史读不到的观点。</p>
<blockquote>
<p>古代长城那条线，几乎就等同于400毫米等降水线，长城以北降水量不足，是无法稳定生产农作物的，因此草原上无法形成定居，只适合游牧生活，王位继承顺序是”兄终弟及”，这种模式无法形成长久稳固的政权，所谓”胡虏无百年之运”，说的就是这个。只有当游牧民族建立横跨中原和草原的二元帝国，它才有稳定的可能。比如，唐朝、元朝、清朝，这三个朝代都是草原民族建立的政权，唐朝和元朝在全面转向汉化后，就逐渐走向了衰落。</p>
<p>中国历史上，只要人口发展到1亿，几乎一定会发生社会动乱，除了人口规模，也有气候变迁、技术革新等原因，清朝是到了后期人口发展到接近4亿才出现太平天国运动，是古代人口历史的顶峰，这说明清朝的政治治理水准是非常高的，它用高超的政治手段统领了汉、满、蒙、回、藏5个民族，维护了大一统的疆域，使民众不需要长期负担战争，才有能力养活更多人口。</p>
<p>中亚、西亚地区（今天的新疆地区）曾经有过悠久灿烂的文明和商业史，那时商贸发达、伊斯兰文化文明开放、包容自信，新疆是沟通东西文化的桥头堡，只不过近代大航海崛起后，中西亚逐渐没落。</p>
<p>中国人正是因为历史观强，才弱化了宗教信仰在中国人心目中的地位。</p>
<p>秦汉以前，没有造纸术，文字都是铸在鼎上进行传播，只能在贵族阶层中流传。汉朝之后，造纸术开始普及，传播知识的难度大大降低，宋朝以后，中国进入平民社会，皇帝需要吸纳平民阶层中的精英来为自己服务，对抗王公贵族，以巩固皇权，于是开始开科取士，兴办科举。</p>
</blockquote>
<p>这本书写得非常宏观，当然就不可能非常细，对于专业史学读者来说，可能深度不够，甚至有失偏颇，但对我们普通人构建一个整体历史框架，还是非常有帮助的，非常值得听一听。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 罗辑思维 </tag>
            
            <tag> 中国史纲50讲 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用GitBook发布电子书]]></title>
      <url>/2018/01/13/write-ebook-with-gitbook/</url>
      <content type="html"><![CDATA[<p><img src="/2018/01/13/write-ebook-with-gitbook/daniel-cheung-129839.jpg" alt="Stormtrooper walking on sand"></p>
<p>(Photo by <a href="https://unsplash.com/photos/cPF2nlWcMY4?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Daniel Cheung</a> on <a href="https://unsplash.com/search/photos/geek?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>今天发现可以使用GitBook写书，我觉得很有趣，折腾了一天，基本上把一整套流程都弄懂了。</p>
<p>已经把学Python过程中遇到的问题以及整理的笔记发布到GitBook上面了，这是我的第一本电子书。<a href="https://pythonbook.bigbigben.com" target="_blank" rel="external">网址</a>在此，欢迎各位客官查阅、指正。以后有这么一个地方专门用来记录笔记和查阅资料，还是挺方便的，当然，作为第一本电子书，我肯定会把它持续更新，一直迭代下去。</p>
<p>2018年的第二天，我把<a href="http://bigbigben.com/2018/01/01/2018-new-years-resolution/">之前说过要买域名的事儿</a>办了，最终选择了<strong><u>bigbigben.com</u></strong>，和以前用的bigbigben.cn类似，同一个前缀，只是把后缀换成.com了。在腾讯云里面一次性注册了10年，免得忘记续费麻烦，之前用的bigbigben.cn被别人抢注了，估计得花点钱才能搞回来，有点小郁闷，索性直接放弃，启用这个新域名，就一次性注册到底，估计很可能要陪我一生了。:sweat_smile:</p>
<p>今天意外发现，李笑来两年前就在使用GitBook发布电子书，我觉得挺前沿的，他的著作《<a href="https://b.xinshengdaxue.com" target="_blank" rel="external">新生</a>》，推荐给大家，我读过，非常好。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitBook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年的新年计划]]></title>
      <url>/2018/01/01/2018-new-years-resolution/</url>
      <content type="html"><![CDATA[<p><img src="/2018/01/01/2018-new-years-resolution/mi-pham-223464.jpg" alt=""></p>
<p>(Photo by <a href="https://unsplash.com/photos/FtZL0r4DZYk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">MI PHAM</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>昨天酝酿了一下，今天把2018年的年度计划整理出来，兼谈过去一年的一些总结，年底再来对照看执行得如何吧。2018年主要精力还是放在编程和投资（其实就是炒股）这两个事情上面，也有别的计划，大致整理出下面这4点。</p>
<p><strong>1、改变赛道，切换到以Python数据分析为主线的工作上面。</strong></p>
<p>2013年底从上海辞职回武汉，当时的意图就是不再从事主机开发，但一没有明确方向，二没有具体行动计划，无奈南下来深，继续干了4年主机开发，这是典型的被动选择，因为自己没有明确的目的和计划。可耻地拖了4年之后，今年意识到主机开发确实不是我想要的方向之后，才下定决心得把工作方向换掉，真不容易。虽然不是换行业，但换方向也不是那么容易，尤其已经到了30岁的年纪，预计给自己一年的时间切换到Python方向，这是头等大事。</p>
<p><strong>2、2017年明确了未来5年的两大方向，“编程和投资”。</strong></p>
<p>读了《<a href="http://www.ruanyifeng.com/docs/mjos/" target="_blank" rel="external">软件随想录</a>》之后，认识到普通程序员和顶尖程序员的水平可以有10倍之差。2017年大量编程和阅读，意识到自己的编程水平和牛人差距很大，虽然加大了学习力度，但还远远没有达到理想程度（看廖雪峰Python教程，使用元类编写ORM框架那一章我一直看不懂），我的目标是能够独立开发一款产品（比如说一个优质Python包、一套Web系统）。Python的强大和丰富，还有很多地方需要学，这不是短期强化可以达到的，因此未来5年的方向还将以编程为主。</p>
<p>2018年除了Python之外，还计划学一下小程序开发，可能还会学一门新语言，对这些内容先不做计划。</p>
<p>在发现自己确实喜欢炒股之后，我决定将炒股作为另外一个大的方向去学习，现阶段以权益类投资为主，未来不排除尝试其它投资形式。2018年会集中火力挖掘泛TMT领域里面的新秀公司（重点肯定是以IT企业为主，区块链我预计是2018年会大火的一个方向），我喜欢研究公司、喜欢分析商业趋势，对我来说，二级市场投资非常适合我。</p>
<p>（附上前几天发布的投资总结：<a href="http://bigbigben.com/2017/12/19/year-end-summary-of-returns-on-A-stock-investment/">炒股3年的盘点与总结</a>）</p>
<a id="more"></a>
<p><strong>3、计划全年投入1.5万软妹币用于学习。</strong></p>
<p>鉴于个人眼光和认知层次的局限性，有些时候花钱去学习，或者说花钱去弥补自己的短板，效果会非常好。计划拿出1.5万软妹币作为全年学习资金，使用范畴包括但不局限于各类平台付费专栏、公开课视频、优质小秘圈、买书等等。</p>
<p>经费有限，钱不能够乱花，要用在刀刃上，我愿意付费给那些能够带来我认知认知的人，但肯定不是一口气订阅10个得到专栏这种方式去花这个钱。</p>
<p>举个例子，2016年花得最值的一笔钱是花了1535元参与江南愤青茶馆的众筹，虽然我没有获得财务上的回报，但通过关注陈宇这个人，阅读他朋友圈发布的一手信息，极大提升了我的眼光和认知。</p>
<p><strong>4、坚持写博客。</strong></p>
<p>以微信公众号和个人博客（域名正在挑选中，择期公布）为主，积极拓展其它内容平台和渠道（估计会开一个今日头条号），打造个人品牌。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2018新年计划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[西西里的美丽传说]]></title>
      <url>/2017/12/23/film-Malena/</url>
      <content type="html"><![CDATA[<p><img src="/2017/12/23/film-Malena/p2183505710.jpg" alt="Malena"></p>
<p>(女主角Malena，性感尤物，意大利演员Monica Bellucci饰)</p>
<p>《<em>Passeggiata in Paese</em>》</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5026665&auto=0&height=66"></iframe>

<p>在我苍白和伤感的青葱岁月里，曾经一度自我标榜“文艺青年”，随着年岁日增，成家立业之后，“文艺”这个标签和我渐行渐远，“柴米油盐酱醋茶”的日常琐碎几乎充斥生活的全部，每天工作着、辛苦着、努力着，这两年连电影都看得少了很多。</p>
<h4 id="一些经典的西方文艺片"><a href="#一些经典的西方文艺片" class="headerlink" title="一些经典的西方文艺片"></a>一些经典的西方文艺片</h4><p>我的学生时代，有一阵子疯狂迷恋西方文艺片，看了很多这类型的电影，对其中的一些经典之作比如《美丽人生》、《天堂电影院》、《诺丁山》、《海上钢琴师》、《教父》、《西雅图未眠夜》、《天使爱美丽》等等印象深刻，对片中的一些经典桥段，如数家珍。</p>
<p>前天逛豆瓣电影，搜索“情色”片，发现《<a href="https://movie.douban.com/subject/1292402/" target="_blank" rel="external">西西里的美丽传说</a>》这部片子评价很高，我没看过就好奇地下载下来，周末把它刷完了。看完后感觉很舒服，就有了这篇影评。</p>
<a id="more"></a>
<h4 id="电影经典桥段"><a href="#电影经典桥段" class="headerlink" title="电影经典桥段"></a>电影经典桥段</h4><p>下面是剧透，我比较喜欢的几个桥段。</p>
<blockquote>
<p>1、女主Malena一个人在小镇上独步的镜头，配合背景音乐以及小镇居民的回头率以及他们背后的谈论，反衬出女主的美艳，前期冷漠端庄，转变妓女角色后的狂放，叼起香烟一堆人围上来点火那段，霸气十足。</p>
<p>2、女神人设在男主Renato心目中崩塌后，男主伤心欲绝（也可能是性需求无法得到满足，打飞机纵欲过多），母亲带他用传统巫术进行治疗，他老爸大吼，“儿子根本没病，他鸡鸡那么大，他需要的是性交”，然后果断带儿子去妓院开荤。</p>
<p>3、德国飞机成群结对地飞过小镇广场，在地面投出一道道影子，防空警报长鸣，人群四处逃窜。战争气氛烘托出一丝伤感，点缀得特别好，《美丽人生》里面有一幕和这个有异曲同工之妙，年幼、不谙世事的儿子躲在木箱里看着即将被拉去枪毙的父亲，父亲故意做出搞怪的摆手踏步走动作，逗他开心，那画面回忆一下就觉得伤感。</p>
<p>4、西西里岛上居民烟囱里冒出来的炊烟，浓浓的乡土气息，让我想起小时候奶奶家的烟囱，那里是不是也用柴火灶？</p>
<p>5、男主对女神的性幻想，描写得非常多，经常幻想自己英雄救美、幻想和女神鱼水之欢，很符合一个青春期男孩的心理特征，天天想着女神的大屁股和饱满的乳房在家里打飞机，情节夸张，但非常形象。</p>
<p>6、一群男孩坐在海边的岩石上丈量自己小鸡鸡的长度，哈哈，男生小时候谁没干过这事儿？</p>
</blockquote>
<p><img src="/2017/12/23/film-Malena/p995285357.jpg" alt="Malena"></p>
<p>（一堆男人围上来给Malena点香烟）</p>
<h4 id="西西里岛地图"><a href="#西西里岛地图" class="headerlink" title="西西里岛地图"></a>西西里岛地图</h4><p>看完后，搜豆瓣影评，才知道这片子的导演就是拍《<a href="https://movie.douban.com/subject/1291828/" target="_blank" rel="external">天堂电影院</a>》和《<a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">海上钢琴师</a>》的导演，<strong>Giuseppe Tornatore(朱塞佩·托纳多雷)</strong>，他是西西里岛土生土长的人，那个地方的人有很浓厚的乡土情结，全球化之前，西西里岛其实和中国的乡村差不多，大批的年轻人出去闯荡，最有名的就是柯里昂，只身闯荡纽约，出人头地后衣锦还乡，黑手党文化就发源于西西里。</p>
<p>看完后，我搜了一下西西里的地图，电影拍摄地是著名的旅游胜地<strong>Siracusa(锡拉库扎)</strong>，一个漂亮的海滨城市，西西里岛东部偏地中海希肭文化，西部偏阿拉伯文化，东部最有名的三个城市之一，另外两个是<strong>Catania(卡塔尼亚)</strong>和<strong>Taormina(陶尔米纳)</strong>，值得一提的是，<strong>切法卢(Cefalu)</strong>是《天堂电影院》的拍摄地，在西西里岛北部沿海，突然有种很想去一趟的冲动。</p>
<p><img src="/2017/12/23/film-Malena/Sicilia island.jpg" alt="Sicilia"></p>
<p><strong>Siracusa（锡拉库萨）</strong>小镇街景，影片中Malena行走的大街。</p>
<p><img src="/2017/12/23/film-Malena/Siracusa avenue.jpg" alt="Siracusa avenue"></p>
<h4 id="能够代表中国的电影有哪些？"><a href="#能够代表中国的电影有哪些？" class="headerlink" title="能够代表中国的电影有哪些？"></a>能够代表中国的电影有哪些？</h4><p>如果说《天堂电影院》、《海上钢琴师》、《西西里的传说》能代表意大利电影，那么有哪些中国电影走出了国门被西方民众广泛认可呢？我搜了一下答案，基本上回答是《英雄》、《卧虎藏龙》、《花样年华》这类，多半是功夫和旗袍，这类典型的中国元素，在西方电影人心目中能够占据一席之地。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 西西里的美丽传说 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[炒股3年的收获与盘点]]></title>
      <url>/2017/12/19/year-end-summary-of-returns-on-A-stock-investment/</url>
      <content type="html"><![CDATA[<p><img src="/2017/12/19/year-end-summary-of-returns-on-A-stock-investment/mickael-gresset-435324.jpg" alt="Reunion"></p>
<p>(Photo by <a href="https://unsplash.com/photos/X6dt5XAi6mg?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Mickael Gresset</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>)</p>
<p>2017年就快过去，今天心血来潮，打开股票账户，统计了入市至今所有银证转帐流水记录，算了一下炒股3年到底赚了多少钱，结果让我大吃一惊。</p>
<p>花了一个小时把以往的记录复盘了一下，有感而发，把这3年炒股的收益情况做一个总结。</p>
<p>2014年年底开户入市，到今天整整3年，A股投入8.4万人民币，美股投入1000美金，总计9万人民币。流水记录显示我的资金虽然经常进进出出，但这3年间没有新增任何投入，炒来炒去就这9万块钱。整个3年，来回买卖操作的股票，大概有小100只左右，赚小钱的操作占多数，亏大钱操作占少数，但亏钱的金额远大于赚钱的金额，整体上比较悲剧，前两年一直处于净亏损状态，2017年才稍微有一些起色。</p>
<h4 id="股票亏钱和赚钱的股票"><a href="#股票亏钱和赚钱的股票" class="headerlink" title="股票亏钱和赚钱的股票"></a>股票亏钱和赚钱的股票</h4><h5 id="亏钱较多的股票，印象有这么几只。"><a href="#亏钱较多的股票，印象有这么几只。" class="headerlink" title="亏钱较多的股票，印象有这么几只。"></a>亏钱较多的股票，印象有这么几只。</h5><blockquote>
<p>1、2015年上半年买视觉中国亏损近50%</p>
<p>2、2015年上半年买亚太集团亏损30%+</p>
<p>3、2017年上半年买网宿科技亏损30％+</p>
</blockquote>
<h5 id="赚钱多的股票有这么几只。"><a href="#赚钱多的股票有这么几只。" class="headerlink" title="赚钱多的股票有这么几只。"></a>赚钱多的股票有这么几只。</h5><blockquote>
<p>1、2016年年中买游族网络，赚了大概2万块钱。</p>
<p>2、2017年年初中签一只新股，康泰药业，赚了1.5万块。</p>
<p>3、2017年下旬持仓至今的一只芯片股，浮盈2万左右。</p>
</blockquote>
<p>有意思的是，亏钱和赚钱的股票，都是来自雪球上各色大V的推荐。</p>
<a id="more"></a>
<h4 id="股票亏钱换来的经验教训"><a href="#股票亏钱换来的经验教训" class="headerlink" title="股票亏钱换来的经验教训"></a>股票亏钱换来的经验教训</h4><p>这几只大亏的股票操作下来，收获了哪些经验教训呢？</p>
<blockquote>
<p>1、视觉中国做的是在线图片版权的生意，公司稀缺性强，在一众A股公司里面算比较独特的品种，当初买它是看到它中标国家旅游局的项目。70块买入时，它的PE在200倍左右，那时纯粹是韭菜，买了一个大顶，判断不出来这个行业的成长空间和市场规模，理论上如果一个互联网行业很赚钱，BAT应该会进入或者涉足，但好像一直没有看到此类相关的消息报道，你经常看的网易新闻、微信新闻，图片上几乎都能看到这家公司的水印，那市占率这么高，这个公司怎么还无法释放利润出来？可能不是一个好赚钱的行业。</p>
<p>2、亚泰集团亏钱后，从此后再也不碰东北以及经济不发达地区的股票。后来知识面广了之后才知道东北的整体经济形势是很糟糕的，经济下行的地区能走出业绩上行的公司吗，估计够呛，何况亚泰集团是典型的水泥建材股，大股东还是当地国资委。设想如果这只水泥建材股是在深圳，那它的规模或者业绩或许完全不会是这个层次，因为珠三角的经济活跃，对各类上市公司基本都是有正面效应的；从这只股票以后，我基本都只买发达地区的上市公司。</p>
<p>3、网宿科技的业绩拐点从BAT进入CDN领域开始显现，BAT进来搅局后，网宿科技的营收和净利润都产生了巨大的下滑，以前躺着赚钱的好日子一去不复还。当时无法认清行业局势，而且也不懂技术指标，破20日线时没及时清仓，是这次操作最失败的地方。</p>
</blockquote>
<p><img src="/2017/12/19/year-end-summary-of-returns-on-A-stock-investment/Jietu20171219-215031.jpg" alt="网宿科技操作记录"></p>
<p>（网宿科技操作截图）</p>
<p>亏钱之后，我读了很多分析上市公司财报和企业估值方面的书，有一些心得和收获，提升了很多财务分析方面的知识，但还是做不到凭借自己的知识体系去独立分析和选股，好在雪球是一个高手辈出的社区，有很多高水平的球友在里面一起分析上市公司，别人的分析可以极大补充自己的短板和认知，赚钱的几只股票恰好赶上运气好，买入点比较低，算是在雪球混了3年额外得到的收获。</p>
<h4 id="炒股三年最终盈利结果"><a href="#炒股三年最终盈利结果" class="headerlink" title="炒股三年最终盈利结果"></a>炒股三年最终盈利结果</h4><p>最终整体算下来，截止今天收盘，股票账户浮盈（盈利未卖出变现视为浮盈，不算真正赚到钱）4000块钱。也就是说投入8.4万，炒了整整3年股，只赚到4000块钱，3年的收益率4.76%，年化我就不算了，算出来丢死人。假设这8.4万存入银行，稳定吃利息，按照每年3％的单利计算，3年利息收入有7560元；假如这8.4万买基金，收益肯定会更高。</p>
<p>无力吐槽……</p>
<p>从钱的角度讲，炒3年股只赚到4000块钱，是非常不划算的，远不如买基金收益高。但鉴于我是一个新出炉的小散，没亏钱算不错了，更大的收获在于下面这几点。</p>
<h4 id="炒股三年主要的收获在这些方面"><a href="#炒股三年主要的收获在这些方面" class="headerlink" title="炒股三年主要的收获在这些方面"></a>炒股三年主要的收获在这些方面</h4><blockquote>
<p>1、亏钱后，为了提升水平，零零散散读过几十本财经类书籍、在可汗学院上完整地学过估值分析课程，能分析财务结构简单的上市公司，建立了初步的模型分析框架。</p>
<p>2、混了3年雪球论坛，极大丰富了个人对股票、对上市公司的认知，破除了很多错误、有害的投资观念，建立了很多终身受益的投资观念。拿网宿科技来打比方，BAT进场搅局CDN行业，导致公司业绩拐点来临，营收江河日下，能判断出这种大的行业趋势，可能比能读懂财报要重要得多。</p>
<p>3、极大丰富了一个IT男对商业世界和经济社会的认知。炒股确实可以扩大一个人的眼界、提升一个人的财商。（当然，那种天天数K线追涨杀跌的门派，不在我表述的范围内）我的财经知识，几乎都是从雪球上学来，可以说一句不夸张的话，“在中国，学投资最好的地方就是雪球”。</p>
<p>4、完整经历一轮股灾，刚入市就赶上暴跌，幸好本金不多，对新人来说，其实是非常好的入市时机。</p>
</blockquote>
<p>今年在美股里取得一些收益后，我对美股的价值有了全新的认识，估计今后很多年，我都会把精力投入在美股里，毕竟，炒股要对自己负责，一切以结果说话，作为小散，依然走在精进股票投资的路上。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 雪球 </tag>
            
            <tag> 股票 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年雪球嘉年华]]></title>
      <url>/2017/12/09/the-5th-snowball-festival/</url>
      <content type="html"><![CDATA[<p>12/09日一大早，出门前往深圳体育馆参加雪球嘉年华活动。到达活动现场，时间不到9:00，入场处排满长队，保安在维持秩序，拦着一大堆人不让进，不知道是什么原因，大家焦急地等待着，据说前面已经放了4000多人进去，我是第一次参加雪球的嘉年华活动，看到现场有这么多人，有些出乎我的意料。</p>
<p>入场后，巴曙松正在台上分享，他讲了几个比较有意思的话题。其中调侃说“中国是全世界最盛产经济学家的地方”，我心领神会地一笑，因为江南愤青多次说过类似的观点，对于这个观点，我并不感觉陌生。</p>
<p>重头戏是听李迅雷的分享，这是我参加这次雪球嘉年华最主要的目的，目睹一下这位经济学家的尊容，听一下他最新的研究结果。李迅雷团队研究中国宏观经济形势，研究了30多年，在国内还是很有水准的。可惜，我水平有限，李迅雷那天讲了很多话题，很多专业术语，大部分我听不懂。</p>
<p><img src="/2017/12/09/the-5th-snowball-festival/WechatIMG49.jpeg" alt="LiXunLei"></p>
<p>他讲的下面这几点我印象深刻，那天分享在朋友圈，也引起好几个好友讨论。</p>
<blockquote>
<p>1、中国的14亿人口大致可以分为两拨，<strong>3亿多中高等收入人群</strong>和<strong>10亿多中低等收入人群</strong>，他是按照平均年收入和平均可支配年收入来划分的。他的意思是，前面这拨其实就相当于一个美国，这个阶层的消费升级是可以期待的，他们有需求、也具备消费能力。</p>
<p>2、关于人口净流入和净流出的研究。京津冀地区人口净流出大概在5%左右，浙江人口净流入22%，安徽和江西分别是净流入10%和8%，说明这两个省份具备吸引力。我有点惊讶的是江苏人口是净流出的，0.5%左右。</p>
<p>3、他讲广东省2018年经济形势，重点看好广州、深圳、东莞、佛山这4个城市，产业机构有积累、有优势，2018年<strong>只有结构性投资机会，不存在全国普遍性的行情</strong>。</p>
</blockquote>
<a id="more"></a>
<p>接下来好几位嘉宾分享，都提不起多大兴趣，唯一有收获的是华泰证券的一位TMT研究员，她对国内互联网领域的趋势分析，对我有启发，AT已经是绝对的巨无霸，只要它们扶持或者入股一家公司，这家公司就具备无限放大盈利能力的可能性，典型是最近上市的<u><strong>趣店(NYSE:QD)</strong></u>。</p>
<p><img src="/2017/12/09/the-5th-snowball-festival/WechatIMG41.jpeg" alt="TMT行业细分观点"></p>
<p>芝麻信用入股趣店，推动趣店的互金业务高速成长，直接催生互金龙头的诞生。(以IPO时的市值论)</p>
<p>我准备抽时间把支付宝和微信这两个超级APP里布局的全部互联网产品都体验一下，分析幕后的公司，挖掘潜在的投资机会，这是这位研究员带给我的启发。</p>
<p>下午收获寥寥，第二天的活动没去听，就写这么多吧。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 雪球 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo搭建网站]]></title>
      <url>/2017/12/07/build-website-with-hexo/</url>
      <content type="html"><![CDATA[<p><img src="/2017/12/07/build-website-with-hexo/freestocks-org-190062.jpg" alt="Beautiful lady"></p>
<p>（Photo by freestocks.org on Unsplash）</p>
<p>上个月去上海，和银虎哥碰了一次面，聊了两个小时后，我答应帮他做一个网站。</p>
<p>根据他的需求，做一个静态网页，能够展示他们公司的信息介绍，就行。</p>
<blockquote>
<p>不需要和用户进行交互</p>
<p>不需要登录管理</p>
<p>需要找一个比较稳定的服务器进行站点托管</p>
</blockquote>
<p>我提炼出这几点需求之后，GitHub Page加Hexo托管静态站点那一套东西立刻从脑海中蹦了出来，这不刚好符合他的需求嘛，于是我立马答应了他。如果是需要有毕竟复杂的交互设计或者用户登录之类的东西，我就不会接这个活儿了，那种专业的站点，我目前还做不了。</p>
<p>今年，除了开了这个公众号写网文之外，我在GitHub Page上也托管了自己的博客，作为公众号的一个补充和备份，使用的正是Hexo。打算新年之际再买一个10年期的域名，把博客正式沉淀下来，当然这是后话。这次本来计划用Jekyll来做的，翻了好几个教程，折腾了好几个晚上，安装Ruby版本管理器及Jekyll那一套开发工具，实在是太麻烦，不断遇到卡壳，解决一个马上又来一个新的，蛋疼无比，时间上已经有点等不及，被搞得对Ruby没什么信心了，只好还是换回Hexo。</p>
<p>Hexo真的很方便，由于已经有过成功搭建和部署的经验，不到10分钟，站点就在本地跑起来了。但今天被SSH Key卡住，Hexo Deploy部署没成功，域名绑定和解析刚刚生效，肩颈却已经酸痛起来……</p>
<p><strong>软件是一条不归路。</strong></p>
<a id="more"></a>
<p>经常听到有人这么说，我以前也这么想过，现在听到类似的话只在心里呵呵一笑，大多数程序员可能只把编程当作一个挣钱的方式，并没有认真地思考过如何写出优质的代码、怎样可以把程序执行的效率提高、做出一份优秀的产品来，虽然，在我们主机编程这个领域，是没有产品这个词一说的。</p>
<p>我所在的主机编程领域，感觉身边很多的同事都是如此，不愿意学新东西了，又或者想学但是有心无力，大多可能都是得过且过吧，学新语言花费精力巨大，短期内又看不到好处，白天上班就是看一天电脑，晚上还在家敲代码，多累啊。</p>
<p>今年有个感悟，IT技术日新月异，迭代速度这么快，对程序员的能力要求其实是越来越高的。一个好的程序员（参见<strong>《<a href="http://www.ruanyifeng.com/docs/mjos/" target="_blank" rel="external">软件随想录</a>》</strong>，看看Joel Spolsky是怎么定义好的程序员的）其实和高水平的医生、律师，是具备同等的社会价值的。这也是今年我花大力气学Python的原因，我得突破自己的技术圈，从井底（这里是指我从事的主机编程领域）跳出来，然后才能看到更大的世界。</p>
<p>Hexo还是很不错的，后面的10年，可能会带我走上另外一条不归路，当然也可能会带给我更多惊喜，但没关系，自己选择了，喜欢就好。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Smallpdf，非常赞的PDF压缩工具]]></title>
      <url>/2017/11/29/something-about-smallpdf/</url>
      <content type="html"><![CDATA[<p><img src="/2017/11/29/something-about-smallpdf/aleks-dorohovich-26.jpg" alt="Desktop of me">（Photo by <strong>Aleks Dorohovich</strong> on <strong>Unsplash</strong>）</p>
<p>最近学习Python，被元类和ORM框架那一块内容卡住，廖雪峰的教程翻来复去看了好几遍，ORM那块一直弄不懂。</p>
<p>想通过行方同事传两份Python资料到我们内网环境，方便写代码时查阅，但PDF文档太大，超出附件的大小限制（7M），没法将文档通过邮件附件传进内网。</p>
<p>直到昨天发现<a href="https://smallpdf.com" target="_blank" rel="external">Smallpdf</a>这个<strong>免费</strong>在线压缩工具，解决了我的大问题。一本16.7M的PDF文档被压缩为4.6M，另一本18M的PDF文档被压缩为6.7M，翻看了一下压缩后的文档，感觉质量并没有受损（肉眼没察觉出来），文档目录、导航、页眉页脚等功能全部保留下来，非常赞。</p>
<p>除此之外，这个在线工具还提供PDF转Word，PDF转JPEG、文档加密、多个文档合并等功能，非常实用，将这个工具推荐给大家。</p>
<a id="more"></a>
<p><img src="/2017/11/29/something-about-smallpdf/smallpdf-snapchat.png" alt="Smallpdf snapchat"></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Smallpdf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迅雷,人生第一只5倍股]]></title>
      <url>/2017/11/25/huge-returns-on-stock-investment-of-xnet/</url>
      <content type="html"><![CDATA[<p><img src="/2017/11/25/huge-returns-on-stock-investment-of-xnet/rawpixel-com-252130.jpg" alt="Marketing plan"></p>
<p>（Photo by rawpixel.com on Unsplash）</p>
<p>今年有一个意外的收获，我买的美股<a href="https://xueqiu.com/S/XNET" target="_blank" rel="external">迅雷</a>(NASDAQ:XNET)涨了5.5倍，昨晚25美金一股全部清仓出局，估计很多年都不会再遇到这种好机会，周末有空正好复盘一下，做一个整理。</p>
<p>复盘前，先简单介绍一下我的美股投资历史。</p>
<p>我开美股账户的时间不长，一般喜欢买入后持有不动，静待戴维斯双击，基本上不做T，因为做不好，常常把成本越搞越高，频繁交易，不是我的风格。</p>
<p>2016年年初买JUNO，美国的一家明星初创医疗制药公司，买入大概1个月后，突然有一天股价暴跌30%，幸好买得不多，不然亏惨了。这段经历对我影响至深，打那以后，我就再也不碰医药股，虽然潜力无限，但我搞不懂它们具体业务做什么，不懂不买，巴菲特的名言。今年港股里面的明星<a href="https://xueqiu.com/S/01548" target="_blank" rel="external">金斯瑞</a>(HK:01548)，同学强力推荐，我坚决不碰。</p>
<p>JUNO之后，买京东赚了一点钱，买阿里巴巴亏了一点钱，整体来说，较我投入的本金，都没赚到钱。</p>
<p><strong>买迅雷，是很偶然的一件事。</strong></p>
<a id="more"></a>
<p>有一天雪球上一个大V分析迅雷的投资价值，他分析迅雷值得投资的理由是，当前市值较净资产低，账上的现金流加上迅雷在深圳的大楼，足够覆盖市值，具备很强的安全边际。迅雷被低估的原因是传统业务增长无力，新的业务<a href="http://mp.weixin.qq.com/s?__biz=MzAxODYyMzU3Mg==&amp;mid=2648960948&amp;idx=1&amp;sn=a1a0e7c0e923c87ddc02e5d03a7a5ec8&amp;chksm=83c4328fb4b3bb99aba3b8561f13d9dec78f6f7047906afd4895cc6988dd98d0f0fd6eb68cf7&amp;scene=21#wechat_redirect" target="_blank" rel="external">星域CDN</a>暂时无法释放利润，恰好处于困境反转的局面。</p>
<p>我认同他的分析。</p>
<blockquote>
<p>在中国互联网圈有一句话，一家互联网公司如果有一个亿的用户规模，那么迟早能找到变现的商业模式，迅雷的星域CDN项目，雷军是非常看好的，这很可能就是未来的趋势，分布式的CDN服务。</p>
<p>拿迅雷和暴风比较，迅雷的技术和口碑应该比暴风都要好，但暴风在A股上市，市值100亿左右；迅雷在美股上市，市值不到20亿（这里指的是17年3月份左右的市值），虽然A股整体PE比美股高，但差这么多，这明显说不过去啊。</p>
<p>另外，雷军影响力这么大，还是迅雷的第一大股东，他这么看好星域CDN业务，小米发展势头这么好，随便拉一把，迅雷的股价就能飞上天。</p>
</blockquote>
<p>从这几个逻辑讲，投资迅雷站得住脚。于是3月初的时候，一把梭，3.79美金一股全仓买入。但意想不到的是，接下来的4个月里面，迅雷股价仍然一路下跌，7月中旬跌到3.15美金一股的时候，一把梭全部清仓，因为跌破了我的止损点。</p>
<p>7月下旬，出现转机，基于区块链的<a href="http://mp.weixin.qq.com/s?__biz=MzA4MjAyMTczNQ==&amp;mid=2649811828&amp;idx=1&amp;sn=571518bd9b3708152ef02d1eadaf8830&amp;chksm=8788577cb0ffde6a979e0f4820cc46c4b2b6a43a93966d059d0f62b7d7704451d44d7fdfa20c&amp;scene=21#wechat_redirect" target="_blank" rel="external">玩客云</a>项目推出来之后，带动迅雷重新进入上升趋势。8月初3.9美金一股，我又一把梭全仓买入，重新上车。</p>
<p>没想到这车开得真猛，40天时间里面翻了5倍。直到昨晚25美金一股，一把梭清仓出局，整体盈利5.5倍。</p>
<p>我向老婆叹口气，涨了这么多，遗憾的是买得太少了，然后自己和自己来了一场柏拉图式对话。</p>
<blockquote>
<p>Q：预想过能涨这么多吗？</p>
<p>A：完全没想到。</p>
<p>Q：中间有加仓吗？</p>
<p>A：没有，主要仓位都在A股里面，恰巧那段时间里面香港银行卡没开出来，不方便往富途里面入金。</p>
<p>Q：中间有减仓吗？</p>
<p>A：没有，回撤25%那天，同学建议减掉部分仓位，把成本降下来，但我判断上涨趋势还会继续，一直没动，也幸好没动，如果一卖，肯定就不会再买回来。</p>
<p>Q：涨到25美金前，有减仓的冲到吗？</p>
<p>A：有，大概在18美金一股时，有过强烈想减仓的瞬间，因为盘中振幅非常大，想获利了解，但最终忍住没动。</p>
<p>Q：清仓后，如果继续涨，会后悔吗？</p>
<p>A：不会，根本就没想到迅雷能让我赚这么多。</p>
<p>Q：能拿住涨到5.5倍的最主要原因是什么？</p>
<p>A：最主要原因是投入本金少，如果投入得多，我很可能就没办法做到那么淡定了。</p>
<p>Q：翻了5.5倍，你这把赚了多少钱？</p>
<p>A：这个，咳咳，有点不好意思说，你直接看图吧。</p>
</blockquote>
<p>账户截图如下。</p>
<p><img src="/2017/11/25/huge-returns-on-stock-investment-of-xnet/WechatIMG20.jpeg" alt="investmetn returns on XNET"></p>
<p>$4226.19/6.5=$650.1831，本金只有650美金，虽然翻了5.5倍，但其实没赚多少钱，错过绝佳的一次屌丝逆袭的机会，一切都是天意，当然投入本金低，这也是我能拿到它涨5.5倍的原因。</p>
<p><strong>应了一句话，人生暴涨的永远都是轻仓。</strong></p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 迅雷 </tag>
            
            <tag> 股票 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么必须得有一张香港银行卡？]]></title>
      <url>/2017/11/23/wing-lung-bank-card/</url>
      <content type="html"><![CDATA[<p>在意识到必须得有一张香港银行卡后，我在雪球开通了雪盈证券，顺道办理了一张永隆银行卡。上周收到卡后，马上进行网银激活、入金、然后转了第一笔款到雪盈证券里面，开启了炒美股的新征程。</p>
<blockquote>
<p>说一句题外话，永隆银行的网银服务做得非常好，我是直接在MBP上用Safari登录网银进行激活和转账操作，一点兼容性问题都没遇到，中途没安装过任何插件，一切过错非常流畅顺利，招商银行的服务传承得真好啊。</p>
</blockquote>
<p><img src="/2017/11/23/wing-lung-bank-card/didier-weemaels-36055.jpg" alt="five euro note close up photo"></p>
<p>(Photo by <a href="https://unsplash.com/photos/ZKVBM2_Dp84?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Didier Weemaels</a> on Unsplash)</p>
<p>其实一年前我在富途证券就开通了港股和美股，当时办的是招行香港一卡通，转了1000美金进去，买了点中概股，有涨有跌、纯粹是弄新鲜弄着玩玩。遗憾的是由于我的不重视，招行香港一卡通账户长期处于零资金状态，以至于拖欠管理费直接给我销户了，我打他们客服电话申诉无果，让我郁闷得要死。</p>
<p>2017年外汇管制变严，想再办招行香港一卡通，需要500万人民币的净资产证明，这对我来说，变成一件完全不可能的任务。</p>
<p>所以，这次开雪盈账户，很大一个目的是重新办一张香港银行卡。</p>
<a id="more"></a>
<p>为什么我认为必须得有一张香港银行卡呢？</p>
<p>我是这样想的，我们所处的时代变化太快，每一代人都得努力去适应新时代的潮流和趋势，如果生活方式和父辈他们所处的年代还保持一样，或者思维方式还停留在父辈他们那个年代，这是非常落后的，如果一直这样，最终多半是被淘汰的命运。</p>
<p>人民币在逐步国际化，整个国家也在逐步国际化，国民财富除了配置人民币资产外，其实也需要配置一些外币资产的，不管是风险对冲或是资产保值，哪怕你啥理由都没有，你办一张香港卡，进行一些境外汇款、做一些外币兑换的业务，对你了解和熟悉发达国家金融市场体系，也是有好处的，两年前我经常去香港出差进行ATM交易测试，香港的金融体系和金融服务比内地可是要发达和完善得多。</p>
<p>办一张香港银行卡，其实就是让自己加速国际化。</p>
<p>张信哲有首歌唱“爱是一种信仰”，有股民说“炒美股是一种信仰”，我说“办一张香港银行卡是一种信仰”。</p>
<p>在今年看了很多可汗学院的金融课之后，我意识到作为一个新时代的股民，仅仅只炒A股是远远不够的。A股是典型的管制性市场，只有做多，几乎没有做空机制（融券业务是大户人家玩的，咱们普通小散玩不起），现阶段也没有期权衍生品，普通小散只能做多，风险其实是很大。</p>
<p>有时候我想买入一支股票后，如果能给它再买上一份保险，那该多好啊，这其实就是买入正股加上一份看跌期权作为风险对冲，可是A股现阶段不提供这项操作，咱只能先到港股和美股里面去玩了。</p>
]]></content>
      
        <categories>
            
            <category> 投资 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 永隆银行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回忆在盐师的大学时光]]></title>
      <url>/2017/11/18/memories-of-college-life/</url>
      <content type="html"><![CDATA[<p>上周去盐城参加大学同学婚礼，时隔5年，再次回到母校。2012年我回去过一次，那时刚出校门两年，上海的一切都感觉新鲜，一个人回去，没人作伴，在校园里转了一圈，没感觉离毕业有多遥远。</p>
<h4 id="关于大学的回忆"><a href="#关于大学的回忆" class="headerlink" title="关于大学的回忆"></a>关于大学的回忆</h4><p>转眼间，我们都已经是30岁的人，算算离我们大一进校园那会儿，已经11年过去了，打车到盐师门口的那一瞬间，那感觉像极了2006年家人带我去学校报到的场景，对面街道上的网吧、面馆、校门口附近的眼镜店、打印店、工行的ATM机……初入校门的那种感觉一幕幕映入眼帘。</p>
<p>我们在校园里走走逛逛，回忆着读书那时的一切，大家有说有笑，一件件囧事不断从大伙的回忆里蹦出来，有些记得很清楚，有些已经完全没印象，很多情景历历在目。老校区没多大变化，因为地处市中心，能够用于扩建的土地面积有限，我们大一那会儿就在市郊建了新校区，现在大部分院系都搬过去了，留在老校区的学生和教职员工少了将近一半，冷清很多。</p>
<p>来一张盐师的近照。</p>
<a id="more"></a>
<p><img src="/2017/11/18/memories-of-college-life/yctc-college.jpeg" alt="yctc college"></p>
<h4 id="尴尬的高考分数"><a href="#尴尬的高考分数" class="headerlink" title="尴尬的高考分数"></a>尴尬的高考分数</h4><p>2006年高考，我的分数并不理想，领成绩单前预估分数，我预计有560分左右，结果只有519分，仅仅过二本线几分，很尴尬的成绩，我填的省会学校全部掉档，“阳光招生”计划把我调剂到了盐城师范学院。</p>
<h5 id="理综考得最糟糕"><a href="#理综考得最糟糕" class="headerlink" title="理综考得最糟糕"></a>理综考得最糟糕</h5><p>我记得很清楚，数学分我估得很准，预计118实际得了116分；英语预计118，结果只有108；语文估105分，实际95左右，因为有作文和主观题，语文分数并不好估；反正语数外三门总分实际结果和我预估的差不多。理综完完全全考砸了，物理没考好，生物得分低得超出我的想象，好像没超过30分，要知道理综三门每门满分都是100分。当时我挺不服气的，很怀疑是不是“生物试卷改分改错了”或者“统计错误”之类的情况发生，但怀疑也没办法，最终只能接受519分这个现实，去了盐城师范学院，读了师范类的计算机专业。</p>
<h5 id="意向中的专业是？幸好没有上"><a href="#意向中的专业是？幸好没有上" class="headerlink" title="意向中的专业是？幸好没有上"></a>意向中的专业是？幸好没有上</h5><p>知道当初我想填报的第一专业是什么吗？说出来现在自己都觉得莫名其妙，当时填的第一专业是市场营销，后面几个想填的专业好像都跟商科有关，反正压根就没想过学计算机。现在回头来看，庆幸当年没有学那什么市场营销，学那个搞不好现在会混得更糟，为什么这么说，原因后面会讲。</p>
<h5 id="沉迷网游"><a href="#沉迷网游" class="headerlink" title="沉迷网游"></a>沉迷网游</h5><p>学校不是我选的，专业也不是自己喜欢的，可想而知，我在大学过得有多郁闷了。大学第一年，我们开C语言课，一堂理论，一堂上机实操，在Turbo C编译器里面敲C语言代码，学了没多久就讨厌C语言，感觉无聊、枯燥、不知道学这玩意儿能干嘛。很快在校门口的网吧找到归宿，办了张会员卡，从此便是那儿的常客，那时流行一句话“男生的电脑是游戏机，女生的电脑是DVD”，大一厌学情绪产生后，我就沉迷网游了，那时玩得最多的一款游戏叫《水浒Q传》，Q版卡通人物、2.5D、RPG角色扮演。每次一戴上耳机，战斗一开打，我就沉迷到自己的游戏世界里面，幻想自己是一个骑着马的侠客，仗剑走天涯。课堂上，教我们C语言的院长在黑板前写写画画、讲得唾沫横分，我坐在下面脑子里想的全是如何打怪升级，结果可想而知，期末考试挂两科，一门C语言、一门计算机导论，都是必修专业课。年轻的班主任老师很有责任心，果断在学期末打电话到我家，对我进行批评教育。过年亲戚们串门做客，我叔叔跟我说“你这个老师还挺负责，不是我听说一般大学老师都不管学生成绩的么……”。第二学期奋发图强，补考轻松过关，高等数学破天荒考了95分，拿了一次三等奖学金，300块，很快这钱就被我冲进网吧会员卡。</p>
<h5 id="二本大学的学生普遍缺乏方向感和目标"><a href="#二本大学的学生普遍缺乏方向感和目标" class="headerlink" title="二本大学的学生普遍缺乏方向感和目标"></a>二本大学的学生普遍缺乏方向感和目标</h5><p>大二后课程内容明显增多，课程难度也逐步加大。我们是师范类计算机，培养方向是回去当计算机老师，但不知道教学大纲是怎么制订的，学的内容多而且杂。</p>
<blockquote>
<p>专业课几乎覆盖计算机各个方向，组成原理、操作系统、程序设计原理、编译原理、数据库、算法与数据结构、网络原理、信息论……</p>
<p>计算机需要数学基础，于是我们上高等数学、离散数学、线性代数……</p>
<p>要当老师呢，教育心理学我们也开……</p>
<p>电路基础得懂一点吧，我们学物理电路、逻辑电路，去物理楼做与非门实验……</p>
<p>不知道咋回事，大一到大三，英语一直都在上……</p>
</blockquote>
<p>我和大多数同学一样，没有具体目标，学校安排什么课就去上什么，考试能过关就行。虽然对软件一点兴趣都没有，但不知道是教网络原理的老师课讲得有意思，还是网络原理比较好学，我对OSI 7层架构、TCP/IP协议、收发数据包的滑动窗口协议、路由器、交换机配置等等这些网络工程的内容兴趣十足，去旁听网络工程专业的Linux课，先后考过《网络管理员》和《网络工程师》两个证书，分数还都挺高，让网络专业的同学刮目相看，如果不是大四我们去常熟参加了IBM-ETP培训，可能毕业后就走网络工程这条路了。</p>
<h5 id="对编程重要性的认识"><a href="#对编程重要性的认识" class="headerlink" title="对编程重要性的认识"></a>对编程重要性的认识</h5><p>很多年后，我才意识到，真想把网络原理学好，其实也还是需要懂编程的。TCP/IP协议或者什么路由协议你再熟悉、或者对路由器配置组网再熟练，它们也需要通过程序去实现游戏规则，需要通过程序去实现彼此之间的通信。</p>
<p>这次同学结婚，我和他们感慨，小强（一毕业进阿里巴巴，干了4年后拿到公司股票，我们宿舍的人生赢家）读大学那会儿（10年前）就开始看《人月神话》和Ajax方面的东西，我是到2016年才开始读《软件随想录》《简约之美》这类讲软件设计的书，今年才看Ajax具体的实现方式，相比之下，这差距就拉开很远。</p>
<h4 id="一些认识和思考"><a href="#一些认识和思考" class="headerlink" title="一些认识和思考"></a>一些认识和思考</h4><p>毕业工作这么些年后，随着认知的提升，阅历的丰富，我想明白了很多事情。比方说，几乎每一个考二本的人都会认为自己当年高考没考好，然后会心高气傲，做事眼高手低，认为自己很了不得，其实大多数不过如此，哈哈，这典型说的就是我自己。</p>
<h5 id="认命：自己就只有考二本大学的能力"><a href="#认命：自己就只有考二本大学的能力" class="headerlink" title="认命：自己就只有考二本大学的能力"></a>认命：自己就只有考二本大学的能力</h5><p>得承认确实有高考发挥失常的情况，但毕竟是少数，绝大多数人（包括我自己）其实也就只具备考二本的实力。为什么这么说？因为绝大多数人都会高估自己的实力，每个人对自己的认识都有很主观的成分，随着年龄增长、阅历丰富、认知健全起来后，逐渐趋于客观理性地认识自己，古人说的“四十不惑，五十知天命”可能也含有这层意思在里面吧。</p>
<h5 id="名校比非名校强在哪些地方？"><a href="#名校比非名校强在哪些地方？" class="headerlink" title="名校比非名校强在哪些地方？"></a>名校比非名校强在哪些地方？</h5><p>第二点想明白了名校学生比非名校学生强在什么地方。人群中智商成正太分布排列，这大家都知道。顶尖名校（中科大少年班、清北复交等）招收的学生可能智商确实比普通人高一些，但天才毕竟是少数，绝大多数名校生智商和我们其实差不多，那为什么他们比我们强呢（普遍来说）？我觉得大概有这几点。</p>
<blockquote>
<p>1、学习方法对路，理解能力强，他们在这两块做得比我们好。比如很多年后，我才知道考试过程中，不应该追求做完题后，用多余时间把答案检查一遍；而应该追求一次性把题做对，做完后不检查，因为检查多半没用，你的思维方式是固定的，即使有错，你多半也检查不出来。这是吴军在《硅谷来信》里面讲的一点应试法则。</p>
<p>2、名校师资力量强，尖子生加名师，产生正反馈，形成”强者更强”的马太效应。</p>
<p>3、心智成熟，这表现在很多方面，比如当年我拉同学去听安利的营销课，他听一次就觉得不靠谱，理由是“一个容易赚钱的生意，别人是不会拿出来跟陌生人分享的”，好多年后我才明白这个道理。</p>
<p>4、目标明确，方向感强，很早或者较早地就知道自己想要什么，其实第四点可以归结进第三点。</p>
</blockquote>
<h4 id="幸好学的是软件编程"><a href="#幸好学的是软件编程" class="headerlink" title="幸好学的是软件编程"></a>幸好学的是软件编程</h4><p>没有考上好大学，但庆幸的是无意中选对了好专业，并且计算机这门专业非常培养逻辑思维能力和动手能力，你需要大量时间思考和编码，才能达成目标，不像“市场营销”这类专业，很多人在学校混4年都能够毕业，学不到多少实质性的东西。</p>
<p>有一句玩笑话说“未来社会不懂编程的人就如同《哈利波特》世界里不会魔法的麻瓜”，这话虽有些绝对，但说得很形象。其实技术变革对人类社会的影响是最大最深远的，我选对了好专业，很长时间里面却一直没有拿它当回事，在今年大量阅读技术博客和行业大拿们的文章后，在大学里面没有好好学编程，有时感觉很遗憾，但没办法，那个时候认识不到这么多。</p>
<p>现在想把代码写好，欠缺的那些东西只能一点点地补了……</p>
<h5 id="编程这份职业错选了COBOL这门语言…"><a href="#编程这份职业错选了COBOL这门语言…" class="headerlink" title="编程这份职业错选了COBOL这门语言…"></a>编程这份职业错选了COBOL这门语言…</h5><p>走上编程这条路，还有一点遗憾的是选错了语言。大四那年，我们参加江苏省教育厅联合IBM等机构举办的第一届IBM-ETP培训，学了COBOL和日语，走进了主机编程这条路，工作7年之后才发现COBOL这门语言有其极大的局限性，而且完全落后于整个软件产业的发展，蓦然步入三十而立的年头，突然发现自己掌握的是一门日趋衰退的技能，以后可能会面临艰难转型的处境，有时候会焦虑，一声叹息，但又能怎么办呢？</p>
<p>只能重新选择一条赛道，栉风沐雨，砥砺前行。</p>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 盐师 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你是如何看待安利的？为什么？]]></title>
      <url>/2017/11/13/why-i-quit-amway-business/</url>
      <content type="html"><![CDATA[<p>本来打算长话短说，简单写两句我放弃安利的原因，没想到写着写着就成了一个长篇，看来关于安利，我有很多话可说。也确实，为之呕心沥血奋斗了一年多，为了赚钱而去，两手空空出来，买来一个宝贵的人生教训，确实也有很多话想说。</p>
<h3 id="放弃安利的原因"><a href="#放弃安利的原因" class="headerlink" title="放弃安利的原因"></a>放弃安利的原因</h3><p>简单来讲，放弃安利的最主要原因是没在里面赚到钱。我从不否认做安利是可以赚到钱的，只是我认为我目前不具备那个能力在安利里面赚到钱。</p>
<p>先摆明一个观点，那些只是听别人说安利怎么样而没有亲身经历过安利的人，你们都只是看客，没有发言权。大部分人对安利的了解不外乎从父母，亲戚朋友口中的描述里得来，也有些人是通过网上的新闻报导来了解安利，这些途径都是通过耳朵“听”来的（网上看到的文章都是别人写的，你虽然是通过眼睛“看”，但信息的获取实际上还是靠耳朵”听”），也就是说大部分人对安利的了解都是从别人那里听来的，非自己亲身经历，非眼见为实，并不实际出自他本人的思考。因此，我认为这些人对安利都是没有发言权的。</p>
<h3 id="个人兼职从事安利经历"><a href="#个人兼职从事安利经历" class="headerlink" title="个人兼职从事安利经历"></a>个人兼职从事安利经历</h3><p>先说我的经历，大约在2012年立春左右我办卡加入了安利，同年9月份去东莞参加了两天的全国性营销大会，开始认可安利并利用业余时间兼职从事安利直到2013年底。在2013年下半年开始对安利产生动摇，直到现在彻底放弃。不到两年的时间里面，我参加过将近一百场大大小小的会议营销，见识过几十位形形色色的成功人士，听说过上百个经营安利事业的成功故事，使用过5大系列里面几乎全线产品，清楚地知道营销人员所有的经营模式，电话邀约过我手机通信录里面几乎所有的朋友……</p>
<a id="more"></a>
<h3 id="几点我认为的安利事实"><a href="#几点我认为的安利事实" class="headerlink" title="几点我认为的安利事实"></a>几点我认为的安利事实</h3><p>我来谈安利，还是有一定发言权的吧。先说它的好，摆出几个基本事实，再讲我对安利的看法。</p>
<blockquote>
<h4 id="安利产品的口碑是很不错的"><a href="#安利产品的口碑是很不错的" class="headerlink" title="安利产品的口碑是很不错的"></a>安利产品的口碑是很不错的</h4><p>一、安利产品东西不差，品质甚至远高于同类其它品牌，这是大家有口皆碑的，就是价格有些贵，以我的经验来看有些产品我觉得是真贵，有些我觉得只是表面价格看起来贵，实际分析一下产品的单位价格，反而不贵。我曾经专门比较过纽崔莱的铁质叶酸片和汤臣倍健的叶酸亚铁片（PS:这个玩意是给准备怀孕的女性吃的，在受精卵发育早期防止神经管畸形生出畸形胎儿，李亚鹏和王菲的女儿就属于这种情况)，假定两个厂家产品包装上面的数据属实，结果是单瓶价格汤臣倍健的便宜，但是单位价格（每mg叶酸和亚铁）则是纽崔莱便宜。</p>
<h4 id="安利是直销，不是传销"><a href="#安利是直销，不是传销" class="headerlink" title="安利是直销，不是传销"></a>安利是直销，不是传销</h4><p>二、安利不是传销，它是一家在《直销管理条例》法律明文规定下合法经营的企业，直销牌照自己上中华人民共和国商务部网站去查，它是有产品卖的，而传销纯粹是空壳公司，不销售实际产品，靠拉人头卖成功理念赚钱。我认为有一定社会阅历的人是能够认同这一点的，如果还有成年人认为安利是传销，那我只能呵呵了。</p>
<h4 id="安利的直销很受人诟病"><a href="#安利的直销很受人诟病" class="headerlink" title="安利的直销很受人诟病"></a>安利的直销很受人诟病</h4><p>三、安利受人诟病的是它的经营模式，跟传销非常类似，以至于直销行业的龙头老大在江湖上的名声一直毁誉参半，但在它的老家美国，安利的声誉可绝对不是这样的，安利公司的现任董事会主席<a href="https://link.zhihu.com/?target=https%3A//www.uschamber.com/steve-van-andel" target="_blank" rel="external">Steve Van Andel</a>便是美国商会主席。 安利的经营模式其实是很好的商业模式创新，但漂洋过海来中国后被喷黑了，我对它的模式有一些思考，这篇文章不重点讲这些。</p>
<h4 id="安利公司氛围-洗脑氛围-还是不错的"><a href="#安利公司氛围-洗脑氛围-还是不错的" class="headerlink" title="安利公司氛围(洗脑氛围)还是不错的"></a>安利公司氛围(洗脑氛围)还是不错的</h4><p>四、安利这个氛围其实是非常积极向上的，刚进去可能会不适应，深入进去之后可以感受到很多温暖的地方以及可以学到很多实用的生活技能（营养学、美容、烹饪厨艺、销售技巧等等等等），那个环境让你有追求，有目标，充满爱和感恩，比传统行业的氛围好很多。我永运忘不了那段日子里面很多次凌晨1、2点穿过几乎空无一人的南京路步行街走到外滩坐夜班车回国定新村第二天早上依然6点半爬起来赶地铁去唐镇上班的情景，虽然辛苦，但那时的我每天都充满希望。</p>
</blockquote>
<p>当初是抱着赚钱的目的进去的，到后来发现在里面赚钱其实不容易，不仅没赚到钱，反倒把我2、3年工作的积蓄给搭了进去，闹出了一些声响，但基本上是赔本赚吆喝的买卖，现在回过头来总结，就当是一次失败的投资了。当然，花了钱和精力在里面，我承认还是学到了不少东西，有些健康的生活观念和一些实用的生活经验，是受益终生的。2年前的我是“很傻很天真”的，比较容易轻信别人，走到安利里面实属必然，任何人劝我都没用，如果是现在这个年纪认识我的安利事业介绍人，情况就完全不一样了。我不后悔走到安利里面的这一段路，因为我相信发生在我身上的每一件事都是必然，要说有一点遗憾，那就是在安利里面花掉了我太多钱，花了我太多钱这件事我认为这跟我的介绍人的引导是有很大关系的，估计每个安利人都有类似的经历。</p>
<h3 id="为什么从事安利很难赚到钱"><a href="#为什么从事安利很难赚到钱" class="headerlink" title="为什么从事安利很难赚到钱"></a>为什么从事安利很难赚到钱</h3><p>下面谈谈为什么我认为在安利里面赚不到钱。</p>
<blockquote>
<h4 id="安利产品的高定位，普通人很难卖"><a href="#安利产品的高定位，普通人很难卖" class="headerlink" title="安利产品的高定位，普通人很难卖"></a>安利产品的高定位，普通人很难卖</h4><p>一、安利产品的定位是高端消费品，产品的品质很高，产品的价格很贵，这就对安利营销人员的素质和综合能力要求非常高，这一点相信大家不难理解。如果你是一个身边有很多优质资源或者你是一个开发优质资源能力非常强的人，那么我相信你在安利里面是能够赚到钱的，它的提成比例和奖金制度清清楚楚写在你的营销代表合同上，你能力强，又特别勤奋，恰巧周边也有很多消费得起安利产品的人，月入一两万不成问题，在上海的工作室里面我就见到过这样的人。这里我说的优质资源多是指那些认可安利产品并且能够周期性消费安利产品的人，你可千万别认为“我认识的人里面学历层次高，我的土豪朋友们家里有钱，叔叔伯伯混得不错之类”这就是你的优质资源，相信我，你认识这样的人多，不代表你每个月能够卖出去那么多货。我举个简单例子，在安利里面如果你想兼职每个月赚3000元，这需要你每个月净营业额做到将近25000元，提成点15%，25000元*15%=3750元，但你知道对刚入行一两年的人来说净营业额卖到25000元是什么概念吗，别跟我讲卖3台空气净化器或者4台净水器就可以了，你去卖卖试试看，我看到很多在里面做了5、6年甚至上10年的人都完成不了这个业绩。</p>
<h4 id="年轻人缺乏阅历，不适合这门生意"><a href="#年轻人缺乏阅历，不适合这门生意" class="headerlink" title="年轻人缺乏阅历，不适合这门生意"></a>年轻人缺乏阅历，不适合这门生意</h4><p>二、刚毕业参加工作的年轻人人生阅历和生活经验都少得可怜，你的消费者都是那些年龄比你大的人，话语权那么低，其实是很难开发得动那些潜在消费者的。我当时在上海，得知公司里有一个领导有购买空气净化器的需求，并且她的经济实力也还不错，我挺想卖一台给她的，但我做不到；还认识一个潜在顾客，她有很明确的净水器购买需求，但是她人在异地，即便说有“超凡”团队在全国的关系网，但我也很难把产品卖到她手里。即使说不是你的领导，也不是在异地的顾客，打比方你在社交场合认识一位潜在顾客认可安利的产品，你如何开发这位潜在顾客把东西卖到她手上呢？你跟她从不认识到认识，先要跟她从弱关系的陌生人发展成强关系的朋友，你需要打电话邀约她、跟她讲述产品的卖点和优势、甚至可能需要邀约她吃饭、参加家庭聚会，你白天得上班，平时下班后或者周末才有时间可能把她约出来见面，开发一个顾客的周期那么长，最终还不见得能达单。</p>
</blockquote>
<h3 id="强烈反对年轻人去从事安利"><a href="#强烈反对年轻人去从事安利" class="headerlink" title="强烈反对年轻人去从事安利"></a>强烈反对年轻人去从事安利</h3><p>以我的亲身经历，我强烈反对刚毕业参加工作或者涉世未深的年轻人去做安利。</p>
<blockquote>
<h4 id="容易使本职工作分心"><a href="#容易使本职工作分心" class="headerlink" title="容易使本职工作分心"></a>容易使本职工作分心</h4><p>一、即便是兼职做安利，但陷入进去很容易让你对本职工作分心。我就是活生生的例子，最疯狂的时候每天早上人坐在办公室但脑子里面想的全是安利的事情，今天要给哪几个人打电话，有哪几个潜在的目标客户可以邀约去参加家庭聚会，这个月要完成多少业绩等等等等。心思完全被安利所占住以至影响到了我的本职工作，后来醒悟了，但是结果依然很惨，那是一家很好的公司，那份工作我干了一年心怀愧疚地离开了。</p>
<h4 id="安利的经营模式需要阅历才能懂"><a href="#安利的经营模式需要阅历才能懂" class="headerlink" title="安利的经营模式需要阅历才能懂"></a>安利的经营模式需要阅历才能懂</h4><p>二、安利的经营模式以及安利带给人的价值需要有一定年龄层次和一定社会阅历的人才能够看得懂。对年轻人来说，尤其是刚毕业的学生有一技之长的人来讲，更适合把精力投入到本职工作在自己熟悉的领域里面去成功。本职工作没做好，克服着亲朋好友的指责和异样的目光从事安利，如果赚到钱了还好说，没有做出成绩来给人感觉就像是不务正业。</p>
<h4 id="耽误本职工作的学习时间不可取"><a href="#耽误本职工作的学习时间不可取" class="headerlink" title="耽误本职工作的学习时间不可取"></a>耽误本职工作的学习时间不可取</h4><p>三、语言的力量是很恐怖的，一个人经常在你耳边煽风点火说XXX好，即使它不好，时间久了你也会觉得它好，反过来也一样。安利里面经常讲加入没有门槛，不论年龄、不论学历、不论背景、不论性别等等等等，无数的讲师都拿这个来讲，但他们不会告诉你没有门槛的背后是安利公司和你没有契约关系，对你不发放底薪、不承担责任。无门槛其实是一把双刃剑，好的一方面在于可以给各个年龄阶段各个社会层次的人一个公开平等的机会，但坏的一面在于安利公司跟你没有固定薪酬劳务关系，跟你没有福利保障关系。如果你做出来了还好说，如果没做出来呢，它是跟你没有福利保障关系的，青春可是耽误不起的。</p>
<h4 id="直销行业的窗口期已经过去"><a href="#直销行业的窗口期已经过去" class="headerlink" title="直销行业的窗口期已经过去"></a>直销行业的窗口期已经过去</h4><p>四、任何事物都有一个时效性，最好做安利的时代已经过去了。安利的品质还在，但它整个行业趋势已经在走下坡路了，安利产品都是从营销人员手中出去，无门槛就意味着进到安利里面来的人鱼龙混杂，素质素养，学识背景参差不齐，一个层次低下的营销人员就影响一大批人对安利的口碑评价，一个谣言造成的负面影响常常需要你花很多精力和时间成本去抵消它，这些费心费力又不讨好，都不利于这门生意的开展。</p>
</blockquote>
<p>此外，我认为安利里面过于宣传那几位到了一定级别风光无限的成功老师，但它不会跟你讲他们背后死掉的那些千千万万的小兵小卒，这其实是典型的“<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/view/4846327.htm%3Ffr%3Daladdin" target="_blank" rel="external"><strong>幸存者偏差</strong></a>”定理。</p>
<p>如果你真的想从事安利，先掂量一下自己，想清楚上面的这几点后再做决定不迟。</p>
<h3 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h3><p>在我从事安利的前期，我斗志昂扬，看着台上那些风光无限的成功人士，我想着可能下个月、明年、过个三五年、甚至不远的将来，我就能成为他/她那样的人，能过他/她那样风光无限的生活，但是到了后期，随着我对它认识和了解得增多，我就慢慢害怕起来，万一我投入宝贵的青春到里面最后没有成绩出来怎么办呢？从我的上级领导人来看，我就很担心这一点，他是名校的研究生，我认为凭他的聪明和勤奋，如果一心一意在自己的本职工作领域，物质条件可能大大比我认识他的那个时候要好。</p>
<p>当然，话说回来，我只是从一个营销人员退回到了普通产品消费者的位置。安利产品我还是会一如既往地使用，当时我做过很多对比实验，清楚地知道安利产品的特性，以我的亲身使用体验来做一些推荐吧。如果你经济实力有限，我推荐你用它的碟新洗洁精和雅蜜沐浴露，小玩意儿品质好，价格不贵，绝对超值；你收入如果还说得过去，那么可以尝试吃吃纽崔莱的蛋白质粉，蛋白粉的效果对体质的改善非常明显，我老妈的感受就是一个活生生的例子；那如果真到了不差钱的地步，那么安利的净水器，空气净化器，皇后精锅21件套全部都上吧，依你不差钱的程度，空气净化器可以买一台或者多台，最好一个房间里放一个，我敢打赌你家小猫小狗撒娇都会撒娇得更欢。</p>
<h3 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h3><blockquote>
<p>这是本人2014年9月13日发表于知乎的一篇问答，引起广泛讨论和巨大反响，超出我的想象，点击<a href="https://www.zhihu.com/question/20834229/answer/30486799" target="_blank" rel="external">链接</a>查看原文及相关讨论。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 扯淡 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安利 </tag>
            
            <tag> 人生教训 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学JavaScript的用处]]></title>
      <url>/2017/10/26/benefits-of-learning-javascript/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这几天趁工作间隙看了jQuery、DOM、XMLHttpRequest（Ajax的核心对象）等方面的内容。</p>
<p>把教程上面的示例都尝试着写了一下，感觉并没有想象中的那么难。jQuery实现的特效都很漂亮，自己实操发行还是很带感的；Ajax从上大学那会儿就开始听说了，但直到今天才真正动手去实现它，想想也是醉了。😂</p>
<p>前两天一个同事看我在写JavaScript，他满怀疑惑、不解地问“学这个有什么用嘛？”。我嘿嘿一笑，没有回答，因为学这些和我们目前的本职工作没有半点关系，我能直接告诉他主要是“闲得慌”吗。😄</p>
<p>今天倒是认真地想了想，还真有一个用处，我把web前端这些东西都弄懂了，以后写爬虫分析HTML页面可就方便多了。 至于转前端开发，那不是我的目标，我这点积累是远远不够的，业余前端开发我倒是会一直折腾下去。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重新开始学习JavaScript]]></title>
      <url>/2017/10/21/restart-to-learn-javascript/</url>
      <content type="html"><![CDATA[<p>这两天趁着工作闲暇间隙，开始重新学JavaScript。</p>
<p>我是COBOL程序员出身，这是一门IBM主导的语言主要应用于银行领域，我目前仍在银行项目中，还在参与中国银行海外版本核心银行系统的开发工作中，银行系统的开发是典型的工程软件，它和项目软件有很大的区别。</p>
<p>银行项目是脉冲型的，工程软件一个项目一般是几百号人同时做，忙的时候天天加班，每周4+1（周一到周五晚上加4天，周六加1天），每天8+3（没玩加3个小时）…猛推进度；等项目阶段性收尾，来一波轻松地出奇的朝九晚五，大多数时间一天只用处理一两个问题单，闲得让人无聊。</p>
<p>前阵子一直在看Python，我们上班用的工作机无法连外网，电脑里仅有一本Python2.7安装时附带的官方手册，已经翻来覆去地看过几遍，全部内容几乎都上手写了一回，实在碍于学习资料太过缺乏，再加上无外网（无外网，很多包安装不了；无外网，查起资料来很不方便，我们看手机会被摄像头抓监控；无外网，很多测试数据搞不到…），总之，无外网，没合适的小项目练手，Python学起来很让人乏味，而恰巧近期找到一本w3cschool文档，于是就把Python先晾一阵子，重新学起JavaScript来。</p>
<a id="more"></a>
<p>为什么说重新学？其实7年前捣鼓WordPress那阵子，我接触过很多前端方面的内容，PHP、JavaScript、JQuery、CSS、HTML都有学过。可惜那时没目标，未能做到深入，再加上那时自身水平能力有限，遇到难题也没信心去攻克，致使水平停滞不前。我记得很深的是，Wordpress框架有一个内置的钩子函数（hook），那时我尝试自己开发一套Wordpress主题，在改写WordPress模板和组件过程中，对这个hook函数一直不理解，完全没信心弄懂它，于是学着学着就慢慢放弃了。按照李笑来老师的说法，“<a href="http://mp.weixin.qq.com/s?__biz=MzAxNzI4MTMwMw==&amp;mid=402247369&amp;idx=1&amp;sn=1d1613f157143a04bd93709cd8a5fa78&amp;scene=21#wechat_redirect" target="_blank" rel="external">7年就是一辈子</a>”。不知不觉中，葬送了学习前端的最佳时期。</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/07/hen-and-front-end-engineer.html" target="_blank" rel="external">阮一峰</a>曾经在一篇博文里写过，“全中国6亿智能手机用户，每年消费的网页和App数量，是一个天文数字，这些数字内容全部需要依赖前端工程师生产出来，因此和下蛋的老母鸡类似，前端工程师是非常吃香的职业”。</p>
<p>当然，前端职位的吃香依赖于2012年移动互联网的爆发，这在7年前确实遇见不到。</p>
<p>不过这7年时间，围绕JavaScript技术及其周边的框架更新迭代了多少代啊，反正一个很直观的感受是这几年在网上看到的网页，交互效果是越来越炫酷了。这几年流行的Vue、Angular、React…这些各大厂牌或个人发布的前端框架，轮流霸占着前端兵器排行榜，我知道它们很火、用途广泛、前景无限，但我一看不懂，二不会用，经常一脸懵逼，能怎么办？只能从最基础的JavaScript开始啃这块硬骨头。</p>
<p>今年阅读了大量的技术公众号和技术博客，可以说，让我重新开启了对程序（不再局限于“算法+数据结构=程序”）的认识，IT行业更新迭代有时比翻脸还快，这个行业的从业者，不顺应趋势，结局几乎只有被淘汰，这个话题以后再专门写一篇。</p>
<p>重学JavaScript还有一个重要的原因，Node.js的发布，JavaScript的未来更加具有想象力。今天，移动互联网大爆炸，不管是电脑还是平板，或者手机，只要用到浏览器，都离不开JavaScript这门语言，余弦说“JavaScript目前的架势有点要一统天下的味道”，我是认同的，发迹于前端，但越来越有往后端发展的趋势，未来的JavaScript可能就不仅仅只是在浏览器上面运行了，说不定哪天就替代掉了ASP、PHP这些后端网页开发语言。</p>
<p>回想7年前玩WordPress的那段经历，因为本质是玩，本质图的是新鲜，其实根本就没想过要把网页背后的运行机制和原理弄懂，基于那时对计算机世界浅显的认知，压根也没意识到JavaScript这门语言的强大和重要性，惭愧啊…</p>
<p>反正，过去已经过去，既然有兴趣，就先学起来再说吧。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> COBOL </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
